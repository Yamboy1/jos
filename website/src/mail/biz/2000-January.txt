From gchii@mindspring.com Wed, 26 Jan 2000 09:57:34 -0500
Date: Wed, 26 Jan 2000 09:57:34 -0500
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [Biz] Define license?

The first thing on our agenda (since we already decided we need a JOS
license) is to define our license options. What kind of license is possible?

Option 1. After we write code, we can always put it in the public domain.
In a broad sense, it is a license for others to use the code in any way, at
any time, by anyone. Once it is introduced into the public domain,
copyright and patents are nul and void. Anyone can rewrite the code and
distribute it under the same brand name.

Option 2. We could copyright our code and provide a software license to
anyone without a license fee. This would enable anyone to customize the
source code for any purpose, inside any derivative work (both open and
proprietary). Unlike putting the code in public domain, this license would
prevent others from rewriting the code and distributing it under the same
brand name.

Option 3. We could copyright our code and provide a free software license
to anyone in the free license community. This would enable anyone in the
free license community to customize the source code for any purpose as long
as the customize code is distributed under a free license. Unlike option 2,
this license would prevent the inclusion of the product in a proprietary or
commercial product. The license is not available to commercial products.

Option 4. We could copyright our code and provide a free software license
to anyone who wants to use the code in any way, except customization. This
code could be used in an open or proprietary product as long as it is used
without modification in any way. To modify such software, users would be
required to participate in a negotiation with the original author. This
kind of license enables anyone to read the source code, learn more about
writing and using source code, use the intellectual property expressed in
the soure code, and copy-and-paste idioms of source code into other products.

Option 5. We can write our software under the Sun Microsystems' Community
Software License. Without Sun Microsystems' seal of approval, "JOS" is a
"free, virtual machine-based operating system."

A software license can forbid the use of a brand-name to describe a
software clone. No software license can forbid the creation of a clone.
Such a license would be anti-competitive, monopolistic and prevent a level
playing field in a free market. If a clone is developed under the strict
guidelines of cleanroom implementation, source code developed in a
cleanroom can be perfectly compatible with another software product.

In other words, you can create a 100% perfectly compatible clone of the
Java Virtual Machine -- without the blessing of Sun Microsystems -- as long
as you call it something else. (a) You cannot call it Java(tm) because
Java(tm) is a brand-name. (b) You cannot say that it is Java(tm)-compatible
because Sun Microsystems is the only organization that can give the
Java(tm)-compatibility seal of approval. (c) You can say that it is a
virtual machine (lower case) because "virtual machine" is a generic name
for any kind of virtual machine. (d) You can use terms such as "bytecode",
"opcode", "class", and "interface" because these are generic terms.





From RegierAveryJ@JDCORP.deere.com Thu, 27 Jan 2000 09:22:40 -0600
Date: Thu, 27 Jan 2000 09:22:40 -0600
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [Biz] License Needs

Gibert has shown what our options are (though I think he missed a few, where
would the (L)GPL fit in that list, or the current license used by
JJOS/decaf?) now we need to think about what we need in a license:

1)  We need to legally be able to incorporate GPL'd and LGPL'd works into
JOS.  There is an emourmous amount of work that has already been done that
we don't have the time to do (if we want JOS within the next two years,
anyways).  Included among these are the Classpath project
http://www.gnu.org/software/classpath/, dnsjava
http://www.xbill.org/dnsjava/, kjc http://www.dms.at/kopi/, etc.  Also, ther
are other projects without the GPL family of licence, including NinjaRMI
http://www.cs.berkeley.edu/~mdw/proj/ninja/ .

2)  We need to keep from offending core JOS contributors.  Licensing is a
sticky issue with many differing and conflicting opinions.  In previous
licensing discussion threads, I have seen people say that they won't
contribute to the project if we don't standardize on the GPL.  I've seen
others say that they won't contribute if we do standardize on the GPL.
Thus, we WILL offend somebody.  We need to be sure that those we offend
aren't contributing real code anyways instead of those contributing code.
(No, I'm not beating around the bush here!)  In short, we need to get the
opinions of Todd Miller and John Morrison.  They have already selected
licenses for JJOS/decaf.  We need to know if they are willing to change it
to whatever the JOS project members (as defined by the JOS Constitution)
agree upon in a vote.  We are in this position because we as a project
waited so long to define a voting system so that we could standardize on a
license.  If we had settled on one earlier, it would have been easier to get
real contributions when there is an established license.  We shouldn't
continue that mistake.

3)  It needs to be BOTH free (as in beer) AND open source.  This is the
assumption most members have made for the last two years and it would be
rather stupid of us to go in another direction.

Are there any other NEEDS in a license?

- Avery J. Regier




From RegierAveryJ@JDCORP.deere.com Thu, 27 Jan 2000 09:32:44 -0600
Date: Thu, 27 Jan 2000 09:32:44 -0600
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [Biz] Steps to defining a license

There are some things we need to do before we can decide on a license:

Information gathering should be our first task:
1) We need to know if the current JJOS/decaf license will allow us to
incorporate GPL'd works.  Thus, someone needs to send an enquiry to the FSF
to find out.  Also, how easy it is to incoporate GPL'd works into GPL'd
works?  Believe it or not, that is a somewhat fuzzy issue.

2)  We need to gather the opinions of core JOS developers.  When we go to a
vote, we need to be reasonably sure it will pass and it won't offend them.

3)  We might want to do a poll of the JOS members in parallel with other
activities.  We should not wait for the results to slowly creep in before we
do other steps.

After that, we need put all of the issues together into one document, so 
4)  Write a licensing FAQ.  This has the benefit of comunicating the issues
to all of the members while helping us to think through the issues to come
to a workable conclusion.

5) Decide what license to put before the membership.

6) Draft a vote question and vote on a license.

Any other things we need to do?

- Avery J. Regier




From ryan@whitewolf.com.au Fri, 28 Jan 2000 02:12:38 +0000
Date: Fri, 28 Jan 2000 02:12:38 +0000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [Biz] Define license? -- or not

(I have CC'd John Morrison(jm) and Todd Miller(_quinn) in case they are
not subscribed. They may wish to correct any information I've assumed
about their licenses)

Gilbert Carl Herschberger II wrote:
> 
> The first thing on our agenda (since we already decided we need a JOS
> license) is to define our license options. What kind of license is
> possible?

I don't agree that we need a JOS license, or at least, I have not made
up my mind on the matter. So I would suggest we make this the first item
on our agenda.

As Regier pointed out, whichever license we decide on, people will
disagree and leave the project. For instance, I would probably leave the
project if I were not able to contribute GPL'ed code to JOS. Sure, the
code I contributed to the JJOS kernel was not under GPL but it benefited
me to make the contribution nonetheless.

I believe we can support multiple licenses in JOS, but more on that
later. First I will make a case for using the GPL in certain parts of
JOS.

The case for (L)GPL is that it might be the most practical solution in
terms of what reusable code is already available to you. If you look at
all the existing open-source software out there directly related to what
we're doing, virtually all of the major projects have chosen to use the
GPL or LGPL:

Kaffe - http://www.kaffe.org/ - GPL
	* A free JIT-enabled JVM complete with JDK 1.1 class libraries.
japhar - http://www.japhar.org/ - LGPL
	* Another free JVM (works with Classpath)
TYA - http://www.dragon1.net/software/tya/ - GPL
	* A free JIT
Classpath - http://www.gnu.org/software/classpath/ - LGPL
	* Free implementation of JDK 1.1 (and some 1.2) libraries
GCJ - http://sourceware.cygnus.com/java/ - LGPL
	* Java to native compiler
Echidna - http://www.javagroup.org/echidna/ - LGPL
	* Adds process support to Java (pure Java solution)
Alta - http://www.cs.utah.edu/flux/java/alta/index.html - GPL
	* Adds process support to JVM (based on kaffe - to be released)

In fact, I have not found any major Java OS related projects that have
not decided to go with the GPL or LGPL, but if anyone knows of any,
please provide a list.

The GPL was designed to support collaboration and code sharing within
the free software community, and that code sharing could really pay off
in our case because a lot of GPL'ed software has already been written in
this area. I would have expected jm and _quinn to take advantage of this
in the kernel and the JVM, but they chose not to, for various reasons.
>From memory, (and please correct me if I have it wrong) jm would like to
allow commercial exploitation which the GPL can't provide (he's also
very smart when it comes to operating systems, and nothing else out
there is good enough for him to reuse). _quinn always intended to write
the whole jvm from scratch as a learning experience, and so code sharing
under the GPL did not provide any benefit. This allowed him to release
his code under a license compatible with jm's kernel so that they could
closely integrate the two products.

I respect their decisions and I expect other programmers will also
have their personal preference.

The way to support multiple licenses is to make the operating system
modular and allow a different license for each module. If you consider
a typical Linux OS, the Linux kernel is just one module - it is released
under the GPL. The license explicitly states that anything that runs on
top of the kernel is not bound by the same license. The rest of the
operating system is made up of hundreds of individual programs running
on top of the kernel and each individual program is free to use whatever
license it wishes.

I am not sure of the exact figure, but at least 31% of a typical Linux
distribution consists of GPL or LGPL software. This figure does not
account for GPL'ed or LGPL'ed software that is not officially GNU
Software (apart from the Linux kernel itself which I did include). The
point is, the rest of the 100% consists of software from various other
licenses. For example, the X Window System implementation that is
distributed with Linux (XFree86) comes under a modified X Consortium
license. This component is so integral to the operating system as a
whole, yet it is released under a different license.

In conclusion, allowing multiple licenses makes JOS attractive to more
people. Hopefully this can be resolved without a vote - we should not
force an issue that may lead many members to leave the project. After
all, JOS is currently made up of multiple licenses and unless a
significant number of people are unhappy, we should just leave things
the way they are. We just need to clarify the way things are.

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From tmiller@haverford.edu Thu, 27 Jan 2000 22:52:15 -0500 (EST)
Date: Thu, 27 Jan 2000 22:52:15 -0500 (EST)
From: Todd L. Miller tmiller@haverford.edu
Subject: [Biz] Define license? -- or not

> The case for (L)GPL is that it might be the most practical solution in
> terms of what reusable code is already available to you.

	For instance, our class library is going to be LGPL because
classpath is, as least the Java portions of it.

	(Which license the native parts of it come under will really
depend on if I think it'll be easier to re-write classpath to use BCNI
(e.g. remove as much as possible of their native code and write the rest
into the JVM (that is, statically link the library, since we don't have
dynamic links with jJOS quite yet) -- for both builds, where we migrate
away from classpath's native code as relevant portions of our
emulation/codebase become available) or to add JNI support to decaf. (pro:
it's a standard.  con: it's a whole lot of work for something we don't
won't anyone to be doing.

	IMHO, using native code in a JOS app should be
akin to using a kernel module for a linux app.  This lets us say "it has
to be linked into the kernel" where 'kernel' is the jJOS+decaf
combination, and gives the right set of connotations to native code.  For
effiency's sake, we may have to put graphics drivers (etc) in native code
in the kernel, and step away from the X model.  If we do, we may want to
provide a relatively high-level API so the drivers can take better
advantage of the hardware acceleration available.  (e.g. either Java3D or
OpenGL or 3D, and the equivalent for 2D.))

-_Quinn





From gchii@mindspring.com Fri, 28 Jan 2000 16:20:22 -0500
Date: Fri, 28 Jan 2000 16:20:22 -0500
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [Biz] Define license? -- or not

At 02:12 AM 1/28/00 +0000, Ryan Heise <ryan@whitewolf.com.au> wrote:
>I don't agree that we need a JOS license, or at least, I have not made
>up my mind on the matter. So I would suggest we make this the first item
>on our agenda.

We need to do something. We need to do it now. I am concerned about
misrepresentation of the JOS Project as well as offending our membership.
Failing to clarify becomes a misrepresentation that grows over time. As
long as we let the ambiguity stand, it becomes increasingly difficult to
fix it. Leaving the issue alone would be a disservice to the members of the
JOS Project and the community at large.

How is a member offended? Members are offended, and should be, when others
break their promise. It is most helpful to put the promise in writing. It
is helpful to clarify the promise -- sooner rather than later. Since the
JOS Project intends to build software and distribute it with a free
software license, I am more than happy to participate. Since the JOS
Project intends to publish the source code for everyone to see, I am more
than happy to participate.

If, by some blatent disregard for the articles already published on the JOS
website, the JOS Project votes to abandon their free-license or open-source
promises, I would be offended. Wouldn't you?

Unfortunately, I have read many articles and Java programs that reference
the "JOS License" as if it already exists. We should do something to make
the JOS license concrete instead of leaving it up in the air. We should
clarify our attitude toward "modules" within the operating system as a
whole. Like any author, a member of the JOS project reserves the right to
release a product under GPL or LGPL.

I think we've obligated ourselves to finish the JOS License once we
started. A "official" JOS license might be drafted as a minimalist effort,
simply including the text of LGPL by reference. Such a license would enable
members of the JOS project to refer to the mainstream JOS license.

It is not feasible to search and destroy all references to the "JOS
License". The "JOS License" should cover all of the articles and Java
programs that reference it directly. An author would have to choose to
publish under a "JOS License".

>After all, JOS is currently made up of multiple licenses and unless a
>significant number of people are unhappy, we should just leave things
>the way they are. We just need to clarify the way things are.

I agree whole heartedly. JOS as a whole is currently made up of multiple
licenses, and should be. We must be responsible toward our members and our
community to clarify what it is and how it works.

It might clarify our position of free license and open source to publish
"official" licensing guidelines for members of the JOS project to use. As a
group, we might recommend (and assist) an author to publish under LGPL.

I wonder what other members think about the "commecial use" issues of the
JOS Project. I have been unable to find answers to these questions:

1. If a commercial vendor (like Compaq, Dell, Gateway or IBM) wants to
distribute JOS (or parts of JOS) with every new machine, should we abandon
our free-license promise? Personally, I think we must stick to our
free-license or open-source promise because it is the right thing to do.

2. If a commercial vendor (like IBM, Microsoft, Red Hat or Sun
Microsystems) wants to distribute JOS (or parts of JOS) with their
commercial software, should we abandon our free-license promise?
Personally, I think we must stick to our free-license or open-source
promise no matter who benefits.

3. If any commercial vendor wants to start with JOS (or parts of JOS) and
create a commercial-licensed or closed-source clone, should we abandon our
open-source promise? I think we must stick to free-license and open-source
in every case.

4. If a member of the JOS project wants to fork JOS into a for-profit,
closed-source commercial venture, what kind of effect does that have on the
JOS Project? Personally, some of my work is open source; some of it is
commericial. My best work is open source; but, I have to feed my family.
Open source may not be the best choice for everyone. To any member that
forks the JOS Project, I wish them well.




From ryan@whitewolf.com.au Sat, 29 Jan 2000 20:46:46 +1100
Date: Sat, 29 Jan 2000 20:46:46 +1100
From: Ryan Heise ryan@whitewolf.com.au
Subject: [Biz] Define license? -- or not

Gilbert Carl Herschberger II wrote:

> >After all, JOS is currently made up of multiple licenses and unless a
> >significant number of people are unhappy, we should just leave things
> >the way they are. We just need to clarify the way things are.
> 
> I agree whole heartedly. JOS as a whole is currently made up of multiple
> licenses, and should be. We must be responsible toward our members and our
> community to clarify what it is and how it works.
> 
> It might clarify our position of free license and open source to publish
> "official" licensing guidelines for members of the JOS project to use.

That's a good idea. Debian has such a thing:

	http://www.debian.org/social_contract

We could simply say that a component can be officially accepted as part
of JOS if it meets the Open Source Definition.

> We need to do something. We need to do it now. I am concerned about
> misrepresentation of the JOS Project as well as offending our membership.
> Failing to clarify becomes a misrepresentation that grows over time. As
> long as we let the ambiguity stand, it becomes increasingly difficult to
> fix it. Leaving the issue alone would be a disservice to the members of the
> JOS Project and the community at large.
> 
> How is a member offended? Members are offended, and should be, when others
> break their promise. It is most helpful to put the promise in writing.

Actually, when I joined the project two years ago, it was advertised as
an "Open Source" operating system. I and many others joined JOS under
this impression. It seems less clear now as the web pages have been
changed to say "open" rather than "open source".

I think some sort of social contract (as described above) could have
prevented this confusion.

> Unfortunately, I have read many articles and Java programs that reference
> the "JOS License" as if it already exists. We should do something to make
> the JOS license concrete instead of leaving it up in the air. We should
> clarify our attitude toward "modules" within the operating system as a
> whole. Like any author, a member of the JOS project reserves the right to
> release a product under GPL or LGPL.

I also noticed people referring to this non-existent "JOS License". It
seems silly to put your trust in a license that is yet to be defined,
especially considering that at one time people were trying to
incorporate a royalty system into the license.

You are right in wanting to clarify the modules of JOS. This was one
intention of the arch@jos.org list. Once we have mapped out the
architecture, we will then see our options for the application of
multiple licenses. The idea of the single JOS license (I suspect) was
that people thought of JOS as having a one huge Java layer full of
internal dependencies. Now we have a more useful way of looking at JOS.

As I see it, the interfaces between modules can be placed under the
public domain. Individual modules can be under any license (although it
must conform to the Open Source Definition to be part of JOS). Libraries
used by parts of JOS should use a library-type license such as LGPL or
the MIT license (among others). These licenses place no restrictions on
the licenses of the programs that use those libraries.

> I think we've obligated ourselves to finish the JOS License once we
> started.  -- snip --
> It is not feasible to search and destroy all references to the "JOS
> License".

Why not ask the respective authors if they wish to change their license
before we potentially define the JOS license to be something they
disagree with?

Changing a license is not that big a deal. It is tedious but it happens
all the time. The Kaffe JVM had to go through this when it changed from
using a BSD license to using the GPL, and they have a much larger code
base than what is covered under the JOS License.

It is hard to say at this point in time what licenses all this existing
code should go under, because in my mind, the development of the Java
layer of JOS has not even begun. People have basically been submitting
code that they think "might" be useful to JOS but have no idea how it
will fit in exactly. Real development will begin after we have a plan,
and that will occur after a Systems Architect has plotted out the
modules. Then we can see how the existing code fits in, if indeed it
does fit in, and we can work out the most appropriate license to stamp
on that code.

> I wonder what other members think about the "commecial use" issues of the
> JOS Project. I have been unable to find answers to these questions:
> 
> 1. If a commercial vendor (like Compaq, Dell, Gateway or IBM) wants to
> distribute JOS (or parts of JOS) with every new machine, should we abandon
> our free-license promise? Personally, I think we must stick to our
> free-license or open-source promise because it is the right thing to do.

Open Source licenses do not and cannot place this restriction. Compaq
and Dell are free to distribute and sell JOS with their computers if we
use an Open Source license. The issue of making money from Open Source
software is described at:

	http://www.opensource.org/

> 2. If a commercial vendor (like IBM, Microsoft, Red Hat or Sun
> Microsystems) wants to distribute JOS (or parts of JOS) with their
> commercial software, should we abandon our free-license promise?
> Personally, I think we must stick to our free-license or open-source
> promise no matter who benefits.

I believe that even with an Open Source license, IBM or Microsoft are
free to do this, as long as they meet the distribution terms of the
license. For example, if they distribute GPL'ed software with their own
software, they must include the source code to the GPL'ed portions.

> 3. If any commercial vendor wants to start with JOS (or parts of JOS) and
> create a commercial-licensed or closed-source clone, should we abandon our
> open-source promise? I think we must stick to free-license and open-source
> in every case.

There is nothing we can do to prevent clones, but don't forget that JOS
is already a clone of Java OS! (Ok, it's not an exact clone, but...)

> 4. If a member of the JOS project wants to fork JOS into a for-profit,
> closed-source commercial venture, what kind of effect does that have on the
> JOS Project? Personally, some of my work is open source; some of it is
> commericial. My best work is open source; but, I have to feed my family.
> Open source may not be the best choice for everyone. To any member that
> forks the JOS Project, I wish them well.

This is clause 3 from the Open Source Definition:

        3. Derived Works

        The license must allow modifications and derived works,
	and must allow them to be distributed under the same
	terms as the license of the original software.

So again, an open source license must allow forks. Whether or not the
fork can be proprietary is up to the particular license. If we follow a
modular design, it may be that some modules allow proprietary forks and
others do not.

If you are interested in making money off JOS, have a look at the
approaches major Linux distributors have taken. Some simply put together
a distribution of pure open source components and sell the CDs. Others
include proprietary components and sell CDs at a higher price.

--
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From iainshigeoka@yahoo.com Sat, 29 Jan 2000 11:11:12 -0600
Date: Sat, 29 Jan 2000 11:11:12 -0600
From: Iain Shigeoka iainshigeoka@yahoo.com
Subject: [Biz] JOS Admin Organization...

Hello,

First a short note.  This discussion only belongs on the biz list.  So 
please, only reply to, and continue this discussion on the biz list.

I would like to bring another issue (other than the JOS License) up 
for consideration.  This is something I'd like to discuss with the 
hope that we can eventually put it up for a vote.  

It seems to me that we should decide whether to create an 
"official" minimal administrative structure to allow us to conduct 
business (this may be something we don't want to do but I think 
should be voted on one way or the other).

Establishing JOS Admin

I would like to propose and get a vote on whether JOS should be 
run like a non-profit org. business, or continue to be a non-entity as 
far as business concerns go.  My primary motivation is to 
determine, one way or the other, if we should open a JOS bank 
account.

If we remain a non-business entity, we save ourselves from the 
administration hassles, having to have a board (i.e. president and 
treasurer etc), board meetings, and we can continue operating as 
we have been.

If we become a business entity (a non-profit business organization 
I'd imagine), we can establish a bank account, and hopefully 
generate some revenue from advertising or cross-sales (like 
becoming amazon resellers) on the website.  We would also be 
able to accept donations!   The motivation being that we could pay 
for the JOS expenses member are currently incuring (if any) and 
hopefully use the remaining money for JOS.  I'd love to sponsor a 
conference or at least travel expense grants to JOS members so 
that we can have meetings (maybe at JavaOne or the O'Reilly Java 
conference).  That of course is down the line a ways but a 
possbility.

As webmaster, I've become a defacto first point of contact for much 
of the online inquiries regarding issues as wide ranging as cross-
advertising offers, requests for official training materials, 
sponsorships etc.  Most of these offers are nearly impossible to 
pursue without at least having a bank account and an official "head 
honcho".

On the other hand, there are advantages to not creating any official 
organization behind the official OS.  For instance, we remove a 
large source of possible commercial influence on the OS 
development.

The way I see it, its the difference between the Linux model (which 
has no real business behind it), and the FreeBSD model (which is 
a structured org that pays salaries etc).  IMHO, the Linux model 
works for Linux because they have a very clear leader in Linus (so 
a vision and a final "yes or no" man is present).  Do jm and _quinn 
serve this same function and are they willing to play the role?  
Does someone else?  If not, I think considering a more structured 
FreeBSD model may be beneficial to the project.

Comments?

-iain



From iainshigeoka@yahoo.com Sat, 29 Jan 2000 11:11:12 -0600
Date: Sat, 29 Jan 2000 11:11:12 -0600
From: Iain Shigeoka iainshigeoka@yahoo.com
Subject: [Biz] JOS License Guidelines...

Hello,

Sorry about jumping on this so late...

I agree with the latest sentiment that we should establish minimum 
guidelines for JOS software licenses and not establish and 
"enforce" a single project wide license.  

On the otherhand, there already exists a fair amount of code that is 
licensed to the JOS License which remained to be determined.  
So, I think it still behooves us to vote on establishing a "defacto" 
JOS License.  Then developers that don't care about license 
details, can simply license their code under the "JOS License" and 
be done with it.  

IMHO, the simplest, clearest, and least encumbering opensource 
license is the FreeBSD License.  It essentially is a warranty 
disclaimer and a copyright notice.  So, if an author doesn't care 
about licensing (as long as its opensource) and wants to just 
license under the "JOS License" it should be the FreeBSD 
License.  If people do care, they can select an alternative license 
as long as it meets the JOS License Guidelines.  Opinions?

I see no reason not to base the JOS License Guidelines on the 
debian example pointed out by Ryan:

http://www.debian.org/social_contract

I would like to take that document as a beginning template and 
work off of it.  If no one objects, I'll make a copy of it into the wiki.

I would also like to add an example licenses section to the 
guidelines so someone can easily choose from one of the various 
major models of open source software depending on their personal 
preference.  This would include short explanations, along with 
some "boilerplate" versions of the templates ready to be used.

The way I see it, there are 4 major open source models worth 
mentioning:

GPL style:  
The OpenSource status of the code MUST be maintained in 
derivative works ("free-speech" but not "free beer").  Provides 
maximum protection of the source's "open" nature.
http://www.gnu.org/philosophy/license-list.html

FreeBSD style:  
Derived works may be re-Licensed in any way (including continuing 
with the same license, or making it fall under a proprietary and 
closed-source license).  Provides maximum flexibility in code use 
(esp. for commercial usage).
http://www.freebsd.org/copyright/copyright.html

Commercial style:  
Most of the License is that of GPL with "escape" clause(s) that 
allows derived works to be licensed as per a FreeBSD license 
under certain conditions.  

	Exclusive Use:
	 These conditions tend to be for the exclusive commercial use
	 of a particular entity/company (aka the Mozilla Netscape Public
	 License or Sun's SCSL that it is using for Java).  The JJOS and
	 decaf code (basically the JOS kernel) is currently under this
	 type of license.
	http://www.sun.com/jini/licensing/

	Publish-or-Pay
	 Some members of the JOS project were discussing the
	 alternative use of a "Pay or Play" clause where derivative
	 works could be "escaped" from the GPL like requirements by
	 paying fees.  In this case, the licensed software becomes a
	 possible source of income for the project.  A win-win situation
	 for the opensource community and commercial usage.
	http://www.public-software.com/licensing/index.html

Library style:
This is an LGPL style license that allows much greater freedom 
than the traditional GPL license for derived and "covered" works.  
Basically lets anyone "use" an LGPL library of code for any 
purpose, without the normal GPL restrictions.



From gchii@mindspring.com Sat, 29 Jan 2000 12:10:30 -0500
Date: Sat, 29 Jan 2000 12:10:30 -0500
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [Biz] Define license? -- or not

At 08:46 PM 1/29/00 +1100, Ryan Heise <ryan@whitewolf.com.au> wrote:
>We could simply say that a component can be officially accepted as part
>of JOS if it meets the Open Source Definition.

I would like to see members of JOS work toward a "Social Contract" for the
JOS Project. Such a social contract would be focus more on issues and less
on legalese.

>Actually, when I joined the project two years ago, it was advertised as
>an "Open Source" operating system. I and many others joined JOS under
>this impression. It seems less clear now as the web pages have been
>changed to say "open" rather than "open source".
>
>I think some sort of social contract (as described above) could have
>prevented this confusion.

First, we should establish a social contract. It should outline and
describe our intentions. Later -- and if necessary -- a JOS "license" would
be based upon the social contract.

A. JOS is big. I believe JOS must be modular, not monolithic. Each module
linked into the JOS product should have self determination. Each author
should decide what license they want to use for each module. Derivative
works must proceed on a module-by-module basis.

This kind of modular architecture brings the benefits of free market
competition. Instead of limiting JOS to one of each, there might be dozens
of competing and compatible modules to plug in a particular feature.

B. I believe JOS modules should be "open source" whenever possible. The
source code should be published for everyone to see. When building trust in
JOS as a viable operating systems, it helps to publish the source code.

C. I believe the process of module development should be by membership and
make use of open forums. In a sense, this kind of development remains true
to the ideas of the original author. It is a "benevolent dictator" approach
that has worked well for the Linux, especially the Linux kernel.

Membership means that the development process is not completely open to the
general public. Members must be screened and qualified before their
contributions are accepted, approved and redistributed. It is reasonable to
protect a JOS kernel from the hands of a novice programmer.

The development process must use open forums. By using Internet mailing
lists, the JOS Project is already using open forums.

What about the APIs required to make modules compatible with the kernel and
modules compatible with each other? The API must be open enough for
programmers to participate in the development of their own modules.
Publishing an API enables everyone to study. Opening API development
enables everyone (and anyone) to recommend their improvements.

There is far more to an API than JavaDoc. By using JOS Wiki for
documentation, the JOS Project is already publishing the APIs. We are doing
a good job. We need to clarify and put our intentions into a social contract.

This is a thought-provoking discussion. There's more to think about, isn't
there?




