From robfitz@geocities.com Wed, 30 Jun 1999 19:19:43 -0500
Date: Wed, 30 Jun 1999 19:19:43 -0500
From: Robert Fitzsimons robfitz@geocities.com
Subject: [JOS-Kernel] Kernel Interface

Hello everybody

I finally have got around to committing my changes to cvs and 
updating the KernelInterface wiki page.  Have a look at 
<URL:http://jos.org/wiki/view/main/KernelInterface> to see the kernel 
interface document so far.

Comments on the mailing list or wiki page are welcomed.

Robert Fitzsimons
robfitz@geocities.com




From hilarycheng@usa.net Thu, 1 Jul 1999 21:59:01 +0800
Date: Thu, 1 Jul 1999 21:59:01 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] Some Ideas About JJOS

This is a multi-part message in MIME format.

------=_NextPart_000_0021_01BEC40C.ED3863E0
Content-Type: text/plain;
	charset="big5"
Content-Transfer-Encoding: quoted-printable

Hi,
     I got Some ideas About JJOS. It may not be good. : )

1. I have studied JNI before. As a interface between Java and Native =
Lang.,
    They use their own set of primitative type of lang. i.e., they =
delcare jint instead
    of int. jbyte instead of char/byte. It is a good idea for us to =
design JJOS. Since we
    can commuincate Java with Native Lang. using these standard objects.

2. For the Unsigned Operation, It is quite complicated Problem. I =
suggest a alternative     approach. e.g. As we want to want to add two =
unsigned byte. we delcare two byte-size=20
     varaible as usual. Use alternate function to performation =
operation.
  =20
    byte a =3D 0xf0, b =3D 0x02;
    byte c =3D jos.system.unsigned.add(a, b);
    int value =3D jos.system.unsigned.ToInt(c);

    We can convert the add or ToInt to a native function during =
interpertion.=20
    We can using this approach to resolve it.=20

    It may not a good idea. Let's have discussion on it. :)

Regards,

Hilary




------=_NextPart_000_0021_01BEC40C.ED3863E0
Content-Type: text/html;
	charset="big5"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD W3 HTML//EN">
<HTML><HEAD>
<META content=3Dtext/html;charset=3Dbig5 http-equiv=3DContent-Type>
<STYLE></STYLE>

<META content=3D'"MSHTML 5.00.0910.1309"' name=3DGENERATOR></HEAD>
<BODY bgColor=3D#d8d0c8>
<DIV><FONT size=3D1><FONT face=3DArial>Hi,</FONT></FONT></DIV>
<DIV><FONT size=3D1><FONT face=3DArial>&nbsp;&nbsp;&nbsp;  I got Some =
ideas About=20
JJOS. It may not be good. : )</FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT size=3D1><FONT face=3DArial>1. I have studied JNI before. As =
a interface=20
between Java and Native Lang.,</FONT></FONT></DIV>
<DIV><FONT size=3D1><FONT face=3DArial>&nbsp;&nbsp;&nbsp; They use their =
own set of=20
primitative type of lang. i.e., they delcare jint =
instead</FONT></FONT></DIV>
<DIV><FONT size=3D1><FONT face=3DArial>&nbsp;&nbsp;&nbsp; of int. jbyte =
instead of=20
char/byte. It is a good idea for us to design JJOS.&nbsp;Since=20
we</FONT></FONT></DIV>
<DIV><FONT size=3D1><FONT face=3DArial>&nbsp;&nbsp;&nbsp; can =
commuincate Java with=20
Native Lang. using these standard objects.</FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT size=3D1><FONT face=3DArial>2. For the Unsigned Operation, It =
is quite=20
complicated Problem. I suggest a alternative =
&nbsp;&nbsp;&nbsp;&nbsp;approach.=20
e.g. As we want to want to add two unsigned byte. we delcare two =
byte-size=20
</FONT></FONT></DIV>
<DIV><FONT size=3D1><FONT face=3DArial> &nbsp;&nbsp;&nbsp; varaible as =
usual. Use=20
alternate function to performation operation.</FONT></FONT></DIV>
<DIV><FONT size=3D1><FONT =
face=3DArial>&nbsp;&nbsp;&nbsp;</FONT></FONT></DIV>
<DIV><FONT size=3D1><FONT face=3DArial>&nbsp;&nbsp;&nbsp; byte a =3D =
0xf0, b =3D=20
0x02;</FONT></FONT></DIV>
<DIV><FONT size=3D1><FONT face=3DArial>&nbsp;&nbsp;&nbsp; byte c =3D=20
jos.system.unsigned.add(a, b);</FONT></FONT></DIV>
<DIV><FONT size=3D1><FONT face=3DArial>&nbsp;&nbsp;&nbsp; int value =3D=20
jos.system.unsigned.ToInt(c);</FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT size=3D1><FONT face=3DArial>&nbsp;&nbsp;&nbsp; We can convert =
the add or=20
ToInt to a native function during interpertion. </FONT></FONT></DIV>
<DIV><FONT size=3D1><FONT face=3DArial>&nbsp;&nbsp;&nbsp; We can using =
this approach=20
to resolve it. </FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT size=3D1><FONT face=3DArial>&nbsp;&nbsp;&nbsp; It may not a =
good idea.=20
Let's have discussion on it. :)</FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT size=3D1><FONT face=3DArial>Regards,</FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT size=3D1><FONT face=3DArial>Hilary</FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV>&nbsp;</DIV>
<DIV>&nbsp;</DIV></BODY></HTML>

------=_NextPart_000_0021_01BEC40C.ED3863E0--




From clark.evans@manhattanproject.com Thu, 01 Jul 1999 12:44:24 -0400
Date: Thu, 01 Jul 1999 12:44:24 -0400
From: Clark Evans clark.evans@manhattanproject.com
Subject: [JOS-Kernel] Some Ideas About JJOS

> Hilary Cheng wrote:
> 
> Hi,
>     I got Some ideas About JJOS. It may not be good. : )
> 
> 1. I have studied JNI before. As a interface between Java and 
>     Native Lang., They use their own set of primitative type of 
>     lang. i.e., they delcare jint instead of int. jbyte instead 
>     of char/byte. It is a good idea for us to design JJOS. Since we
>     can commuincate Java with Native Lang. using these standard objects.

I suggest looking at Cygnus JGC compiler, they had to use
a slightly differnet interface and are trying to make it
work seamlessly with C++

	http://sourceware.cygnus.com/java/papers/cni/t1.html



From ryan@whitewolf.com.au Thu, 08 Jul 1999 14:02:07 +1000
Date: Thu, 08 Jul 1999 14:02:07 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] How to crash JOS.

Important read for jos kernel developers:

	http://www.research.att.com/~vj/bug.html

It appears as though it is possible for _verified_ code to crash a JVM
by spoofing one class with another.

On a related topic, I don't think it has been discussed here that
un-verified code can crash a JVM. The Java language stops you from doing
stupid things but the JVM does not (when verification is turned off). It
is possible to craft a Java class from hand-written bytecodes that will
crash a JVM if it is not checked by the verifier.

Interestingly, the verifier is only executed on applets. Applications
will not be verified unless you explicitly ask for this to happen. This
is because loading a class takes significantly longer if it needs to be
verified.

Since the kernel provides no memory protection (following the assumption
that Java code can't corrupt memory) and since there is only one JVM
instance for the whole operating system, we must verify all code that is
to be executed, otherwise one program can bring down the whole system.
It would be useful if the JVM could remember if it has already verified
a particular class so each class is only ever verified once -- until
that class file is changed.

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From tullmann@cs.utah.edu Thu, 8 Jul 1999 09:29:45 -0600
Date: Thu, 8 Jul 1999 09:29:45 -0600
From: Patrick Tullmann tullmann@cs.utah.edu
Subject: [JOS-Kernel] How to crash JOS.

Ryan Heise wrote:
> Important read for jos kernel developers:
> 
> 	http://www.research.att.com/~vj/bug.html
> 
> It appears as though it is possible for _verified_ code to crash a
> JVM by spoofing one class with another.

This is a "bug" in the ClassLoader spec, and has been fixed in more
JDK 1.2 (I think).  There's a paper describing a solution by
Gilad Bracha (from Sun) at

	http://java.sun.com/people/gbracha/classloaders.ps

This is a good description of ClassLoaders in any event, and probably
worth a read.

> Interestingly, the verifier is only executed on
> applets. Applications will not be verified unless you explicitly ask
> for this to happen. This is because loading a class takes
> significantly longer if it needs to be verified.

Its interesting to note that in both GCJ and Kaffe the verifier is
always run over code because the compilers in both systems requires
the flow-control graphs the verifier generates.  (In Kaffe's case this
doesn't mean much as the verfier doesn't do any real work other than
generate the flow-control graph... but as I understand it, GCJ
includes a starting-to-work verifier.)

> ... we must verify all code that is to be executed, 

That, or you trust the code.  For example, you shouldn't have to
verify the core kernel classes.  Or, you can decouple the verifier and
sign the code (or trust the delivery mechanism).  See UW's Kimera
project which breaks a JVM into pieces and spreads them around the
network: http://kimera.cs.washington.edu/.

-Pat

----- ----- ---- ---  ---  --   -    -      -         -               -
Pat Tullmann                                       tullmann@cs.utah.edu
		   ${HOME} is where the .emacs is.



From tmiller@haverford.edu Thu, 8 Jul 1999 18:13:50 -0400 (EDT)
Date: Thu, 8 Jul 1999 18:13:50 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] How to crash JOS.

> It appears as though it is possible for _verified_ code to crash a JVM
> by spoofing one class with another.

	Now that we know about it, we can implement the necessary fixes to
prevent this.  (Since we are, in all likelihood, going to break the
class-loader spec because of processes anyway.)  Since I haven't written
the code to allow java-language class-loaders anyway, this doesn't impose
much of a burden.

	w.r.t. to verifying code, I'll speculate that it would be easier
to write up memory protection (based on java processes) than write a correct and
exhaustive verifier, though I don't know what the difficulty level of
writing such a memory protection scheme might be.  (On the other hand,
there are source-code-free, complete, and reliable examples of memory
protection lying around the net (linux, *BSD).  I'm not sure that this is
the case for verifiers.)

-_Quinn





From vbman@pcpros.net Sat, 10 Jul 1999 21:35:53 -0500
Date: Sat, 10 Jul 1999 21:35:53 -0500
From: Cliff Baeseman vbman@pcpros.net
Subject: [JOS-Kernel] Construction of a new Java Operating System

Gents...

    I have no idea why on earth you would even consider creating a whole new
kernel to power your operating system.  I am personally involved in building
something similar to JOS but I am using a hacked version of the linux kernel
to do it.  I almost have the system running now and am testing some desktop
stuff on it.  The speed is exceptional and above that of sun's own javaos.
I intend to fully hide anything that even resembles unix to include the file
system.

 Powered by the powerful Linux bottom end but all java on top.....

Just curious as to your direction here!


Cliff Baeseman
It's off to the races!!!!
vbman@pcpros.net





From jl25@pix.co.za Sun, 11 Jul 99 22:45:02 +0000
Date: Sun, 11 Jul 99 22:45:02 +0000
From: jl25@pix.co.za jl25@pix.co.za
Subject: [JOS-Kernel] Construction of a new Java Operating System

>    I have no idea why on earth you would even consider creating a whole 
new
>kernel to power your operating system.  I am personally involved in 
building
>something similar to JOS but I am using a hacked version of the linux 
kernel to do it.  

And is it commercial, free? What is it?

John





From scode@scode.webprovider.com Fri, 16 Jul 1999 22:31:19 +0200
Date: Fri, 16 Jul 1999 22:31:19 +0200
From: scode@scode.webprovider.com scode@scode.webprovider.com
Subject: [JOS-Kernel] JOS and Java processors

--3ioKt2kN+IccB5F4
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: quoted-printable

I've been thinking about the possibility of running JOS on a Java processor.
Being able to run Java on a Java processor (i.e. achieving the speed of
native code) is kind of like ultimate goal of Java as far as I'm concerned.

By questions is, to those who know more about this than me (I'm a total
newbie when it comes to CPUs and kernel/JVM writing), could the kernel
interface(s) and jvm(s) currently being worked on be used on a Java
processor without *too* much trouble, or would that require a complete
reswrite/redesign of the entire system?

I.e., is the design of the JOS kernel(s)/JVM(s) currently suited for
execution on Java processors?

Or maybe I'm the only one who'd like to see Java processors on the
desktop?!? :)

--=20
/ Peter Schuller

PGP userID: 0x5584BD98 or 'Peter Schuller <scode@scode.webprovider.com>'
E-Mail: scode@scode.ddns.org Web: http://hem.passagen.se/petersch
Help create a free Java based operating system - www.jos.org.



--3ioKt2kN+IccB5F4
Content-Type: application/pgp-signature

-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 5.0i for non-commercial use
MessageID: 39CGP8x81TrhRzhTrj/G91bEG03HQ/OF

iQA/AwUBN4+RLsBfJ1FVhL2YEQLwVACfYICYO4eg/bkr3USuzwAu+6utdd8An2Uf
op2mqcszgb8gt1ydPAxJZ7Pr
=Jo/F
-----END PGP SIGNATURE-----

--3ioKt2kN+IccB5F4--



From RegierAveryJ@JDCORP.deere.com Fri, 16 Jul 1999 16:41:28 -0500
Date: Fri, 16 Jul 1999 16:41:28 -0500
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [JOS-Kernel] JOS and Java processors

My current understanding of this is that to run on top of a Java Processor
you still need a JVM, it is just that the translation step is skipped.  It
will be a little painful, but not tremendously so.  This isn't an issue for
a good while, yet, though, because Java Processessors in the masse market
for PC's is a few years away at the pace Sun is currently going.  They are
being positioned for the embedded market, despite the potential of them on
the desktop.

Regards,
Avery J. Regier



> -----Original Message-----
> From:	scode@scode.webprovider.com [SMTP:scode@scode.webprovider.com]
> Sent:	Friday, July 16, 1999 4:31 PM
> To:	kernel@jos.org
> Subject:	[JOS-Kernel] JOS and Java processors
> 
> I've been thinking about the possibility of running JOS on a Java
> processor.
> Being able to run Java on a Java processor (i.e. achieving the speed of
> native code) is kind of like ultimate goal of Java as far as I'm
> concerned.
> 
> By questions is, to those who know more about this than me (I'm a total
> newbie when it comes to CPUs and kernel/JVM writing), could the kernel
> interface(s) and jvm(s) currently being worked on be used on a Java
> processor without *too* much trouble, or would that require a complete
> reswrite/redesign of the entire system?
> 
> I.e., is the design of the JOS kernel(s)/JVM(s) currently suited for
> execution on Java processors?
> 
> Or maybe I'm the only one who'd like to see Java processors on the
> desktop?!? :)
> 
> -- 
> / Peter Schuller
> 
> PGP userID: 0x5584BD98 or 'Peter Schuller <scode@scode.webprovider.com>'
> E-Mail: scode@scode.ddns.org Web: http://hem.passagen.se/petersch
> Help create a free Java based operating system - www.jos.org.
> 
> 



From tmiller@haverford.edu Sat, 17 Jul 1999 01:22:52 -0400 (EDT)
Date: Sat, 17 Jul 1999 01:22:52 -0400 (EDT)
From: Miller Todd L tmiller@haverford.edu
Subject: [JOS-Kernel] JOS and Java processors

> I've been thinking about the possibility of running JOS on a Java processor.
> Being able to run Java on a Java processor (i.e. achieving the speed of
> native code) is kind of like ultimate goal of Java as far as I'm concerned.

	As a matter of fact, as slow as the current picoJava cores are,
and as fast as the say, K7, is, you'd be better off running a good JVM
(jikes, hotspot).  You'd get better performance running your Java apps on
a fast-enough 'conventional' computer -- though not as good as native code
on the same machine, most machines are so grossly over-powered for the
work they're doing it's rather disgusting.  (The only way I can slow the
box I'm working on down enough (running Linux) to want more power is to
run seti@home in the background (nice -10), which chews 98.6% of the
processor :))  While it's no excuse for poor coding, the muscle available
to us (and more so when jos release 1.0 is ready :)) limits my worry about
the speed of things...

> I.e., is the design of the JOS kernel(s)/JVM(s) currently suited for
> execution on Java processors?

	Well, the kernel, small as it is, shouldn't be too hard to port,
thought it's not my area of expertise.  However, I don't have the
slightest idea of what kind of work the hardware does for handling
bytecodes... if things like constant pool resolution generate hardware
traps, it's more ofa kernel job than a JVM one... while some of the same
code might be useable, the port would be so far off the beaten path that
it couldn't be maintained with the rest of them, I would think.

	However, I have more than enough work waiting for me to finish in
decaf for the i386 to squash anything more than idlest speculation.

-_Quinn




From vbman@pcpros.net Sat, 17 Jul 1999 02:03:29 -0500
Date: Sat, 17 Jul 1999 02:03:29 -0500
From: Cliff Baeseman vbman@pcpros.net
Subject: [JOS-Kernel] Construction of a new Java Operating System

Yes it is a open source project...

Cliff
-----Original Message-----
From: jl25@pix.co.za <jl25@pix.co.za>
To: kernel@jos.org <kernel@jos.org>
Date: Thursday, July 15, 1999 3:20 PM
Subject: Re: [JOS-Kernel] Construction of a new Java Operating System


>>    I have no idea why on earth you would even consider creating a whole 
>new
>>kernel to power your operating system.  I am personally involved in 
>building
>>something similar to JOS but I am using a hacked version of the linux 
>kernel to do it.  
>
>And is it commercial, free? What is it?
>
>John
>
>
>
>_______________________________________________
>Kernel maillist  -  Kernel@jos.org
>http://jos.org/mailman/listinfo/kernel
>
>




From ryan@whitewolf.com.au Mon, 19 Jul 1999 10:27:48 +1000
Date: Mon, 19 Jul 1999 10:27:48 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] Construction of a new Java Operating System

Cliff Baeseman wrote:

> I am personally involved in building
> something similar to JOS but I am using a hacked version of the linux kernel
> to do it.  I almost have the system running now and am testing some desktop
> stuff on it.  The speed is exceptional and above that of sun's own javaos.
> I intend to fully hide anything that even resembles unix to include the file
> system.

Cool. How are you handling the graphics side? What sort of changes have
you made to the kernel? etc.?

JOS consists of a small amount of native code at the core and a large
chunk of Java code providing most operating system facilities. These
Java libraries could run on top of different kernels, and in fact, the
JOS project has at least two kernels in development. Your kernel is yet
another kernel that could support the JOS libraries. You are free to use
them.

What appeals to me about your kernel is that it is licensed under the
GPL. There are some people lurking around the mailing lists who have not
contributed yet because they only feel comfortable contributing to free
software. If you worked with the JOS project, those people could finally
get their hands on something, which is also good for you.

I am puzzled that nobody has replied to your email yet. Where are all
you free software people!

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From vbman@pcpros.net Sun, 18 Jul 1999 21:10:08 -0500
Date: Sun, 18 Jul 1999 21:10:08 -0500
From: Cliff Baeseman vbman@pcpros.net
Subject: [JOS-Kernel] Construction of a new Java Operating System

-----Original Message-----
From: Ryan Heise <ryan@whitewolf.com.au>
To: kernel@jos.org <kernel@jos.org>
Date: Sunday, July 18, 1999 6:37 PM
Subject: Re: [JOS-Kernel] Construction of a new Java Operating System


>Cliff Baeseman wrote:
>
>> I am personally involved in building
>> something similar to JOS but I am using a hacked version of the linux
kernel
>> to do it.  I almost have the system running now and am testing some
desktop
>> stuff on it.  The speed is exceptional and above that of sun's own
javaos.
>> I intend to fully hide anything that even resembles unix to include the
file
>> system.
>
>Cool. How are you handling the graphics side? What sort of changes have
>you made to the kernel? etc.?



Grapics is implemented by a bare minimum X implementation running all native
code.


>
>JOS consists of a small amount of native code at the core and a large
>chunk of Java code providing most operating system facilities. These
>Java libraries could run on top of different kernels, and in fact, the
>JOS project has at least two kernels in development. Your kernel is yet
>another kernel that could support the JOS libraries. You are free to use
>them.


It would be nice to do this but my kernel is all native linux. I run the
linux drivers none of my own.
There is little benifit to running java drivers it just kills performance.


>
>What appeals to me about your kernel is that it is licensed under the
>GPL. There are some people lurking around the mailing lists who have not
>contributed yet because they only feel comfortable contributing to free
>software. If you worked with the JOS project, those people could finally
>get their hands on something, which is also good for you.


hmm. It seems most of the JOS project developers are not interested in my
implementation. The JOS team lacks the one thing it needs to be successful.
"Development Velocity!"

They have been at it for almost two years and have nothing running, this
will not attract developers. Open Source developers like progress. I am
working another project now and we have 80 very active developers. We
attracted this mainy due to the speed of our progress and willingness to
communicate with team members.

>
>I am puzzled that nobody has replied to your email yet. Where are all
>you free software people!
>


Not sure not to many people are interested I guess. I will gear up the
project in the very near future if
there is enough interest. Unfortunately I will do it seperate from the JOS
project. It lacks all of the things necessary for success. "Developers"

Sorry for my JOS negativity but I cannot see it succeeding. They wish to
talk more about politics then the code. The first person to implement a Java
OS will be the one who holds the pie no matter what it's powered by. In my
application you are never even going to know Linux is running underneath
except for the blazing speed.


Cliff Baeseman


>--
>Ryan Heise
>
>http://www.progsoc.uts.edu.au/~rheise/
>
>_______________________________________________
>Kernel maillist  -  Kernel@jos.org
>http://jos.org/mailman/listinfo/kernel
>
>




From hilarycheng@usa.net Mon, 19 Jul 1999 10:37:14 +0800
Date: Mon, 19 Jul 1999 10:37:14 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] Construction of a new Java Operating System

Hi,


>>
>>JOS consists of a small amount of native code at the core and a large
>>chunk of Java code providing most operating system facilities. These
>>Java libraries could run on top of different kernels, and in fact, the
>>JOS project has at least two kernels in development. Your kernel is yet
>>another kernel that could support the JOS libraries. You are free to use
>>them.
>
>
>It would be nice to do this but my kernel is all native linux. I run the
>linux drivers none of my own.
>There is little benifit to running java drivers it just kills performance.
>

I think a number of JOS Members wish to have a Java Drivers rather than
Linux Drivers. They wish to have a "completely" Object Oriented System
from scratch.

One things, I don't think using Java to write drivers. It would kill
performance.
Since most of bottleneck are not CPU-Bound. It is I/O-Bound. Using Java
would not decrease the performance SO GREAT as u run Java in other platform.

>>
>>What appeals to me about your kernel is that it is licensed under the
>>GPL. There are some people lurking around the mailing lists who have not
>>contributed yet because they only feel comfortable contributing to free
>>software. If you worked with the JOS project, those people could finally
>>get their hands on something, which is also good for you.
>
>
>hmm. It seems most of the JOS project developers are not interested in my
>implementation. The JOS team lacks the one thing it needs to be successful.
>"Development Velocity!"

hm, a Java-Type Operating System Solution is not easy to do. If developers
develope
JOS based on other OS, it would be much much faster. But they prefer to
build
on their own.
    Two Years is a SHORT Period to a OS. Linux has been spend near/more
than ten years. I think the status of JOS is fine.

>They have been at it for almost two years and have nothing running, this
>will not attract developers. Open Source developers like progress. I am
>working another project now and we have 80 very active developers. We
>attracted this mainy due to the speed of our progress and willingness to
>communicate with team members.

Any Web Page Links? I would like to have a look at it. :D

>>
>>I am puzzled that nobody has replied to your email yet. Where are all
>>you free software people!
>>
>
>
>Not sure not to many people are interested I guess. I will gear up the
>project in the very near future if
>there is enough interest. Unfortunately I will do it seperate from the JOS
>project. It lacks all of the things necessary for success. "Developers"
>
>Sorry for my JOS negativity but I cannot see it succeeding. They wish to
>talk more about politics then the code. The first person to implement a
Java
>OS will be the one who holds the pie no matter what it's powered by. In my
>application you are never even going to know Linux is running underneath
>except for the blazing speed.
>

The main fact is that , JOS hasn't got a fullly implementation JVM. If it
has been
done, the progress of JOS is much much faster. As I know, three JVM/Kernel
of
JOS, only implement basic instruction. Graphics and Thread hasn't fully
implementated.

Regards,

Hilary




From vbman@pcpros.net Sun, 18 Jul 1999 22:19:26 -0500
Date: Sun, 18 Jul 1999 22:19:26 -0500
From: Cliff Baeseman vbman@pcpros.net
Subject: [JOS-Kernel] Construction of a new Java Operating System

-----Original Message-----
From: Hilary Cheng <hilarycheng@usa.net>
To: kernel@jos.org <kernel@jos.org>
Date: Sunday, July 18, 1999 9:52 PM
Subject: Re: [JOS-Kernel] Construction of a new Java Operating System


>Hi,
>
>
>>>
>>>JOS consists of a small amount of native code at the core and a large
>>>chunk of Java code providing most operating system facilities. These
>>>Java libraries could run on top of different kernels, and in fact, the
>>>JOS project has at least two kernels in development. Your kernel is yet
>>>another kernel that could support the JOS libraries. You are free to use
>>>them.
>>
>>
>>It would be nice to do this but my kernel is all native linux. I run the
>>linux drivers none of my own.
>>There is little benifit to running java drivers it just kills performance.
>>
>
>I think a number of JOS Members wish to have a Java Drivers rather than
>Linux Drivers. They wish to have a "completely" Object Oriented System
>from scratch.


That would be nice but it is hardley practical. The operating system would
end up being as slow as suns javapc.



>
>One things, I don't think using Java to write drivers. It would kill
>performance.
>Since most of bottleneck are not CPU-Bound. It is I/O-Bound. Using Java
>would not decrease the performance SO GREAT as u run Java in other
platform.
>
>>>
>>>What appeals to me about your kernel is that it is licensed under the
>>>GPL. There are some people lurking around the mailing lists who have not
>>>contributed yet because they only feel comfortable contributing to free
>>>software. If you worked with the JOS project, those people could finally
>>>get their hands on something, which is also good for you.
>>
>>
>>hmm. It seems most of the JOS project developers are not interested in my
>>implementation. The JOS team lacks the one thing it needs to be
successful.
>>"Development Velocity!"
>
>hm, a Java-Type Operating System Solution is not easy to do. If developers
>develope
>JOS based on other OS, it would be much much faster. But they prefer to
>build
>on their own.
>    Two Years is a SHORT Period to a OS. Linux has been spend near/more
>than ten years. I think the status of JOS is fine.


Yes it is a short time but still I can build a kernel from scratch in as
little as a month that can actually do something.

         I know I have done it. JOS is way behind the ball in development.

      I would like to have native drivers also and a very small kernel but I
am not willing to develop it by myself. First of all I hate the installation
difficulties of linux and I will not distribute anything to anyone until it
can be installed by a single command. I also hate the darn linux file system
it sucks also.


>
>>They have been at it for almost two years and have nothing running, this
>>will not attract developers. Open Source developers like progress. I am
>>working another project now and we have 80 very active developers. We
>>attracted this mainy due to the speed of our progress and willingness to
>>communicate with team members.
>
>Any Web Page Links? I would like to have a look at it. :D


Its a RAD IDE pascal project called Lazarus

www.pcpros.net/~vbman

>
>>>
>>>I am puzzled that nobody has replied to your email yet. Where are all
>>>you free software people!
>>>
>>
>>
>>Not sure not to many people are interested I guess. I will gear up the
>>project in the very near future if
>>there is enough interest. Unfortunately I will do it seperate from the JOS
>>project. It lacks all of the things necessary for success. "Developers"
>>
>>Sorry for my JOS negativity but I cannot see it succeeding. They wish to
>>talk more about politics then the code. The first person to implement a
>Java
>>OS will be the one who holds the pie no matter what it's powered by. In my
>>application you are never even going to know Linux is running underneath
>>except for the blazing speed.
>>
>


JOS is also based on a single instance JVM design. This is a very poor
design in my opinion. One exception and the whole os is going to go down.

In order to be excepted its got to be as fast as any other os and as robust
as linux we sure do not want another winblows...


>The main fact is that , JOS hasn't got a fullly implementation JVM. If it
>has been
>done, the progress of JOS is much much faster. As I know, three JVM/Kernel
>of
>JOS, only implement basic instruction. Graphics and Thread hasn't fully
>implementated.
>
>Regards,
>
>Hilary
>
>
>_______________________________________________
>Kernel maillist  -  Kernel@jos.org
>http://jos.org/mailman/listinfo/kernel
>
>




From CEHardin@mbay.net Sun, 18 Jul 1999 20:52:38 -0600
Date: Sun, 18 Jul 1999 20:52:38 -0600
From: Chad CEHardin@mbay.net
Subject: [JOS-Kernel] Construction of a new Java Operating System

I know this may seem strange but...
  Beside being into CS I'm in the military becoming a Chinese linguist.  If you
speak any dialect of Chinese I think it would be interesting if we could have
some computer related chats in Chinese.

  I know this may be a long shot, but what the heck?

Chad



> Hi,
>
> >>
> >>JOS consists of a small amount of native code at the core and a large
> >>chunk of Java code providing most operating system facilities. These
> >>Java libraries could run on top of different kernels, and in fact, the
> >>JOS project has at least two kernels in development. Your kernel is yet
> >>another kernel that could support the JOS libraries. You are free to use
> >>them.
> >
> >
> >It would be nice to do this but my kernel is all native linux. I run the
> >linux drivers none of my own.
> >There is little benifit to running java drivers it just kills performance.
> >
>
> I think a number of JOS Members wish to have a Java Drivers rather than
> Linux Drivers. They wish to have a "completely" Object Oriented System
> from scratch.
>
> One things, I don't think using Java to write drivers. It would kill
> performance.
> Since most of bottleneck are not CPU-Bound. It is I/O-Bound. Using Java
> would not decrease the performance SO GREAT as u run Java in other platform.
>
> >>
> >>What appeals to me about your kernel is that it is licensed under the
> >>GPL. There are some people lurking around the mailing lists who have not
> >>contributed yet because they only feel comfortable contributing to free
> >>software. If you worked with the JOS project, those people could finally
> >>get their hands on something, which is also good for you.
> >
> >
> >hmm. It seems most of the JOS project developers are not interested in my
> >implementation. The JOS team lacks the one thing it needs to be successful.
> >"Development Velocity!"
>
> hm, a Java-Type Operating System Solution is not easy to do. If developers
> develope
> JOS based on other OS, it would be much much faster. But they prefer to
> build
> on their own.
>     Two Years is a SHORT Period to a OS. Linux has been spend near/more
> than ten years. I think the status of JOS is fine.
>
> >They have been at it for almost two years and have nothing running, this
> >will not attract developers. Open Source developers like progress. I am
> >working another project now and we have 80 very active developers. We
> >attracted this mainy due to the speed of our progress and willingness to
> >communicate with team members.
>
> Any Web Page Links? I would like to have a look at it. :D
>
> >>
> >>I am puzzled that nobody has replied to your email yet. Where are all
> >>you free software people!
> >>
> >
> >
> >Not sure not to many people are interested I guess. I will gear up the
> >project in the very near future if
> >there is enough interest. Unfortunately I will do it seperate from the JOS
> >project. It lacks all of the things necessary for success. "Developers"
> >
> >Sorry for my JOS negativity but I cannot see it succeeding. They wish to
> >talk more about politics then the code. The first person to implement a
> Java
> >OS will be the one who holds the pie no matter what it's powered by. In my
> >application you are never even going to know Linux is running underneath
> >except for the blazing speed.
> >
>
> The main fact is that , JOS hasn't got a fullly implementation JVM. If it
> has been
> done, the progress of JOS is much much faster. As I know, three JVM/Kernel
> of
> JOS, only implement basic instruction. Graphics and Thread hasn't fully
> implementated.
>
> Regards,
>
> Hilary
>
> _______________________________________________
> Kernel maillist  -  Kernel@jos.org
> http://jos.org/mailman/listinfo/kernel




From ryan@whitewolf.com.au Mon, 19 Jul 1999 14:49:07 +1000
Date: Mon, 19 Jul 1999 14:49:07 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] Construction of a new Java Operating System

Cliff Baeseman wrote:

> >Cool. How are you handling the graphics side? What sort of changes have
> >you made to the kernel? etc.?
> 
> Grapics is implemented by a bare minimum X implementation running all native
> code.

Are you running a native or Java window manager?

> >JOS consists of a small amount of native code at the core and a large
> >chunk of Java code providing most operating system facilities. These
> >Java libraries could run on top of different kernels, and in fact, the
> >JOS project has at least two kernels in development. Your kernel is yet
> >another kernel that could support the JOS libraries. You are free to use
> >them.
> 
> It would be nice to do this but my kernel is all native linux. I run the
> linux drivers none of my own.
> There is little benifit to running java drivers it just kills performance.

Although I would prefer Java drivers, it matters little. An operating
system consists of much more than the kernel and its drivers. You need
to provide libraries for multi-user support, system security, processes,
windowing environment, control panels, etc. Since all of this code will
be used extensively in Java applications, it makes sense for them to be
written in Java. Besides Java is a better language than C. Libraries
written in Java will be more robust, more flexible (components can be
swapped in/out via class loading), and they will run on top of any
architecture that provides an underlying Java interpreter.

> hmm. It seems most of the JOS project developers are not interested in my
> implementation. The JOS team lacks the one thing it needs to be successful.
> "Development Velocity!"
> 
> They have been at it for almost two years and have nothing running, this
> will not attract developers. Open Source developers like progress.

I think a kernel that works "now" would be a good addition to JOS. It
would be great if we could cooperate rather than exclude eachother.
Also, I think you will need some sort of Java library on top of the
kernel that provides operating system facilities. Rather than duplicate
our efforts, you could more easily help us.

BTW, it is false that we have nothing running. The JJOS team have a
kernel that boots and can execute Java bytecodes.

> Not sure not to many people are interested I guess. I will gear up the
> project in the very near future if
> there is enough interest. Unfortunately I will do it seperate from the JOS
> project. It lacks all of the things necessary for success. "Developers"

If you attack and exclude JOS, I think you've just blocked out potential
contributors.

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From ryan@whitewolf.com.au Mon, 19 Jul 1999 14:57:57 +1000
Date: Mon, 19 Jul 1999 14:57:57 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] Construction of a new Java Operating System

Cliff Baeseman wrote:

> JOS is also based on a single instance JVM design. This is a very poor
> design in my opinion.

It allows you to share 15 megs of system classes between applications.
It allows you to have one thread scheduler across all applications. It
allows you to have one garbage collecter and memory manager across all
applications. There are a few other optimizations that are possible.

> One exception and the whole os is going to go down.

One exception and the current thread goes down. Sure, if the JVM
crashes, then the whole operating system effectively goes down, but that
is just like saying if the Linux kernel crashes, the whole operating
system goes down.

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From vbman@pcpros.net Sun, 18 Jul 1999 23:22:57 -0500
Date: Sun, 18 Jul 1999 23:22:57 -0500
From: Cliff Baeseman vbman@pcpros.net
Subject: [JOS-Kernel] Construction of a new Java Operating System

-----Original Message-----
From: Ryan Heise <ryan@whitewolf.com.au>
To: kernel@jos.org <kernel@jos.org>
Date: Sunday, July 18, 1999 11:01 PM
Subject: Re: [JOS-Kernel] Construction of a new Java Operating System


>Cliff Baeseman wrote:
>
>> >Cool. How are you handling the graphics side? What sort of changes have
>> >you made to the kernel? etc.?
>>
>> Grapics is implemented by a bare minimum X implementation running all
native
>> code.
>
>Are you running a native or Java window manager?


Native for now! I plan on changing that...

>
>> >JOS consists of a small amount of native code at the core and a large
>> >chunk of Java code providing most operating system facilities. These
>> >Java libraries could run on top of different kernels, and in fact, the
>> >JOS project has at least two kernels in development. Your kernel is yet
>> >another kernel that could support the JOS libraries. You are free to use
>> >them.
>>
>> It would be nice to do this but my kernel is all native linux. I run the
>> linux drivers none of my own.
>> There is little benifit to running java drivers it just kills
performance.
>
>Although I would prefer Java drivers, it matters little. An operating
>system consists of much more than the kernel and its drivers. You need
>to provide libraries for multi-user support, system security, processes,
>windowing environment, control panels, etc. Since all of this code will
>be used extensively in Java applications, it makes sense for them to be
>written in Java. Besides Java is a better language than C. Libraries
>written in Java will be more robust, more flexible (components can be
>swapped in/out via class loading), and they will run on top of any
>architecture that provides an underlying Java interpreter.
>

I write code every day in ASM C C++ Pascal Java and VB. I never restrict
myself by excluding a languge that can just plain get the job done.


I agree it would be nice if it where all java but if it takes a couple other
languages to get there and it will than so be it.

>> hmm. It seems most of the JOS project developers are not interested in my
>> implementation. The JOS team lacks the one thing it needs to be
successful.
>> "Development Velocity!"
>>
>> They have been at it for almost two years and have nothing running, this
>> will not attract developers. Open Source developers like progress.
>
>I think a kernel that works "now" would be a good addition to JOS. It
>would be great if we could cooperate rather than exclude eachother.
>Also, I think you will need some sort of Java library on top of the
>kernel that provides operating system facilities. Rather than duplicate
>our efforts, you could more easily help us.
>
>BTW, it is false that we have nothing running. The JJOS team have a
>kernel that boots and can execute Java bytecodes.
>


I would have to see the code! I have not been able to see anything on the
site yet.

>> Not sure not to many people are interested I guess. I will gear up the
>> project in the very near future if
>> there is enough interest. Unfortunately I will do it seperate from the
JOS
>> project. It lacks all of the things necessary for success. "Developers"
>

That could be but maybe not. I just drove another Open Source project into
the ground. All it took was a little development speed and I constantly are
in communications with all the developers.

In order for me to jump onto the JOS project I would have to see one hell of
a lot more interest than I can see in it now.

I havn't gotten any mail on this list for days, my other projects list sees
at least 50 to 60 a day "Now that is communicating"

>If you attack and exclude JOS, I think you've just blocked out potential
>contributors.
>
>--
>Ryan Heise
>
>http://www.progsoc.uts.edu.au/~rheise/
>
>_______________________________________________
>Kernel maillist  -  Kernel@jos.org
>http://jos.org/mailman/listinfo/kernel
>
>




From vbman@pcpros.net Sun, 18 Jul 1999 23:28:22 -0500
Date: Sun, 18 Jul 1999 23:28:22 -0500
From: Cliff Baeseman vbman@pcpros.net
Subject: [JOS-Kernel] Construction of a new Java Operating System

Point well taken but how are you going to provide micro-kernel protection?.

Cliff
-----Original Message-----
From: Ryan Heise <ryan@whitewolf.com.au>
To: kernel@jos.org <kernel@jos.org>
Date: Sunday, July 18, 1999 11:09 PM
Subject: Re: [JOS-Kernel] Construction of a new Java Operating System


>Cliff Baeseman wrote:
>
>> JOS is also based on a single instance JVM design. This is a very poor
>> design in my opinion.
>
>It allows you to share 15 megs of system classes between applications.
>It allows you to have one thread scheduler across all applications. It
>allows you to have one garbage collecter and memory manager across all
>applications. There are a few other optimizations that are possible.
>
>> One exception and the whole os is going to go down.
>
>One exception and the current thread goes down. Sure, if the JVM
>crashes, then the whole operating system effectively goes down, but that
>is just like saying if the Linux kernel crashes, the whole operating
>system goes down.
>
>-- 
>Ryan Heise
>
>http://www.progsoc.uts.edu.au/~rheise/
>
>_______________________________________________
>Kernel maillist  -  Kernel@jos.org
>http://jos.org/mailman/listinfo/kernel
>
>




From ryan@whitewolf.com.au Mon, 19 Jul 1999 16:02:09 +1000
Date: Mon, 19 Jul 1999 16:02:09 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] Construction of a new Java Operating System

Cliff Baeseman wrote:

> >BTW, it is false that we have nothing running. The JJOS team have a
> >kernel that boots and can execute Java bytecodes.
> 
> I would have to see the code! I have not been able to see anything on the
> site yet.

CVSROOT=:pserver:anonymous@jos.org:/sites/jos/cvs/cvsroot

module: JJOS

(see http://jos.org/wiki/view/Main/?topic=CVS for instructions)

Source code can also be browsed online:

	http://www.jos.org/cvsweb.cgi/JJOS/

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From hilarycheng@usa.net Mon, 19 Jul 1999 14:02:15 +0800
Date: Mon, 19 Jul 1999 14:02:15 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] Construction of a new Java Operating System

Hi,

>>
>>I think a number of JOS Members wish to have a Java Drivers rather than
>>Linux Drivers. They wish to have a "completely" Object Oriented System
>>from scratch.
>
>
>That would be nice but it is hardley practical. The operating system would
>end up being as slow as suns javapc.
>

Well, I donno what the case that u mean "SLOW" ? Most of people said, One
OS is slow that means the Graphic handling is very slow.
For JavaPC, I can say, they havn't utitilize the device that a PC have. They
just
use 386 IO/CPU mode as the basic platform. That will be slow. Also, Sun
Micro
are very good at Packaging , Management, Product Service. But They are not
not so good at making product as fast as they could. As IBM wrote JDK1.1.7,
IBM provide a increditable JVM so that it run Swing as smooth as I use
Native
Win32 Applications.

IMO, I hope JOS can be a truely OO System rather than a another UNIX Clone.


>
>Yes it is a short time but still I can build a kernel from scratch in as
>little as a month that can actually do something.
>
>         I know I have done it. JOS is way behind the ball in development.
>

That's would be GREAT :D.
But, IMO, I think not so much people are active in JOS Development.
It would be better to find more active peoples to paticiple into it.

>      I would like to have native drivers also and a very small kernel but
I
>am not willing to develop it by myself. First of all I hate the
installation
>difficulties of linux and I will not distribute anything to anyone until it
>can be installed by a single command. I also hate the darn linux file
system
>it sucks also.
>

Well, In my point of view, Linux can provide MANY DRIVERS to JOS as well.
Both of them are GPL. I think no one will mind us if we using their drivers.

For native drivers, well, If the drivers really Performance critieal, it
would be better
to have a native one. I think no one will like a Slow Drivers. Right ? :p
But if the
case is not too bad. A Java Implementation would be better. Since this OS is
a OS of Java. :ppp

>
>Its a RAD IDE pascal project called Lazarus
>
>www.pcpros.net/~vbman
>
>>

thanks for ur links. :D

>
>JOS is also based on a single instance JVM design. This is a very poor
>design in my opinion. One exception and the whole os is going to go down.
>

hm, yes, single instance can't archieve a higher performance/fiexible
machine.
Let says, I prefer to wait for a "Complete" JVM out from JOS. and then
discuss
how to implements mulitple one. That's would be better approach.

>In order to be excepted its got to be as fast as any other os and as robust
>as linux we sure do not want another winblows...
>

haaaaa........:D, a OS is not only fast that would be ok. I prefer a STABLE,
User Friendly, Fully Customization and Acceptable Performance are enough to
me.
I am sure that no one want another FAST and Unstable Winblows appears again.
:p

I hate lots of crashing of my PC.........................-_-!!!!!!!!!!!!!!!

Regards,

Hilary




From jm@mak.com Mon, 19 Jul 1999 07:14:23 -0400
Date: Mon, 19 Jul 1999 07:14:23 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Checkins to support 8/16/32-bit reads and writes from Java

Hi All;

Hopefully, one can now both read and write 8, 16, and 32-bit quantities from
Java using read8, write8, and their sibling routines in class
jos.system.machine.  Using these methods, I managed to write blinking-attribute
text to the VGA framebuffer from init.java.

Files touched include: interp.cc (where the built-ins get defined) and
machine.java (which declares the routines from the Java side).  I also made a
cosmetic change to class_loader.h/cc (making a member var "protected") which
necessitated a change to d_main.cc.

As I said before on this list, we should probably start using the much more
comprehensive IBM "JavaOS for Business" APIs, which solve this particular
problem in a much prettier, more systematic, and much more labor-intensive way
(for me, anyways).

As usual, if there are any problems with the sources as I have just committed
them to CVS, please be so kind as to let me know.

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From jewel@pixie.co.za Mon, 19 Jul 1999 22:38:34 +0200 (SAST)
Date: Mon, 19 Jul 1999 22:38:34 +0200 (SAST)
From: John Leuner jewel@pixie.co.za
Subject: [JOS-Kernel] JJOS source

I may be blind, but where is the JJOS source code? I've retrieved what's
on the CVS server, but it seems to be missing stuff referred to as being
in some other package.

Is this available somewhere?

Thanks
John








From tmiller@haverford.edu Mon, 19 Jul 1999 19:16:49 -0400 (EDT)
Date: Mon, 19 Jul 1999 19:16:49 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Re: JJOS source

> I may be blind, but where is the JJOS source code? I've retrieved what's
> on the CVS server, but it seems to be missing stuff referred to as being
> in some other package.

	If it's in the tools directory, then the missing package is
Etherboot (including netboot), and, if you don't have it, NASM, but
neither of them are source packages.  I don't recall if mknbi-jos is still
up in the CVS anywhere; if it isn't, let me know, and I'll put a .tgz
of it up on the jos server.  (mknbi-jos is an adaptation of mknbi-linux,
provided with the netboot package, to MaKe a Net-Bootable Image for JOS.)

	Furthermore, the makefiles included are an odd and uneasy
compromise between what I'm using and what JM's using, so check file
locations in the Makefiles.  If you've got a specific list of what's
missing, send it over and I'll figure it out.

	As you've probably guessed, the CVS tree is a development, and a
not a distribution tool; any suggestions you've got on a way to make the
distribution step easier for new programmers would be greatly appreciated.

-_Quinn




From ebloodwo@cts.com Tue, 20 Jul 1999 03:51:11 +0000
Date: Tue, 20 Jul 1999 03:51:11 +0000
From: Eric Bloodworth ebloodwo@cts.com
Subject: [JOS-Kernel] Construction of a new Java Operating System

Ryan Heise wrote:
> 
> Cliff Baeseman wrote:
> 
> > JOS is also based on a single instance JVM design. This is a very poor
> > design in my opinion.
> 
> It allows you to share 15 megs of system classes between applications.
> It allows you to have one thread scheduler across all applications. It
> allows you to have one garbage collecter and memory manager across all
> applications. There are a few other optimizations that are possible.
> 

It might be possible to cache byte codes, native modules, JIT'd and
HotSpotted code across multiple
JVM instances in shared memory.  This could help with the first issue, 
if there are no technical show stoppers.  

The second isn't an issue if native threads are used, right? 

A monolithic gc may be  simpler, but makes the system somewhat hard to 
enforce policies on resources.  How do you keep a process/application
from hogging 
all of the available memory, for example?  


The linux *kernel* is a nice little beastie, it would make a nice
foundation, 
I think, as long as you avoid most of the linux *OS* stuff - text config
files
(well, might be hard to get rid of them all), X windows, 
termio, installation, etc, and mainly just keep the device drivers and a
few other
oddments.    
 Then it could get fun...


-- Eric



From vbman@pcpros.net Mon, 19 Jul 1999 23:34:59 -0500
Date: Mon, 19 Jul 1999 23:34:59 -0500
From: Cliff Baeseman vbman@pcpros.net
Subject: [JOS-Kernel] Construction of a new Java Operating System

Getting rid of that stuff is alot easier than one might think.

Take a look at the muLinux distro. This includes X and linux on three
floppies. The problem is that it is based on a old kernel version.

The thing to do is strip a linux distro down to nothing but the base with
script and xsupport and a light window manager. This is not very hard also
but the problem I am having and JOS may have in the long run is the
installation issues. I do not wish for a user to have to endure the linux
type installation process which is just plain a pain in the ass. The best
way I have figured to do it and am testing now is a loopback file system
that can just be installed and launched from freedos. It makes for a very
painless installation and launch.

If I can get a retard proof installation I am in business. The user will
never even know linux is running under the hood...

Cliff

-----Original Message-----
From: Eric Bloodworth <ebloodwo@cts.com>
To: kernel@jos.org <kernel@jos.org>
Date: Monday, July 19, 1999 11:20 PM
Subject: Re: [JOS-Kernel] Construction of a new Java Operating System


>Ryan Heise wrote:
>>
>> Cliff Baeseman wrote:
>>
>> > JOS is also based on a single instance JVM design. This is a very poor
>> > design in my opinion.
>>
>> It allows you to share 15 megs of system classes between applications.
>> It allows you to have one thread scheduler across all applications. It
>> allows you to have one garbage collecter and memory manager across all
>> applications. There are a few other optimizations that are possible.
>>
>
>It might be possible to cache byte codes, native modules, JIT'd and
>HotSpotted code across multiple
>JVM instances in shared memory.  This could help with the first issue,
>if there are no technical show stoppers.
>
>The second isn't an issue if native threads are used, right?
>
>A monolithic gc may be  simpler, but makes the system somewhat hard to
>enforce policies on resources.  How do you keep a process/application
>from hogging
>all of the available memory, for example?
>
>
>The linux *kernel* is a nice little beastie, it would make a nice
>foundation,
>I think, as long as you avoid most of the linux *OS* stuff - text config
>files
>(well, might be hard to get rid of them all), X windows,
>termio, installation, etc, and mainly just keep the device drivers and a
>few other
>oddments.
> Then it could get fun...
>
>
>-- Eric
>
>_______________________________________________
>Kernel maillist  -  Kernel@jos.org
>http://jos.org/mailman/listinfo/kernel
>
>




From golubovsky@altavista.net Mon, 19 Jul 99 14:37:18 +0400
Date: Mon, 19 Jul 99 14:37:18 +0400
From: golubovsky@altavista.net golubovsky@altavista.net
Subject: [JOS-Kernel] Construction of a new Java Operating System

From: golubovsky@altavista.net


On Mon, 19 Jul 1999, Ryan Heise wrote:

>Cliff Baeseman wrote:
>
>> JOS is also based on a single instance JVM design. This is a very poor
>> design in my opinion.
>
>It allows you to share 15 megs of system classes between applications.
>It allows you to have one thread scheduler across all applications. It
>allows you to have one garbage collecter and memory manager across all
>applications. There are a few other optimizations that are possible.

What about possibility of multiuser usage of such an OS (from the security
point of view?) Or is this JOS project positioned only for client platform?


Dmitry M. Golubovsky
      St-Petersburg, Russia






From tmiller@haverford.edu Mon, 19 Jul 1999 19:16:49 -0400 (EDT)
Date: Mon, 19 Jul 1999 19:16:49 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Re: JJOS source

> I may be blind, but where is the JJOS source code? I've retrieved what's
> on the CVS server, but it seems to be missing stuff referred to as being
> in some other package.

	If it's in the tools directory, then the missing package is
Etherboot (including netboot), and, if you don't have it, NASM, but
neither of them are source packages.  I don't recall if mknbi-jos is still
up in the CVS anywhere; if it isn't, let me know, and I'll put a .tgz
of it up on the jos server.  (mknbi-jos is an adaptation of mknbi-linux,
provided with the netboot package, to MaKe a Net-Bootable Image for JOS.)

	Furthermore, the makefiles included are an odd and uneasy
compromise between what I'm using and what JM's using, so check file
locations in the Makefiles.  If you've got a specific list of what's
missing, send it over and I'll figure it out.

	As you've probably guessed, the CVS tree is a development, and a
not a distribution tool; any suggestions you've got on a way to make the
distribution step easier for new programmers would be greatly appreciated.

-_Quinn




From RegierAveryJ@JDCORP.deere.com Tue, 20 Jul 1999 15:50:43 -0500
Date: Tue, 20 Jul 1999 15:50:43 -0500
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [JOS-Kernel] Construction of a new Java Operating System

> -----Original Message-----
> From:	golubovsky@altavista.net [SMTP:golubovsky@altavista.net]
> Sent:	Monday, July 19, 1999 6:37 AM
> To:	kernel@jos.org
> Subject:	Re: [JOS-Kernel] Construction of a new Java Operating System
> 
> From: golubovsky@altavista.net
> 
> 
> On Mon, 19 Jul 1999, Ryan Heise wrote:
> 
> >Cliff Baeseman wrote:
> >
> >> JOS is also based on a single instance JVM design. This is a very poor
> >> design in my opinion.
> 
JJOS is *currently* based on a single instance design.  In time, though, it
will come to support Multiple Java Processes while still having the
advantages noted below:

> >
> >It allows you to share 15 megs of system classes between applications.
> >It allows you to have one thread scheduler across all applications. It
> >allows you to have one garbage collecter and memory manager across all
> >applications. There are a few other optimizations that are possible.
> 
> What about possibility of multiuser usage of such an OS (from the security
> point of view?) Or is this JOS project positioned only for client
> platform?
> 
> 
> Dmitry M. Golubovsky
>       St-Petersburg, Russia
> 
> 
The design we want to get to eventually will allow us to enforce security
and memory limits on Java Processes while still only loading and compiling
class bytecodes once.

Here are some good pages to read and follow the links of on the Wiki:
http://jos.org/wiki/view/Main/WhyMultiProcessJVM
http://jos.org/wiki/view/Main/JOSCoreProjectUpdate
http://jos.org/wiki/view/Main/MultiUserGroup

-- Avery J. Regier



From ryan@whitewolf.com.au Wed, 21 Jul 1999 10:19:34 +1000
Date: Wed, 21 Jul 1999 10:19:34 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] Construction of a new Java Operating System

golubovsky@altavista.net wrote:
> 
> From: golubovsky@altavista.net
> 
> On Mon, 19 Jul 1999, Ryan Heise wrote:
> 
> >Cliff Baeseman wrote:
> >
> >> JOS is also based on a single instance JVM design. This is a very poor
> >> design in my opinion.
> >
> >It allows you to share 15 megs of system classes between applications.
> >It allows you to have one thread scheduler across all applications. It
> >allows you to have one garbage collecter and memory manager across all
> >applications. There are a few other optimizations that are possible.
> 
> What about possibility of multiuser usage of such an OS (from the security
> point of view?) Or is this JOS project positioned only for client platform?

Although JJOS has a single JVM instance, each Java process runs in its
own namespace. A process cannot obtain a reference to an object or class
of another process unless that interaction is explicitly allowed. I
believe _Quinn is making changes to the JVM to safely protect processes
from one another.

The main problem is that this protection only affects Java code. Native
code can still access memory anywhere unless we implement memory
protection. If we do, JOS may start to look more like a multi-instance
JVM design or a single/multi hybrid. I would prefer that everything be
written in Java except for trusted code that must be native.

Another problem is that a flaw in JDK 1.1 allows validated code to
confuse and crash the host JVM. In a single instance JVM design, that
effectively means crashing the whole operating system. If we can
implement the solution found in JDK 1.2 this is no longer a problem.

So, the only real risk in a single instance JVM design is native code.
And native code is something I'm happy to live without. After all, it is
why I joined this project.

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From vbman@pcpros.net Tue, 20 Jul 1999 18:50:40 -0500
Date: Tue, 20 Jul 1999 18:50:40 -0500
From: Cliff Baeseman vbman@pcpros.net
Subject: [JOS-Kernel] Construction of a new Java Operating System

Ok here is the deal how do you plan on sharing the classes between multiple
application instances as shared without reloading the classes. You still
have to create the classes in memory to allow proper instancing. The classes
have to run in your application instance in any case. This goes for jit our
jvm makes no difference. You could share the classes right now if you wished
to but how do you keep the data state within those classes?

That is the real question, the answer is that you cannot!

You have to pool the JVM it is the only way to provide speed and efficency
and application process seperation.

Cliff

-----Original Message-----
From: Regier Avery J <RegierAveryJ@JDCORP.deere.com>
To: 'kernel@jos.org' <kernel@jos.org>
Date: Tuesday, July 20, 1999 4:07 PM
Subject: RE: [JOS-Kernel] Construction of a new Java Operating System


>> -----Original Message-----
>> From: golubovsky@altavista.net [SMTP:golubovsky@altavista.net]
>> Sent: Monday, July 19, 1999 6:37 AM
>> To: kernel@jos.org
>> Subject: Re: [JOS-Kernel] Construction of a new Java Operating System
>>
>> From: golubovsky@altavista.net
>>
>>
>> On Mon, 19 Jul 1999, Ryan Heise wrote:
>>
>> >Cliff Baeseman wrote:
>> >
>> >> JOS is also based on a single instance JVM design. This is a very poor
>> >> design in my opinion.
>>
>JJOS is *currently* based on a single instance design.  In time, though, it
>will come to support Multiple Java Processes while still having the
>advantages noted below:
>
>> >
>> >It allows you to share 15 megs of system classes between applications.
>> >It allows you to have one thread scheduler across all applications. It
>> >allows you to have one garbage collecter and memory manager across all
>> >applications. There are a few other optimizations that are possible.
>>
>> What about possibility of multiuser usage of such an OS (from the
security
>> point of view?) Or is this JOS project positioned only for client
>> platform?
>>
>>
>> Dmitry M. Golubovsky
>>       St-Petersburg, Russia
>>
>>
>The design we want to get to eventually will allow us to enforce security
>and memory limits on Java Processes while still only loading and compiling
>class bytecodes once.
>
>Here are some good pages to read and follow the links of on the Wiki:
>http://jos.org/wiki/view/Main/WhyMultiProcessJVM
>http://jos.org/wiki/view/Main/JOSCoreProjectUpdate
>http://jos.org/wiki/view/Main/MultiUserGroup
>
>-- Avery J. Regier
>
>_______________________________________________
>Kernel maillist  -  Kernel@jos.org
>http://jos.org/mailman/listinfo/kernel
>
>




From ryan@whitewolf.com.au Wed, 21 Jul 1999 12:36:41 +1000
Date: Wed, 21 Jul 1999 12:36:41 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] Construction of a new Java Operating System

Cliff Baeseman wrote:
> 
> Ok here is the deal how do you plan on sharing the classes between multiple
> application instances as shared without reloading the classes. You still
> have to create the classes in memory to allow proper instancing. The classes
> have to run in your application instance in any case. This goes for jit our
> jvm makes no difference. You could share the classes right now if you wished
> to but how do you keep the data state within those classes?
> 
> That is the real question, the answer is that you cannot!

We can. The JVM can keep static class data separate from the class
definition itself, thus allowing the classes to be shared and static
data to be kept separate per process.

I think the first of the documents referred to by Avery also answers the
question.

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From hilarycheng@usa.net Wed, 21 Jul 1999 16:34:46 +0800
Date: Wed, 21 Jul 1999 16:34:46 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] About Graphics Device

This is a multi-part message in MIME format.

------=_NextPart_000_002A_01BED396.F1A91DE0
Content-Type: text/plain;
	charset="big5"
Content-Transfer-Encoding: quoted-printable

Hi,

From the UI emails, Somone has mentioned "Shark" from gjt. I have
read it. It is Great. This will help JOS a lots. We can save time on
developing
Graphics Drivers for JOS. Anyone has interest in it ?

http://www.gjt.org/servlets/JCVSlet/list/gjt/top.org.gjt.shark

>
>There is another Swing based window manager out there called Shark
>(available on http://www.gjt.org/). The author has also written his own
>native Graphics class to draw directly to the screen rather than =
reusing
>java.awt.Window.
>

Regards,

Hilary


------=_NextPart_000_002A_01BED396.F1A91DE0
Content-Type: text/html;
	charset="big5"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META content=3Dtext/html;charset=3Dbig5 http-equiv=3DContent-Type>
<META content=3D"MSHTML 5.00.2014.210" name=3DGENERATOR>
<STYLE></STYLE>
</HEAD>
<BODY bgColor=3D#c8e0d8>
<DIV><FONT face=3DArial size=3D2>Hi,<BR><BR>From the UI emails, Somone =
has mentioned=20
"Shark" from gjt. I have<BR>read it. It is Great. This will help JOS a =
lots. We=20
can save time on<BR>developing<BR>Graphics Drivers for JOS. Anyone has =
interest=20
in it ?<BR><BR><A=20
href=3D"http://www.gjt.org/servlets/JCVSlet/list/gjt/top.org.gjt.shark">h=
ttp://www.gjt.org/servlets/JCVSlet/list/gjt/top.org.gjt.shark</A><BR><BR>=
&gt;<BR>&gt;There=20
is another Swing based window manager out there called =
Shark<BR>&gt;(available=20
on <A href=3D"http://www.gjt.org/)">http://www.gjt.org/)</A>. The author =
has also=20
written his own<BR>&gt;native Graphics class to draw directly to the =
screen=20
rather than=20
reusing<BR>&gt;java.awt.Window.<BR>&gt;<BR><BR>Regards,<BR><BR>Hilary<BR>=
</FONT></DIV></BODY></HTML>

------=_NextPart_000_002A_01BED396.F1A91DE0--




From RegierAveryJ@JDCORP.deere.com Wed, 21 Jul 1999 07:48:28 -0500
Date: Wed, 21 Jul 1999 07:48:28 -0500
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [JOS-Kernel] Construction of a new Java Operating System

Ryan is absolutely correct.  On my way to JavaOne this year, I sat down on
the plane and did a careful reading of the Java Virtrual Machine
Specification, 2nd Edition, and came up with an overall strategy for sharing
class definitions, but not static class data, between processes.  You *can*
do this and still remain 100% compatible with the JVM spec.  My notes are at
home on how to do this, but I'll try to get the design posted on the Wiki in
the next few days.

While I was at JavaOne, I spoke with one of the original members of the team
that wrote JavaOS.  I ran my ideas by him, and he told me they were
reasonable.  He no longer works for Sun, and would have liked to help with
the project, but he is too tainted with Sun code.  :)

Regards,
Avery J. Regier



> -----Original Message-----
> From:	Ryan Heise [SMTP:ryan@whitewolf.com.au]
> Sent:	Tuesday, July 20, 1999 10:37 PM
> To:	kernel@jos.org
> Subject:	Re: [JOS-Kernel] Construction of a new Java Operating System
> 
> Cliff Baeseman wrote:
> > 
> > Ok here is the deal how do you plan on sharing the classes between
> multiple
> > application instances as shared without reloading the classes. You still
> > have to create the classes in memory to allow proper instancing. The
> classes
> > have to run in your application instance in any case. This goes for jit
> our
> > jvm makes no difference. You could share the classes right now if you
> wished
> > to but how do you keep the data state within those classes?
> > 
> > That is the real question, the answer is that you cannot!
> 
> We can. The JVM can keep static class data separate from the class
> definition itself, thus allowing the classes to be shared and static
> data to be kept separate per process.
> 
> I think the first of the documents referred to by Avery also answers the
> question.
> 
> -- 
> Ryan Heise
> 
> http://www.progsoc.uts.edu.au/~rheise/
> 
> _______________________________________________
> Kernel maillist  -  Kernel@jos.org
> http://jos.org/mailman/listinfo/kernel



From whooops@gmx.de Thu, 22 Jul 1999 12:12:04 +0000
Date: Thu, 22 Jul 1999 12:12:04 +0000
From: Mark Andreas Meyer whooops@gmx.de
Subject: [JOS-Kernel] Processenvironment, was: "Re: [JOS-Arch] RE: [JOS-UI] peer-ui mappings"

Hi.
I don't know how the Kernel group approached this problem (despite having
digged through the Wiki), so I'll just start...

On JOS-Arch Gilbert Carl Herschberger II wrote:

> We can do something about it. We can build a JOS platform that has one JOS
> kernel. The JOS kernel loads and runs one or more JVMs, each in a separate
> process. You can start and stop JVMs. There should be three JVMs to choose
> from. Java 1.0, 1.1 or 2.0 (1.2). And when Java 3.0 is available, there
> will be four. You can run multiple copies of Java 1.0 JVM...but only one
> copy of its bytecode will be loaded. Same with 1.1 and 1.2.

What do you think about the following concept?

We'll use a standard vm that provides everything jos needs (basically hardware
access), on top of this processes will be executed in a ProcessEnvironment,
that uses jos.vm.<impl> to execute bytecode in a protected environment. jos.vm
provides a generic interface for executing bytecode that is controlled by
ProcessEnvironment (ie. you create a new ProcessEnvironment and then customize
its "transparency" and customize Factorys to create certain objects (nobody in
the ProcessEnvironment will know, what is going on)).

jos.vm will satisfy our needs as a vm with lots of features at a lightening
speed and controlled by ProcessEnvironment we can build customized
(=downgraded to Suns Java) and really safe SubVMs. Imagine: Jos supports J3
before Suns beta test finishes. Additionaly the concept can be extended to
include hardware accelerators and other VMs (ie. Smalltalk ).

Waiting for the enlightenment in the form of your comments, Mark :)



From draft@fear.ch Thu, 22 Jul 1999 14:44:13 +0200 (CEST)
Date: Thu, 22 Jul 1999 14:44:13 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] About Graphics Device

Hi

finally I managed to start JJOS with Etherboot. My networkcard was the
problem... well it is a very cheap card ;) 

> Hi,
> 
> >From the UI emails, Somone has mentioned "Shark" from gjt. I have
> read it. It is Great. This will help JOS a lots. We can save time on
> developing
> Graphics Drivers for JOS. Anyone has interest in it ?

That sounds very interseting. Have you already started?

> http://www.gjt.org/servlets/JCVSlet/list/gjt/top.org.gjt.shark
> 
> >
> >There is another Swing based window manager out there called Shark
> >(available on http://www.gjt.org/). The author has also written his own
> >native Graphics class to draw directly to the screen rather than reusing
> >java.awt.Window.
> >

Regards,

Thomas Bocek




From RegierAveryJ@JDCORP.deere.com Thu, 22 Jul 1999 08:03:50 -0500
Date: Thu, 22 Jul 1999 08:03:50 -0500
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [JOS-Kernel] Etherboot

Thomas,

Did you end up replacing your network card?  I think I'll be having the same
types of problems since I don't think Etherboot supports my cheap network
cards.  Any details on how you got past any of the hairy problems you surely
had with getting JJOS running would be appreciated by those trying to do the
same thing.  :)

Avery J. Regier


> -----Original Message-----
> From:	Thomas Bocek [SMTP:draft@fear.ch]
> Sent:	Thursday, July 22, 1999 8:44 AM
> To:	Hilary Cheng
> Cc:	kernel@jos.org
> Subject:	Re: [JOS-Kernel] About Graphics Device
> 
> Hi
> 
> finally I managed to start JJOS with Etherboot. My networkcard was the
> problem... well it is a very cheap card ;) 
> 
	<snip> 
> Regards,
> 
> Thomas Bocek
> 



From tmiller@haverford.edu Thu, 22 Jul 1999 15:36:27 -0400 (EDT)
Date: Thu, 22 Jul 1999 15:36:27 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Processenvironment, was: "Re: [JOS-Arch] RE: [JOS-UI] peer-ui mappings"

> I don't know how the Kernel group approached this problem (despite having
> digged through the Wiki), so I'll just start...

	I've been optimistically ignoring it, hoping that somebody else
would have the time to do the necessary heavy mental lifting and figure it
out.  Essentially, since the VM (will) provides java processes, we can
feed them whatever class library they desire.  As for different bytecode
interperters, if someone wants to write them, I won't object, but I wonder
if it's worth the effort to support the (AFAIK) relatively few programs
that depend on inconsistincies between JVM versions as opposed class
libraries.  We'll see.

-_Quinn




From hilarycheng@usa.net Fri, 23 Jul 1999 10:51:53 +0800
Date: Fri, 23 Jul 1999 10:51:53 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] About Graphics Device


Thomas Bocek wrote:

> Hi
>
> finally I managed to start JJOS with Etherboot. My networkcard was the
> problem... well it is a very cheap card ;)
>

I use near one week to setup BOOTP. :p


>
> > Hi,
> >
> > >From the UI emails, Somone has mentioned "Shark" from gjt. I have
> > read it. It is Great. This will help JOS a lots. We can save time on
> > developing
> > Graphics Drivers for JOS. Anyone has interest in it ?
>
> That sounds very interseting. Have you already started?
>

Nth has been started yet. Since I don't whether JOS Team like it or not.
And I donno is there any project has been started that similiar to this one.
Most important things that I found in JOS. It seems that two group of people.
One is Kernel Developers. Another is UI Developers. Graphics Devices
seems that it is not belongs to both. It may need to find a group that called
"JOS System".

hm maybe we can discuss here. :p one more things, I have contacted the author
of
Shark. It seems positive. I would like to invite him to join JOS so that we can

have a graphics device for JOS.

Regards,

Hilary




From ryan@whitewolf.com.au Fri, 23 Jul 1999 15:40:04 +1000
Date: Fri, 23 Jul 1999 15:40:04 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] About Graphics Device

Hilary Cheng wrote:

> It seems that two group of people.
> One is Kernel Developers. Another is UI Developers. Graphics Devices
> seems that it is not belongs to both. It may need to find a group that called
> "JOS System".

The JOS architecture list (mailto:arch@jos.org) is used to discuss the
low-level Java code between the application layer and the kernel/jvm
layer. Integration of Shark into JOS should probably happen on that
list, while the user interface design itself can be discussed on the
ui@jos.org list.

I have CC'd arch@jos.org. If anyone wishes to continue this thread, you
should perhaps remove kernel@jos.org from the mail header.

Now, back to the discussion...

The good think about Shark is that it works and we can start using it
straight away. If Sean's project ends up being better than Shark in the
future, then we can switch to it when it's ready.

Has anyone here got Shark working? From memory, it didn't work right out
of the box when I tried it. I haven't had a look since but if anyone
manages to install it, could you possibly email the list how you got it
to work? (ie. if you had any problems).

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From linus@bomben.nu Fri, 23 Jul 1999 10:26:21 +0200 (MEST)
Date: Fri, 23 Jul 1999 10:26:21 +0200 (MEST)
From: Linus G Larsson linus@bomben.nu
Subject: [JOS-Kernel] About Graphics Device


On Fri, 23 Jul 1999, Ryan Heise wrote:

>Hilary Cheng wrote:
>
>> It seems that two group of people.
>> One is Kernel Developers. Another is UI Developers. Graphics Devices
>> seems that it is not belongs to both. It may need to find a group that called
>> "JOS System".
>
>The JOS architecture list (mailto:arch@jos.org) is used to discuss the
>low-level Java code between the application layer and the kernel/jvm
>layer. Integration of Shark into JOS should probably happen on that
>list, while the user interface design itself can be discussed on the
>ui@jos.org list.
>
>I have CC'd arch@jos.org. If anyone wishes to continue this thread, you
>should perhaps remove kernel@jos.org from the mail header.
>
>Now, back to the discussion...
>
>The good think about Shark is that it works and we can start using it
>straight away. If Sean's project ends up being better than Shark in the
>future, then we can switch to it when it's ready.
>
>Has anyone here got Shark working? From memory, it didn't work right out
>of the box when I tried it. I haven't had a look since but if anyone
>manages to install it, could you possibly email the list how you got it
>to work? (ie. if you had any problems).

I tried to use it a couple of days ago. I gad to tweak it a great lot, and some
stuff still doesn't compile. Some files had the wrong package-names, some the
wrong class-names &c.
It seems strange to me, 'cause if people work with it, that shouldn't be
possible.
Anyways, I can start the little test-thingy they've got, but I haven't coded
against it myself yet.

Greetz
//Linus G Larsson




From draft@fear.ch Fri, 23 Jul 1999 16:00:17 +0200 (CEST)
Date: Fri, 23 Jul 1999 16:00:17 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] Etherboot

Hi

On Thu, 22 Jul 1999, Regier Avery J wrote:

> Did you end up replacing your network card?  I think I'll be having the same
> types of problems since I don't think Etherboot supports my cheap network
> cards.  Any details on how you got past any of the hairy problems you surely
> had with getting JJOS running would be appreciated by those trying to do the
> same thing.  :)

Well I think the auto-probing(on my cheap NE2000 card) routine doesn't
work. I tried to run JJOS with an older netcard, and it worked. Try to
avoid the autoprobing by setting the right interrupt and io.

By the way, I could read data from my keyboardcontroler using the
in8(0x60). Great work John.

Regards,

Thomas





From draft@fear.ch Fri, 23 Jul 1999 16:56:47 +0200 (CEST)
Date: Fri, 23 Jul 1999 16:56:47 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] speed

I've made some tests with JJOS and java -D.compiler.NONE. JJOS seems to be
10 times slower than java. Why?

Regards,

Thomas






From hilarycheng@usa.net Sat, 24 Jul 1999 20:34:25 +0800
Date: Sat, 24 Jul 1999 20:34:25 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] speed

Hi,

Well, what java that u mean ? One more things, Current JJOS JVM (Kernel) is
not optimizing and fully implemented.

Regards,

Hilary

>I've made some tests with JJOS and java -D.compiler.NONE. JJOS seems to be
>10 times slower than java. Why?
>





From tmiller@haverford.edu Sat, 24 Jul 1999 17:58:33 -0400 (EDT)
Date: Sat, 24 Jul 1999 17:58:33 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] speed

> I've made some tests with JJOS and java -D.compiler.NONE. JJOS seems to be
> 10 times slower than java. Why?

	Because Sun has more people working on java than we do by several
orders of magnitude.  Right now, it's more than what I can do in a timely
fashion to simply make decaf+JJOS a complete JVM, much less worrying about
speed.  Not only is the code itself slow, but there are (probably) a large
number of optimizations available even to an interperter, optimizations
of which I haven't taken advantage.

-_Quinn




From tmiller@haverford.edu Sat, 24 Jul 1999 18:05:14 -0400 (EDT)
Date: Sat, 24 Jul 1999 18:05:14 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Etherboot

> By the way, I could read data from my keyboardcontroler using the
> in8(0x60). Great work John.

	Incidentally, the code currently in the CVS should have
(incomplete) keyboard and console drivers, with which I'm taking breaks
from working on the other parts of decaf.  With JM's recent work on
writing to vga ram, I should have virtual consoles working soon.

-_Quinn




From jm@mak.com Sun, 25 Jul 1999 15:37:07 +0000
Date: Sun, 25 Jul 1999 15:37:07 +0000
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] speed

Hi All;

Sorry to take so long to get back to you, but I'm just re-surfacing
after a Day Job crisis period.  (And, your question deserves a long
reply.)

Thomas Bocek wrote:
> I've made some tests with JJOS and java -D.compiler.NONE. JJOS seems to be
> 10 times slower than java. Why?

Geez, how much time do you have to read my response?  

*Only* 10 times slower?  Actually, at this point in time, that's
actually pretty good.  We're still at the "let's get the damned thing to
work" stage, and we haven't (hadn't until now?) reached the "we'd better
speed this thing up or nobody'll use it" stage.

Starting from the most straightforward "why it's slow" reason...

(0) We've still got this "if (debug)" stuff bloody *everywhere* (note
it's a runtime check within a compile-time macro).

(2) We're not compiling with C++ compiler optimization on.

(3) We've not inlined any of the obvious member functions (e.g., local
variable set/get, operand stack manipulation).

(4) Every Java invocation runs through an expensive kludge to check for
built-in functionality (e.g., reading/writing memory by address).  (This
one has GOT to hurt.)

(5) (This one I haven't had a lot of time to check, but if I'm right,
it's GOT to hurt.)  I *think* that when we check UTF8 Java-space strings
against ASCII, compiled-in strings, we actually allocate a UTF8 copy of
the ASCII string (which entails memory allocation and constructor calls)
to compare the strings.  We'd probably be better off with a special test
which walks byte-at-a-time through the ASCII string and compares it to
the word-at-a-time chars of the UTF8, and also checks for zero values in
the high byte(s).

(6) We've not hand-optimized *anything*.

(7) We've not implemented either JIT or "Hot Spot" type algorithms.

That's all I can think of right now, although I'm sure it's far from an
exhaustive list.

On a more positive note, I have some suggestions for how I would try to
speed things up if I had any time to devote to optimization (it's all I
can do right now to create functionality).  Any volunteers to do the
following?  Thomas?

(1) First, I'd rebuild the host target, enabling profiling (-p switches
to both compiler and linker for the "prof" profiler -- hmm.. can we use
"-gp" for the more-capable "gprof"?).  

(2) Then, I'd add an "on_exit" handler for the host build, which would
do whatever it had to do for the profiler to spit out the "mon.out"
record of execution (this might just be calling the normal exit()
routine).  The goal is that, when the user typed ^C (or whatever), the
"mon.out" file gets written.

(3) I'd try to get some sufficiently "interesting" Java code written, or
find some sufficiently "interesting" benchmark (CaffeineMark -- does it
run under decaf?).

(4) I'd try it under kaffe/whatever and record the execution times.

(5) I'd try it under the host build.

(6) I'd run the profile on the mon.out file, and forward the results to
the list.

Optionally, I'd try this profiling thing again after:

(a) Undefining TRACE and DEBUG macros via the Makefiles.

(b) Turning on the optimizer (I don't know which options to use right
now).

(c) Turning off the "-g" symbolic debugger option (which limits the
optimizations which the compiler can use).

Let me know what you think, and thanks for the attention to the
performance issue!

-jm

-- 
==== John Morrison
==== MaK Technologies Inc.
==== 185 Alewife Brook Parkway, Cambridge, MA 02138
==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115
==== fax:617-876-9208
==== jm@mak.com



From jm@mak.com Sun, 25 Jul 1999 16:20:03 +0000
Date: Sun, 25 Jul 1999 16:20:03 +0000
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Etherboot

Hi Thomas (et al);

Thomas Bocek wrote:
> By the way, I could read data from my keyboardcontroler using the
> in8(0x60). Great work John.

Well, I'm just glad it works!  Took long enough to get to this point,
didn't it?

(1) However, I confess I forgot (if I ever knew definitively) who's
doing the keyboard driver, and who's doing the VGA driver.

(2) With respect to drivers, there's the recurring issue of how to get
all this code written by all these different people to play together
nicely.  With the JVM, the interface spec was pretty well-defined (it
was the JVM spec -- not too much room for creativity there!).  Getting
the JVM and the pico/femto (whatever) kernel to play together nicely
only entailed Todd and I working together.  However, with the drivers,
and with the address spaces (etc.), things are pretty nebulous, and
there are a LOT more people involved.

I was thinking we could just reimplement the "JavaOS for Business" APIs,
which seem pretty well thought out to me.  There is a sort of "registry"
(which I know there's been a lot of discussion about on the JOS lists)
which unifies (as near as I can tell from the "Inside JavaOS" book) the
WIndoze-type registry, and the UNIX-type "device" hierarchy, and it
provides a mechanism for booting and device discovery, and even dynamic
device discovery (e.g., removable media), etc.  I'd be interested in
what people on the kernel list have to say about this.

Please be so kind as to open URL:
	http://jos.org/pipermail/admin/1999-July/000110.html
which discusses the issue, and respond to the kernel list.  There was no
response on the admin list.  (I'm also cc-ing the UI folk, because this
touches upon the VGA/SVGA/whatever driver issue, and I'm also cc-ing the
general list, because it's a general issue.)

Thanks,

-jm

-- 
==== John Morrison
==== MaK Technologies Inc.
==== 185 Alewife Brook Parkway, Cambridge, MA 02138
==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115
==== fax:617-876-9208
==== jm@mak.com



From gchii@mindspring.com Thu, 22 Jul 1999 22:20:57 -0400
Date: Thu, 22 Jul 1999 22:20:57 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Kernel] Re: Processenvironment, was: "Re: [JOS-Arch] RE: [JOS-UI]
 peer-ui mappings"
 peer-ui mappings"

At 12:12 PM 7/22/99 +0000, Mark Andreas Meyer <whooops@gmx.de> wrote:

<snip>

>What do you think about the following concept?
>
>We'll use a standard vm that provides everything jos needs (basically
hardware
>access), on top of this processes will be executed in a ProcessEnvironment,
>that uses jos.vm.<impl> to execute bytecode in a protected environment.
jos.vm
>provides a generic interface for executing bytecode that is controlled by
>ProcessEnvironment (ie. you create a new ProcessEnvironment and then
customize
>its "transparency" and customize Factorys to create certain objects
(nobody in
>the ProcessEnvironment will know, what is going on)).

I like the idea of using a standard vm, for now. It already has native
hooks into my current operating system services. At first, I thought we
could build something using System.in; but, System.in is too limited.
Recently, I'm settled on the idea that we need to simulate the keyboard
through a TCP/IP connection, like telnet. We could interact naturally with
a JOS service running inside a standard JVM. We could get around the
problem of System.in, System.out and System.err. We could do the multiple
process thing, with process environment.

Also, I think we can use this environment to build JOS-compatible
applications now, even before the rest of this is ready. Why not start with
a single TCP/IP connection, supplied by an off-the-shelf JVM, and build up
from there?

Such a JVM service would need device drivers and separate threads. Running
under javaw or jrew, JOS-compatible applications can open additional
windows, dialog boxes, and such.

>jos.vm will satisfy our needs as a vm with lots of features at a lightening
>speed and controlled by ProcessEnvironment we can build customized
>(=downgraded to Suns Java) and really safe SubVMs. Imagine: Jos supports J3
>before Suns beta test finishes. Additionaly the concept can be extended to
>include hardware accelerators and other VMs (ie. Smalltalk ).

When JOS supports Java 3.0 even before Sun, this will put JOS and open
source on the map. I see that JOS has the potential to be THE KILLER APP
for Java. JOS is something you can't do on any other platform.

>Waiting for the enlightenment in the form of your comments, Mark :)

What a nice thing to say. When I get to the end of an e-mail,





From digigod@earthling.net Tue, 20 Jul 1999 22:09:42 -0700
Date: Tue, 20 Jul 1999 22:09:42 -0700
From: DigiGod Q =?iso-8859-1?Q?Frasch=E9?= digigod@earthling.net
Subject: [JOS-Kernel] Design

Its somewhat well agreed that we should split the design of the overall
OS into several sections:

JOSBox--JOSystem--Apps(including JADE) 

JOSBox is the virtual hardware, it consists of the real hardware, the
picokernel, and the JVM; its where all the native code is. A "windows
JOSBox" or a "linux JOSBox" can be made so JOS can be run on top of
another OS without having to modifiy it.

JOSystem is of two parts, JOSCore which is the absolute minimum required
for (and can be thought of a second, all java, kernel) JOS to be JOS
(including the generic extension mechanism for...) JOSExtensions which
will be grafted to JOS at runtime via JOSCore and will consist of things
that arent part of minimum JOS, but will include very common things too
(ie a file system). JOSCore holds process and security managers and via
its configuration metamechanism loads one predefined process only at
startup, the default for this being JADE (which the user can then launch
more apps from...)
 
Apps are what people use the OS for, the UI is an app. JADE is the UI,
it lets people run and interact with apps, it provides everything needed
for various types of UI's, like an AWT Toolkit for a GUI. JADE handles
the various process cycles of Apps so non-JOS apps dont have to worry
about it (or more importantly, be aware of).

Given that, we need to design the basic structure for these various
sections. we cant really do anything until we have a basic design, a
basic idea of what to do.  We should discuss what we need/want on our
various levels of expertise until we get a basic design to build off of
(JOS starts, it loads this which looks like that and then...)

lets get a crackin'

Cheers,
DigiGod
_________________________
DigiGod@earthling.net
AIM:DigiGod 86
_________________________
Quote of the Moment:
        Thus spake the master Ninjei:
         "To the intelligent man, one word, to the fleet horse
          one whip, to the well-written program, a single
          command"
_________________________
Prank of the Moment:
	Using the conferencing feature of your office phone, dial
	one Induhvidual, then while it's ringing dial another and
	conference them together. Put your own phone on mute
	and listen to see how long they'll make small talk before
	figuring out that neither one placed the call.
O-




From clark.evans@manhattanproject.com Mon, 26 Jul 1999 00:49:50 -0400 (EDT)
Date: Mon, 26 Jul 1999 00:49:50 -0400 (EDT)
From: Clark C. Evans clark.evans@manhattanproject.com
Subject: [JOS-Kernel] Posting my members only

For the JOS mailing lists, you must
be a member to be able to post.  This
does a fairly decent job preventing
spam (since spam engines rarely subscribe).

However, some of you make posts to 
lists using an e-mail address that is
not subscribed... as a result, the
posts are put into an holding queue
untill I (or anyone else who wants
to be the "moderator") gets around to
clicking OK on the ones that are
good, and denying those that are
bad.  Overall it is about 50% spam,
so I think keeping this method is good.

Anyway, if you do want to post from
two different mailinglists, subscribe
twice (once with each list), and then
there is an option to disable mail
being sent to you... in this way
you get one copy but can have 2 or
more valid addresses that can
post to the list.

Sorry for any inconvience, hope this
helps explain why some of your 
posts have been rather consistently
delayed by a day or so...

Best,

Clark

P.S. If anyone else wants to be
the list moderator... they are more
than welcome!  Just contact me
directly and I'll transfer it
over to you!  I only read the
JOS kernel list a few times
a week...






From jeff@duska.com Mon, 26 Jul 1999 05:35:04 -0400
Date: Mon, 26 Jul 1999 05:35:04 -0400
From: Jeff Duska jeff@duska.com
Subject: [JOS-Kernel] AD:Family Reunion T Shirts & More

> Message sent by:  Kuppler Graphics, 32 West Main Street, Maple
> Shade, New Jersey, 08052,
> 1-800-810-4330.   This list will NOT be sold.  All addresses
> are automatically added to our remove list.

I am assuming that this person will be informed about the policy outlined on
http://jos.org/mailman/listinfo/kernel







From jm@mak.com Thu, 29 Jul 1999 06:32:51 -0400
Date: Thu, 29 Jul 1999 06:32:51 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] [Fwd: [JOS-Admin] An idea for increasing the number of code-writers]

This is a multi-part message in MIME format.
--------------6067F15F4C9F7C9F08B75DC3
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Hi All;

You may be aware that the heap/GC issue/task has been lying on the floor for
quite some time now, although at least two individuals have, in the medium-term
past, expressed interest.  Looks like now it'll get done!

Welcome, George!

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208
--------------6067F15F4C9F7C9F08B75DC3
Content-Type: message/rfc822
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Return-Path: <jm@mak.com>
Received: from mak.com (alexander [207.86.232.32])
	by mak.mak.com (8.9.3/8.8.7) with ESMTP id JAA22483;
	Wed, 28 Jul 1999 09:09:32 -0400
Message-ID: <379F0206.E27FD714@mak.com>
Date: Wed, 28 Jul 1999 09:13:42 -0400
From: John Morrison <jm@mak.com>
Reply-To: jm@mak.com
Organization: MaK Technologies, Inc.
X-Mailer: Mozilla 4.06 [en] (WinNT; U)
MIME-Version: 1.0
To: George.Marrows@Smallworld.co.uk
CC: jm@mak.com, _Quinn <tmiller@haverford.edu>
Subject: Re: [JOS-Admin] An idea for increasing the number of code-writers
References: <6FDAD424E81FD211BFAB00A0C9DB2DDA7D8146@tropic.smallworld.co.uk>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Hello George;

George.Marrows@Smallworld.co.uk wrote:
> Has anyone taken up the garbage collector challenge? If not, and if you're

Mr. Iain Lowe expressed interest over two months ago, but I haven't heard from
him lately.

> still looking for help in this area, I'd be willing to do my best to step
> in. What I've got so far is an implementation of a heap suitable for a
> conservative mark / sweep garbage collector. (By the way, why did you want
> the gc to be conservative? As I understand it, conservative gc is only
> necessary when you don't know what is a pointer and what is an integer
> (say). decaf must know this for objects on the heap, and presumably does for

Yes, that property of conservative GC schemes is the driving requirement, for a
few reasons.

(1) The decaf JVM we're using uses pointers, not handles, to represent Java
objects (although all Java objects are subclassed from a single C++ base class
in the JVM so we could probably change this if it became necessary).  This rules
out a whole bunch of "moving" or "copying" GC approaches.

(2) The decaf JVM and the jjos nano/pico/femto/whatever kernel uses C++ and
dynamic memory allocation as well. Currently, both the jjos C++ objects and the
Java objects (which are, after all, C++ objects as far as the JVM is concerned)
are allocated out of the same heap.  (This is just laziness and expediency. 
Originally, I thought we would use handles and reference counting, and
compacting GC for "back up."  The best laid plans...  However, maybe simpler is
better.)

(3) The JVM uses "green threads" right now (i.e., simulated, not "real"
threads).  However, when the underlying kernel implements native threads, we're
really going to have both a Java and a native code stack for each Java thread. 
Wouldn't it be nice if we just used a conservative GC to scan both data
structures the same way?

> its stacks too?)  It is based on pages (standard 4K size), with a page only
> holding objects of a specific size. Each page has a descriptor, and objects
> are marked using a bitmap in the descriptor for their page. Scanning of the
> heap is incremental, so that the scan cost is spread over allocations rather
> than as a hit at the end of marking.

This is, to the best of my knowledge, similar to the time-honored Kaffe-adopted
solution as described at:
	http://sourceware.cygnus.com/java/papers/nosb.html

> To be done before useful:
> - Allocation of large objects (> 1/2 page). These will get whole pages to
> themselves.
>         Issues: need a freelist or similar to manage pages
> - Implement mark phase.
>         Issues: how best to handle mark stack overflow?
> - Integrate with decaf.
>         Issues: got to find my way round it first!

Todd, whom I have cc-ed on this reply (Hi, Todd!), is The Man for decaf.  If
it's an easy question, then I can help you, too.  decaf uses the C++ heap (such
as it is) provided by jjos, for which I am the main point of contact (although
Todd can help you there, too).  Perhaps it is sufficient to modify the following
jjos files, which implement whatever heap functionality we have (currently
memory chunks can be allocated, but the routine to deallocate them simply throws
them away):

common/nativecode/builtins.cc (implements the "built in" memory allocators
called by the compiler)
common/nativecode/jbheap.cc (implements the C++ heap object called by the
builtins)

With respect to design considerations, a couple of not-quite-typical
requirements:

(1) Currently, decaf does not call destructors (and thence heap deallocators)
everywhere it is possible to know that the memory object has instantaneously
become garbage.  Either Todd or I can track those down so you don't have to.  We
have, of late, become more conscientious about calling destructors.  Please
advise us if there is a suitable entry point in your conservative heap
implementation for us to mark a memory block as unused...

(2) Currently, jjos does NOT provide virtual memory services (obviously, this
only applies to the "bare iron" i386 build).  We operate in physical memory
space.  This must change eventually (although it is not a short-term concern, it
*is* a design concern).

(3) We currently plan to implement Java-thread paging, so the virtual memory
subsystem is currently envisioned to throw the memory page to be paged out "over
the wall" for the Java paging thread to page out.  And, vice versa, we plan to
have the Java pager page back in pages and throw them back over the wall to the
native-code to map into virtual memory space.  (This would be nice, because we
plan to have the other Java threads which are ready to run to continue -- this
is unlike Linux-based Java implementations, which are typically in one UNIX
process and must stop all threads entirely while pages are fetched.  This should
compensate in large part for the pokiness of Java because, no matter how pokey
Java is, it's faster than the bloody mechanical disk.)

(4) As part of the mechanics of getting this cooperation between Java and the
native code to work correctly, the vmem/GC subsystem must be able to "lock down"
regions of memory (e.g., device driver code and data, the JVM itself, etc.). 
Such memory must neither be GC-ed nor paged.  Please note our heap object is not
necessarily a global, so we can set up separate heaps if such is required...

(5) Java requires that we call any "finalize" Java methods upon Java objects
prior to their being GC-ed/reclaimed.  Todd can perhaps shed more light upon
which context the methods must be executed in ... 

> Future directions:
> - Debug and optimise
> - Incremental marking, perhaps making use of the virtual memory system

It's OK with me (and probably Todd) if there is a stop-and-GC-entirely pause for
now.  Later, with the paging scheme as described above, obviously the vmem/pmem
subsystems, the Java pager, and the GC must all play nicely together.

> - Look at other types of gc: is generational gc useful for Java?

Without having either a copying/compacting collector, I don't know right now...

> My guiding light in all this has been "Garbage Collection : Algorithms for
> Automatic Dynamic Memory Management" by Richard Jones and Rafael Lins.
> http://www.amazon.com/exec/obidos/ASIN/0471941484/o/qid=932632539/sr=8-1/002

An absolutely fabulous book -- read it cover-to-cover.  Please pay particular
attention to the brief bits about how Lisp Machines availed themselves of the
special virtual memory hardware to increase performance (I do not have the book
with me at work, but I recall finding some of these bits via the index).  In
particular, I hope that we can scan pages BEFORE they have to get paged out, as
part of the "regular" paging process, and reclaim instantly those pages which
only contain garbage, and thus avoid the overhead of "throwing the page over the
wall" and sleeping any threads at all.  This is supposed to be a Really Big Win.

> -0933432-9403644 Incidentally, do you know of anywhere that discusses gc
> specifically for Java - eg a statement of what the most efficient method
> seems to be for the "average" Java app?

The URL I sent you above is one...
	http://adept.cs.twsu.edu/~thomas/jos_web.html
	http://www.ddj.com/articles/1998/9810/9810a/9810a.htm

I have other GC-related URLs, too, if you are interested...

> Sadly, I don't get too much time to do programming in my spare time - for
> example, I only managed to get started on this a month ago. What I propose
> is that I plough on for another month or so, but if I find I'm really not
> getting anywhere fast, I'll hand it all over to you or _Quinn to do with as
> you see fit. Of course, if you're interested in seeing what's there
> currently (not a huge lot), I can make that available now.

Both Todd and I can empathize with the problem of having limited hacking time. 
However, whatever you can contribute is that much more than we can do by
ourselves.  And, now is a really good time for us to be addressing these
problems.  Todd has (pretty much) finished the functionality of the JVM, and we
can boot and run Java programs (that don't require device access).  Now, we need
to keep JOS up and running longer (not leaking memory like a sieve), and enable
others to work on device drivers, etc...

Thanks for any help you can give us!  If it's OK with you, I'd like to forward
this reply on to the kernel list, so they can know what's going on ... please
advise...

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208

--------------6067F15F4C9F7C9F08B75DC3--




From jm@mak.com Fri, 30 Jul 1999 18:41:29 +0000
Date: Fri, 30 Jul 1999 18:41:29 +0000
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Updates

Hi All;

At Todd's behest, because I had the hood open on interp.cc:

(1) I inserted a fix in frame::ret() with respect to program counter
value.  Affected file is interp.cc.

(2) I changed java_object::checkcast() code to fix some "broken" (Todd's
words) interface checks.  Affected file is java_object.cc.

Also:

(3) I changed the "Kludge" method which checks the resolved method to
see if it's a built-in one (e.g., println()) to no longer produce
garbage.  This involved adding methods to class constant_utf8, so that
the method name could be checked in a garbage-free way.  Affected files
are interp.cc, c_pool.h, and c_pool.cc.

As usual, please let me know if I have inadvertantly broken anything.

Thanks,

-jm

-- 
==== John Morrison
==== MaK Technologies Inc.
==== 185 Alewife Brook Parkway, Cambridge, MA 02138
==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115
==== fax:617-876-9208
==== jm@mak.com



From george.marrows@triptych.freeserve.co.uk Thu, 29 Jul 1999 23:35:56 +0100
Date: Thu, 29 Jul 1999 23:35:56 +0100
From: George Marrows george.marrows@triptych.freeserve.co.uk
Subject: [JOS-Kernel] Re: [JOS-Admin] An idea for increasing the number of code-writers

>(1) The decaf JVM we're using uses pointers, not handles, to represent Java
>objects (although all Java objects are subclassed from a single C++ base
>class
>in the JVM so we could probably change this if it became necessary).  This
>rules
>out a whole bunch of "moving" or "copying" GC approaches.


That's certainly true if you want conservative gc, but if you know what is a
pointer and what is not, then you can update the pointers directly. This is
what HotSpot does -- Sun seem vey proud of this fact, so I guess it's not so
easy (either that or their marketing dept have been working hard..) See
http://developer.java.sun.com/developer/technicalArticles/Networking/HotSpot
A moving (compacting like HotSpot?) gc is something I'd maybe like to take a
look at later.


>(2) The decaf JVM and the jjos nano/pico/femto/whatever kernel uses C++ and
>dynamic memory allocation as well. Currently, both the jjos C++ objects and
>the
>Java objects (which are, after all, C++ objects as far as the JVM is
>concerned)
>are allocated out of the same heap.

I must admit I hadn't considered the heap requirements of the JVM and
kernel. I'll get to thinking about what this might mean for JJOS's gc.


>(3) The JVM uses "green threads" right now (i.e., simulated, not "real"
>threads).  However, when the underlying kernel implements native threads,
>we're
>really going to have both a Java and a native code stack for each Java
>thread.
>Wouldn't it be nice if we just used a conservative GC to scan both data
>structures the same way?


This has confused me whenever it's been mentioned on the JOS mailing lists -
at the low level of the JOS kernel, is there that much to distinguish native
threads and green threads? What benefit is there to the kernel implementing
the threads rather than the VM? Explanations welcome ..


>This is, to the best of my knowledge, similar to the time-honored
>Kaffe-adopted
>solution as described at:
> http://sourceware.cygnus.com/java/papers/nosb.html


I'd not seen this - it seems to be a handy code-level analysis of Kaffe's
gc. My source for the mechanism was the Jones' Garbage Collection book.



>With respect to design considerations, a couple of not-quite-typical
>requirements:
>
>(1) Currently, decaf does not call destructors (and thence heap
>deallocators)
>everywhere it is possible to know that the memory object has
instantaneously
>become garbage.  Either Todd or I can track those down so you don't have
to.
>We
>have, of late, become more conscientious about calling destructors.  Please
>advise us if there is a suitable entry point in your conservative heap
>implementation for us to mark a memory block as unused...


I hadn't considered calls to the heap to explicitly free memory, since you
can't do it from Java, and that's what I was concentrating on. I think it
would be helpful to null out pointers when they are known to be rubbish,
even if I didn't provide a mechanism for explicit freeing.


>(5) Java requires that we call any "finalize" Java methods upon Java
objects
>prior to their being GC-ed/reclaimed.  Todd can perhaps shed more light
upon
>which context the methods must be executed in ...


Again, I've not considered this yet -- I'll have to come back to it after
the thing actually manages to gc at all!


>> - Look at other types of gc: is generational gc useful for Java?
>
>Without having either a copying/compacting collector, I don't know right
>now...


I hadn't read about HotSpot when I asked my question -- Sun certainly seem
to think generational is good.


>> My guiding light in all this has been "Garbage Collection : Algorithms
for
>> Automatic Dynamic Memory Management" by Richard Jones and Rafael Lins.
>>
>
>An absolutely fabulous book -- read it cover-to-cover.  Please pay
>particular
>attention to the brief bits about how Lisp Machines availed themselves of
>the
>special virtual memory hardware to increase performance (I do not have the
>book
>with me at work, but I recall finding some of these bits via the index).
In
>particular, I hope that we can scan pages BEFORE they have to get paged
out,
>as
>part of the "regular" paging process, and reclaim instantly those pages
>which
>only contain garbage, and thus avoid the overhead of "throwing the page
over
>the
>wall" and sleeping any threads at all.  This is supposed to be a Really Big
>Win.


Yes. Because the gc is part of the kernel, I hope that eventually that we
can work very closely with the the virtual memory system and take advantage
of various gubbins in the memory mgt unit that are inaccessible to user
processes.


>I have other GC-related URLs, too, if you are interested...


One of the best sources I've discovered (only in the last day or two) is
ftp://ftp.cs.utexas.edu/pub/garbage. bigsurv.ps is a survey of gc
techniques - it covers a lot of the same ground as the Jones' book - and
allocsrv.ps covers heap management.


Finally, a word of warning: what I've currently written is in C. This is for
two reasons:

1) I've never written any C++
2) I intended to try integrating it with Kaffe for testing purposes. (I'm
not sure this is relevant now.)

I'll carry on in C until it's up and working. Then I'll try rewriting it in
C++ -- should be a good way to learn ..


Again, thanks for the warm welcome.

-- George








