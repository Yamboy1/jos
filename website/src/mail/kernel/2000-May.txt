From clemens@informatik.tu-muenchen.de Tue, 2 May 2000 12:25:34 +0000
Date: Tue, 2 May 2000 12:25:34 +0000
From: Claudio Clemens clemens@informatik.tu-muenchen.de
Subject: [JOS-Kernel] Find the right things.

Hi,

I'm trying to understand JOS for some Weeks, but without much success. I'm
supose to write an Article about JOS, as a "Future Operating System". But
I'm not able to get the information I realy need to do that (just things
about Kernel, Process, Menory, FS and I/O. At least for the beginning). I
know already little about JJOS/decaf and actully JOS. Information is need
just for the basic OS (no applications except a shell) So that's what you
can help me:

What is the kernel supposed to do?
Which part do the Process-management?
Which part do the I/O- / Menory- / FS- management/implementation?

What does decaf? It's just the native methods for the JVM?

You don't need to tell me everything, the name of the directory where to
find these things is allready OK. 

Oh yes, what must I actually download, to have just the bare minimum? cvs
JJOS jjos projects and jos? Is there a difference between JJOS and
jjos? If I download Distribution1f (combo), do I have everything?

I hope these are not too many questions.

Thanx

Claudio

-- 
                 ,,,,,                            ,_ _,     
                ( o - )                          ( "," )
+-----------oOO----U----OOo-------------------oOO--(-)-OOo-----------+
|   Claudio Andre' Till Clemens   - -  Informatik   "   TU-Muenchen  |
|    clemens@informatik.tu-muenchen.de - 80939 Muenchen - Germany    |
|           Homepage:  http://www.in.tum.de/~clemens                 |
+------------- Papa, what means: "FORMATING DRIVE C:"? --------------+





From gchii@mindspring.com Tue, 02 May 2000 09:33:40 -0400
Date: Tue, 02 May 2000 09:33:40 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Kernel] [doc] Kernel

Architecturally, a kernel has been separated from its kernel modules. A
kernel itself has platform-specific machine code. In turn, it provides a
platform-independent environment for kernel modules. Kernel modules can be
statically linked to the kernel.

A virtual machine is a kernel module. A kernel and virtual machine can be
statically linked into a single executable image.

A kernel can provide an environment for more than one implementation of a
virtual machine. Likewise, a virtual machine can run inside more than one
implementation of a kernel.





From tmiller@haverford.edu Tue, 2 May 2000 11:28:58 -0400 (EDT)
Date: Tue, 2 May 2000 11:28:58 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Find the right things.

> What is the kernel supposed to do?

	That's good question.  Right now, JJOS exists to provide h/w
abstraction services to decaf, and the other two kernels don't seem to be
under active development.  (Well, neither is JJOS right now, because its
author has been too busy, but at least it's in use for something under
active development.)

> Which part do the Process-management?

	Right now, there is no process management because there are no
processes.  We've been discussing how to handle doing multiple java
process in a single VM process on the mailing list recently, so that the
JVM would manage processes.  When we get native processes, the kernel will
take a hand.

> Which part do the I/O- / Menory- / FS- management/implementation?

	Memory -- no virtual memory yet; FS -- will be handled by the Java
side of things -- I/O likewise.

> What does decaf? It's just the native methods for the JVM?

	It /is/ the JVM.  The current version hasn't had the interpreter
ported to it yet (it's ground-up rewrite intended for multiple java
processes and supporting a class library); the old interpreter ought to be
available in interp.cc

-_Quin





From clemens@informatik.tu-muenchen.de Wed, 3 May 2000 08:45:36 +0000
Date: Wed, 3 May 2000 08:45:36 +0000
From: Claudio Clemens clemens@informatik.tu-muenchen.de
Subject: [JOS-Kernel] Find the right things. (fwd)

AGAIN
-- 
                 ,,,,,                            ,_ _,     
                ( o - )                          ( "," )
+-----------oOO----U----OOo-------------------oOO--(-)-OOo-----------+
|   Claudio Andre' Till Clemens   - -  Informatik   "   TU-Muenchen  |
|    clemens@informatik.tu-muenchen.de - 80939 Muenchen - Germany    |
|           Homepage:  http://www.in.tum.de/~clemens                 |
+------------- Papa, what means: "FORMATING DRIVE C:"? --------------+

---------- Forwarded message ----------
Date: Tue, 2 May 2000 12:25:34 +0200 (CEST)
From: Claudio Clemens <clemens@informatik.tu-muenchen.de>
To: Kernel@jos.org
Subject: Find the right things.

Hi,

I'm trying to understand JOS for some Weeks, but without much success. I'm
supose to write an Article about JOS, as a "Future Operating System". But
I'm not able to get the information I realy need to do that (just things
about Kernel, Process, Menory, FS and I/O. At least for the beginning). I
know already little about JJOS/decaf and actully JOS. Information is need
just for the basic OS (no applications except a shell) So that's what you
can help me:

What is the kernel supposed to do?
Which part do the Process-management?
Which part do the I/O- / Menory- / FS- management/implementation?

What does decaf? It's just the native methods for the JVM?

You don't need to tell me everything, the name of the directory where to
find these things is allready OK. 

Oh yes, what must I actually download, to have just the bare minimum? cvs
JJOS jjos projects and jos? Is there a difference between JJOS and
jjos? If I download Distribution1f (combo), do I have everything?

I hope these are not too many questions.

Thanx

Claudio

-- 
                 ,,,,,                            ,_ _,     
                ( o - )                          ( "," )
+-----------oOO----U----OOo-------------------oOO--(-)-OOo-----------+
|   Claudio Andre' Till Clemens   - -  Informatik   "   TU-Muenchen  |
|    clemens@informatik.tu-muenchen.de - 80939 Muenchen - Germany    |
|           Homepage:  http://www.in.tum.de/~clemens                 |
+------------- Papa, what means: "FORMATING DRIVE C:"? --------------+






From gchii@mindspring.com Wed, 10 May 2000 09:33:23 -0400
Date: Wed, 10 May 2000 09:33:23 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Kernel] [Class.forName()] Where?

Where is the decaf-specific implementation of java.lang.Class.forName()? I
would like to read the C++ code that defines an arbitrary class based on
class name. Thanks,





From tmiller@haverford.edu Wed, 10 May 2000 12:29:19 -0400 (EDT)
Date: Wed, 10 May 2000 12:29:19 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] [Class.forName()] Where?

> Where is the decaf-specific implementation of java.lang.Class.forName()? I
> would like to read the C++ code that defines an arbitrary class based on
> class name. Thanks,

	I'd love to read it too, Gilbert.  It is one among many things
that decaf doesn't have yet.

-_Quinn





From clemens@informatik.tu-muenchen.de Thu, 11 May 2000 20:38:20 +0000
Date: Thu, 11 May 2000 20:38:20 +0000
From: Claudio Clemens clemens@informatik.tu-muenchen.de
Subject: [JOS-Kernel] Meaning

So 
JJOS is the kernel
and
decaf the JVM (without Java API?)

But for what stands JJOS and decaf for? Must I write jJOS or JJOS?

Thanx

Até

Claudio

-- 
+-----| http://linux.brasileiro.net - Seu site de informações |-----+
|     Claudio Clemens at Home   -   Informatik   -   TU-München     |
|         clemens@in.tum.de         http://www.in.tum.de/~clemens   |
Digite algo para continuar ou outra tecla p/ abortar...





From tmiller@haverford.edu Thu, 11 May 2000 14:50:07 -0400 (EDT)
Date: Thu, 11 May 2000 14:50:07 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Meaning

> So 
> JJOS is the kernel
> and
> decaf the JVM (without Java API?)

	Yes.  You might say jJOS is the kernel and JJOS the combination of
jJOS and decaf, but we tend use the terms rather interchangeably.  
[j|J]JOS was just John's way of distinguishing his kernel from others; I'm
not sure why he chose the name.  decaf is the name of the interpreter
becuase it's not particularly fast.  (That is, the Java is decaffienated.)

-_Quinn





From gchii@mindspring.com Mon, 15 May 2000 11:18:54 -0400
Date: Mon, 15 May 2000 11:18:54 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Kernel] [rheise.os 0.1.4] Warning

Warning: Ryan Heise <ryan@whitewolf.com.au> has introduced a second and
incompatible package called jos.system. Both packages should not be used at
the same time. I have privately encouraged Ryan to select another package
name, but without success.

The jos.system package inside rheise.os 0.1.4 pre-release clashes with the
existing jos.system package inside JJOS module from JOS CVS. The original
jos.system package contains the following classes and are critical to
operation of decaf:

console
consoled
ConsoleDriver
interrupt
interrupts
machine

Ryan says the original jos.system must be renamed to something else so that
Ryan can use jos.system for rheise.os. Ryan wants us to rewrite jJOS/decaf
and rework all of its documentation to use other package names.

How do you feel about this?





From RegierAveryJ@JDCORP.deere.com Mon, 15 May 2000 10:28:42 -0500
Date: Mon, 15 May 2000 10:28:42 -0500
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [JOS-Kernel] [rheise.os 0.1.4] Warning

I haven't taken a good look at the rheise.os classes as I should have by now
(been busy with the day job), but from what I understand, they implement a
large set of functionality that is intended for jos.core.* (ie. the process
management).  With that in mind I think his using jos.core,
jos.core.process, or just jos.process would be fine.  jos.system.* has a
different purpose from process management.

Avery J. Regier
Information Technology Analyst
WebWorks Team
Consumer & Commercial Equipment Division, Deere & Co



> -----Original Message-----
> From:	Gilbert Carl Herschberger II [SMTP:gchii@mindspring.com]
> Sent:	Monday, May 15, 2000 11:19 AM
> To:	kernel@jos.org
> Subject:	[JOS-Kernel] [rheise.os 0.1.4] Warning
> 
> Warning: Ryan Heise <ryan@whitewolf.com.au> has introduced a second and
> incompatible package called jos.system. Both packages should not be used
> at
> the same time. I have privately encouraged Ryan to select another package
> name, but without success.
> 
> The jos.system package inside rheise.os 0.1.4 pre-release clashes with the
> existing jos.system package inside JJOS module from JOS CVS. The original
> jos.system package contains the following classes and are critical to
> operation of decaf:
> 
> console
> consoled
> ConsoleDriver
> interrupt
> interrupts
> machine
> 
> Ryan says the original jos.system must be renamed to something else so
> that
> Ryan can use jos.system for rheise.os. Ryan wants us to rewrite jJOS/decaf
> and rework all of its documentation to use other package names.
> 
> How do you feel about this?
> 
> 
> _______________________________________________
> Kernel maillist  -  Kernel@jos.org
> http://jos.org/mailman/listinfo/kernel





From jewel@pixie.co.za Mon, 15 May 2000 19:24:48 -0200 (GMT+2)
Date: Mon, 15 May 2000 19:24:48 -0200 (GMT+2)
From: jewel@pixie.co.za jewel@pixie.co.za
Subject: [JOS-Kernel] [rheise.os 0.1.4] Warning

On Mon, 15 May 2000, Gilbert Carl Herschberger II wrote:
> Warning: Ryan Heise <ryan@whitewolf.com.au> has introduced a second and
> incompatible package called jos.system. Both packages should not be used at

> console
> consoled
> ConsoleDriver
> interrupt
> interrupts
> machine

I agree with Ryan that these classes aren't going to be used by
application writers, so belong in something more like jos.kernel.system.
Or jos.machine.system?

John Leuner






From tmiller@haverford.edu Mon, 15 May 2000 20:31:19 -0400 (EDT)
Date: Mon, 15 May 2000 20:31:19 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] [rheise.os 0.1.4] Warning

> Ryan says the original jos.system must be renamed to something else so that
> Ryan can use jos.system for rheise.os. Ryan wants us to rewrite jJOS/decaf
> and rework all of its documentation to use other package names.

	Before getting down to deciding if the renaming is correct, how
much documentation have we actually produced?  (I sure don't recall
writing much.)  If it's as little as I remember, it won't be a problem to
do a renaming.  It's not like we have a stable release where changing a
namespace would cause massive numbers of developers untold agony when they
had to recode :)  (Ah, to dream :))

-_Quinn





From gchii@mindspring.com Tue, 16 May 2000 12:45:29 -0400
Date: Tue, 16 May 2000 12:45:29 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Kernel] [rheise.os 0.1.4] Warning

At 08:31 PM 5/15/00 -0400, "Todd L. Miller" <tmiller@haverford.edu> wrote:
>	Before getting down to deciding if the renaming is correct, how
>much documentation have we actually produced?  (I sure don't recall
>writing much.)  If it's as little as I remember, it won't be a problem to
>do a renaming.

If one prefers to look exclusively at one's own work, one should work alone.

Others have written and will continue to write about the JOS Project,
including the goal and purpose of the jos.system package. Respect others.
By changing a package name, you'll accidentally destroy their work.

We have incorporated jos.system into the JOS Binary Distribution. Before we
change the name of a package, we must find volunteers to change the package
and rebuild the JOS Binary Distribution.

We have countless articles on JOS Wiki and elsewhere. This is part of the
documentation of the JOS Project. Before we change the name of a package,
we must find volunteers who are signed up to change all of the related
articles.

We have countless messages on our mailing list. This is part of the
documentation of the JOS Project. We don't have the time to go back and
edit those messages even if we could.

>It's not like we have a stable release where changing a namespace would cause
>massive numbers of developers untold agony when they had to recode :)

If we treat a product as if it were not a stable release, it will never be
a stable release. A loose group of volunteers needs to be very efficient.
By always treating a product as a stable release, we reduce the volunteer
effort required from others.

How many members can we put through this agony? If changing a name would
cause 100 members untold agony, should we change the name? If changing a
name would cause 10 members untold agony, should we change the name? How
would you feel if you were one of those members?

How many customers (non-members) can we put through this agony? Maybe
jos.system isn't that important to you. Before we change the name, we must
ask every customer that has downloaded jos.system from JOS CVS. Before we
change the name, we must ask every customer that received a copy of
jos.system from someone who downloaded it from JOS CVS.

All our members are volunteers. We must treat all our members with respect,
not just a few. It means that we don't put any member through untold agony.
We change a name as the last resort. We only change a name when we have
absolutely no choice.

Programming in place is a very bad habit. A volunteer group like the JOS
Project might get away with it once or twice. You might get away with it
many times if you are a commercial company with a monopoly, like Sun
Microsystems.





From iainshigeoka@yahoo.com Tue, 16 May 2000 15:44:16 -0500
Date: Tue, 16 May 2000 15:44:16 -0500
From: Iain Shigeoka iainshigeoka@yahoo.com
Subject: [JOS-Kernel] [rheise.os 0.1.4] Warning

On 16 May 00, at 12:45, Gilbert Carl Herschberger II wrote:

> All our members are volunteers. We must treat all our members with respect,
> not just a few. It means that we don't put any member through untold agony.
> We change a name as the last resort. We only change a name when we have
> absolutely no choice.

At the current stage (pre-alpha) I don't think we can be very strict 
about namespace issues.  Things are very fluid right now and 
change must be anticpated and accepted.  Especially since we 
don't have a really stringent way of controlling, assigning and 
deciding namespace usage.

In my experience, with these collaborative projects, its much more 
important to have the active coders "do things".  Action.  So if 
someone is producing code, and it temporarily breaks things, so 
be it.  Anyone that decides to use that new code, must live with 
the breakage and apply the appropriate patches and work arounds. 
When things get to a "stable" release time, then we worry about 
working things into a more structured system, and working out 
conflicts.  So things go in cycles, experimental (expect changes 
that break things and things done that are knowingly "wrong").  
Then you get to a stable release, where you try and cleanup the 
hacks and inconsistencies.  If you don't want to be bleeding edge, 
then stick with the stable releases where these types of issues are 
addressed.

IMHO, namespace problems are pretty trivial at this point.  If a 
coder wishes to use a particular namespace, then let them.  If it 
breaks things, then its broken for their build.  If it gets integrated, 
then we as a group must choose their approach versus another and 
workout any namespace conflicts.  With experimental code, I think 
namespace issues are not really anything to consider.  If you're 
building things that work directly with anything in the jos.* package 
then you'd better be prepared for namespace and classname 
changes for the near term... you're working on the very bleeding 
edge and not only is the target moving, but you're standing on a 
shifting and changing foundation.

-iain




From tmiller@haverford.edu Tue, 16 May 2000 17:11:15 -0400 (EDT)
Date: Tue, 16 May 2000 17:11:15 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] [rheise.os 0.1.4] Warning

> IMHO, namespace problems are pretty trivial at this point.
> With experimental code, I think namespace issues are not really
> anything to consider.

	Hear, hear!

-_Quinn





From gchii@mindspring.com Wed, 17 May 2000 16:14:36 -0400
Date: Wed, 17 May 2000 16:14:36 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Kernel] [native methods] Learn from JNI

We might learn something about native methods from the Java Native
Interface (JNI). The JNI suggests that each class must manage its own
native methods. If there were a "list of native methods" field inside each
class, native methods could be closely associated with a class. When an
invoke..() opcode method detects a native attribute, it can get a native
method from the class. On the other hand, when an invoke..() opcode method
detects a native method, it can verify the existance of a native attribute.
When a class is garbage collected, all links to its native methods are
discarded.

decaf maintains a centralized, vm-wide list of native methods. Its native
methods are registered once for all classes. Should decaf could maintain a
(short) list of native methods for each a class? This would be populated
many times, each time a class is resolved.

decaf also uniquely identifies a native method by name rather than name and
signature. Anyway, it is rare for a native method to have more than one
signature within the Java standard class libraries.

JNI is incomplete. It has no C/C++ methods to set and get individual native
methods. Instead of a C structure like JNINativeMethod, I would like to see
a NativeMethod class in C++.

class NativeMethod {
  public:
    NativeMethod(
        const char *name,
        const char *signature,
        const void *fnPtr );

    const char *getName() const;
    const char *getSignature() const;
    const void *fnPtr() const;
    // *A! invoke();
  :
};





From tmiller@haverford.edu Wed, 17 May 2000 16:32:57 -0400 (EDT)
Date: Wed, 17 May 2000 16:32:57 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] [native methods] Learn from JNI

> decaf also uniquely identifies a native method by name rather than name and
> signature.

	This is a known bug; I'm fixing it with the new
interpreter.  Intern'ing native methods by class as its loaded may be
worthwhile; I'll look into it.  We need to decide, however, if we want to
allow native access aside from kernel calls...

-_Quinn





From jewel@pixie.co.za Wed, 17 May 2000 22:19:43 -0200 (GMT+2)
Date: Wed, 17 May 2000 22:19:43 -0200 (GMT+2)
From: jewel@pixie.co.za jewel@pixie.co.za
Subject: [JOS-Kernel] [native methods] Learn from JNI

> JNI is incomplete. It has no C/C++ methods to set and get individual native
> methods. Instead of a C structure like JNINativeMethod, I would like to see
> a NativeMethod class in C++.
> 
> class NativeMethod {
>   public:
>     NativeMethod(
>         const char *name,
>         const char *signature,
>         const void *fnPtr );
> 
>     const char *getName() const;
>     const char *getSignature() const;
>     const void *fnPtr() const;
>     // *A! invoke();
>   :
> };

Yes JNI doesn't cater for this. But it is easy to build a list of all the
native methods for a class (with a structure like you just described).
When a ACC_NATIVE attribute is discovered, you could put a pointer to the
JNI method / Optimised method (by JIT for example) directly into the
Method structure.

John






From ryan@whitewolf.com.au Tue, 16 May 2000 11:09:45 +1000
Date: Tue, 16 May 2000 11:09:45 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] jos distribution 1e

"Todd L. Miller" wrote:

>         Ryan -- I took a quick look through the ftpd code, and I like it
> alot; how well does it work?  (Don't have time to check it myself right
> now.)  Are you still working on it?

Sorry for not replying sooner but I only just saw this email :-) (with
my attention recently drawn to the kernel list).

Yes, I am still working on it, but because I have recently been adding
experimental code related to authentication/authorization based on
rheise.os, I have been unable to make any recent releases. This is
unfortunate because I would like to integrate some bug fixes people have
been sending me.

The released version, works pretty well except for a bug in the ASCII
transfer code where the first byte is transferred incorrectly. IMAGE
transfer (binary) should work ok, though.

Thanks for your interest.

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/





From ryan@whitewolf.com.au Tue, 16 May 2000 11:43:20 +1000
Date: Tue, 16 May 2000 11:43:20 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] [rheise.os 0.1.4] Warning

Gilbert Carl Herschberger II wrote:

> Ryan says the original jos.system must be renamed to something else so that
> Ryan can use jos.system for rheise.os. Ryan wants us to rewrite jJOS/decaf
> and rework all of its documentation to use other package names.

Although your quote doesn't even come close to anything I've ever said,
I do offer my services to help rename packages, if that is what we agree
to do.

In the form of:

$ find . -name '*.java' -exec perl -pi.bak -e
's/jos\.system/jos.kernel/g' '{}' \;

$ mv common/bytecode/jos/system common/bytecode/jos/kernel

$ find . -name '*.cc' -exec perl -pi.bak -e 's/jos_system/jos_kernel/g'
'{}' \;
$ find . -name '*.h' -exec perl -pi.bak -e 's/jos_system/jos_kernel/g'
'{}' \;

And when you're happy:

$ find . -name '*.bak' -exec rm '{}' \;



-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/





From warp@spin.de Sun, 30 Apr 2000 22:37:43 +0200
Date: Sun, 30 Apr 2000 22:37:43 +0200
From: Markus Peter warp@spin.de
Subject: [JOS-Kernel] pls help me. (fwd)

Can someone help this poor guy?


---------- Forwarded Message ----------
Date: Sonntag, 30. April 2000 2:50 Uhr -0700
From: Jordan Arthur <mjty419@yahoo.com>
To: warpi@spin.de
Subject: pls help me.

hi wrapi,
   Sorry interrupting your very much.
   I am a fan about Java and Linux. Recently, I made my
most energy into researching JOS because I feel it is
attractive for me.
   But what's regretting is that I have no email box
of mine. So I can not attend JOS org, maybe this day
will be coming to me because my leader have agreed on
apply an email box for me. Hope this day.
   Now I met a problem when I creat the structure of
JOS. Because JOS, at present, is used on the Diskless
workstation. And I have made a floppy to boot JOS
from my Linux server.
   Because my skill is definative, the next step had to
stopped. I don't know which applications, utilities or
tools will be needed in my directory of "/tftpboot".
   Now the phenomen is the following:
---------------------------------------------
   jjos/decaf
   kernel: a20 enabled.
-----------------------------------------------
  Then the system will do nothing. I think it may be
the problem of shorting necessary modules.
  Do you think so?
  In fact, this problem is so foolish that I really
say it to you. But I had to ask some help for my
developing JOS with Java. After all, I more like
coding with java.
   Thanks a lot in advance
   Sincerely yours
   Arthur.


__________________________________________________
Do You Yahoo!?
Talk to your friends online and get email alerts with Yahoo! Messenger.
http://im.yahoo.com/

---------- End Forwarded Message ----------



-- 
Markus Peter - SPiN GmbH
warp@spin.de






From mjty419@yahoo.com Mon, 8 May 2000 08:04:10 -0700 (PDT)
Date: Mon, 8 May 2000 08:04:10 -0700 (PDT)
From: =?gb2312?q?Jordan=20Arthur?= mjty419@yahoo.com
Subject: [JOS-Kernel] How to run my JOS?

hi,
  Sorry for interrupt you in that Some problem about JOS are confusing me. 
  And I used jos1e. I have been created the sketch about my JOS. 
  I have been made my bootable floppy and JJOS--JOS' kernel can be transmitted
through TFTP protocol successfully. but the result only be the following:
  --------------------
   JJOS /decaf 
   KERNEL: a20 enabled.
  --------------------
  Now I want to know very much which modules can be available such as application 
utility, file system etc. Because these concepts remain residing out of my brain. 
Maybe I need learned more technology about the OS. 
  In addition, how can I do if I want to test an application based on JOS written
by myself. I feel the technology most needed by me should be a basic figure about JOS. 
otherwise, I will own a feeling in which I can not discern the correct direction in 
the road of researching JOS.
  I am a fan about java and have worked for four years mostly companied with Java.
I feel Java is my best friend when developing some project. Furthermore, JOS characterics
such as open, portable and extensible are attracting me deeply. So this kind of 
expection will be much intense in my brain. Because I am short of full technology 
in the aspect of modern OS.
  Can you do me a favor. I believe your reply would be of great help. With it, I will 
improve much rapidly. And I am expecting the day is coming that I can contribute my 
products into JOS.   
  Thanks a lot in advance
  
  sincerely yours
  Arthur.         
    

__________________________________________________
Do You Yahoo!?
Send instant messages & get email alerts with Yahoo! Messenger.
http://im.yahoo.com/





From ryan@whitewolf.com.au Tue, 16 May 2000 07:50:48 +1000
Date: Tue, 16 May 2000 07:50:48 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] [rheise.os 0.1.4] Warning

Gilbert Carl Herschberger II wrote:
> 
> Warning: Ryan Heise <ryan@whitewolf.com.au> has introduced a second and
> incompatible package called jos.system. Both packages should not be used at
> the same time. I have privately encouraged Ryan to select another package
> name, but without success.

--snip--

> Ryan says the original jos.system must be renamed to something else so that
> Ryan can use jos.system for rheise.os. Ryan wants us to rewrite jJOS/decaf
> and rework all of its documentation to use other package names.

Gilbert, do you think it is fair to make people think I said this? I
left it open to discussion on the arch@jos.org list. It goes against my
principles to force others into doing things, which is why I have never
claimed rheise.os to be the official Java layer for JOS (unlike your
claiming that the Program API is the standard way to write programs in
JOS). In fact you have been claiming a lot of things that are untrue, in
private, and now in public, which offends me deeply.

I never said that I'm choosing jos.* and that's that, so Decaf *must*
change it's package name... What I said to you is this:

: In reality either
: decaf's classes can go in there, or my classes can go in there. The
: productive approach is to work out where the classes should go, and
not
: to claim rheise.os is unusable.

Please note that Gilbert has not yet responded to this in private. He
chose to write this email directly to the list.

Also note that Gilbert was very upset with me for changing my package
name from rheise.os to anything because he believes package names should
never change, that software should be perfectly backward compatible. He
made clear to me in private that his public statement:

(Reference: http://jos.org/pipermail/arch/2000-May/000530.html)

> Your personal implementation of the framework/API is rheise.os,
> and should be. There is no good reason to change it, now or ever.

he really did mean that it is too late for me to change the package name
of rheise.os because I have already published it. While I don't feel at
all bound by Gilbert's insistence on perfect backward compatibility, I
do understand where he is coming from. He has started using rheise.os as
an API for implementing his concept of subprograms in one of his
products. Now that I have changed the my package names, his softare will
not work with newer versions of rheise.os.

I do not think it is appropriate to quote what Gilbert said to me in
private, but in order to defend my reputation, I will quote the parts of
the email which I wrote. If Gilbert wishes to post the entire email, he
may (although I wish he would actually reply to it rather than sending
me one offensive email and then claiming he was unsuccessful in
encouraging me to change my package name back. It is sad that it has
come to this, but I do not appreciate Gilbert spreading false statements
about me in public).

======================
(TO: Gilbert)

Let me start with a general response.

I understand you are quite upset that I have changed the package name on
you after you had already started writing programs against the API. This
comes down to a misunderstanding on two levels:

1. You thought rheise.os was simply an API for executing sub-programs.
2. You thought that what I had released was a stable version.

Unfortunately you were wrong on both accounts, and it is my fault for
not making this clear beforehand. rheise.os is a multiple process Java
execution environment as advertised. It is designed to support the four
ways to run programs, three of which are built in to rheise.os (the
process based ones), and the fourth (sub-program) which is handled
entirely outside of the framework, but nevertheless supported.

The second point of misunderstanding is that you thought that this was a
stable release. The fact that the version number hasn't even reached "1"
should have made it clear that this is not the case, but I see now that
I should make it more clear. I am now writing up a proper document that
explains my version numbering scheme. It is basically the same version
numbering scheme that is used by the Linux kernel:

rheise.os-0.1.4-pre4 can be deconstructed as follows:

The first number is the major version number. It is currently zero
meaning it is a project that is just forming. You may only be used to
people releasing software when it has reached version 1, but I am
following the general open source principle of "Release early, and
release often". That means, in order to allow other open source
developers to contribute, I need a numbering sheme that allows me to
make releases that aren't intended for the general public. This is what
the next component is for.

The second number is odd if this is a development release, or even if it
is a stable release intended for the general public. Since you have
started to use the development version of rheise.os in your product, you
will have to deal with the fact that it is unstable. In these releases,
I may change package names if I like. However, the stable releases will
be maintained separately and the APIs will not change on you. It is only
when the stable release number is incremented that you might get a new
API, but my aim is to make it stabilise as soon as possible. Even the
Linux kernel API changed a lot when it was a few months old. Yet, Linus
still made releases so that other developers could contribute.

The third number represents minor releases that includes changes
developers contribute as soon as they can be made available. This
doesn't happen exactly after every change, but it is still very finely
grained. Minor updates to development versions may contain API changes,
however minor updates to stable versions must not contain API changes.

The -pre4 suffix means that this is the 4th pre-release of what is to
become rheise.os-0.1.4. I have been making pre-releases available to
other developers who have been working with me on rheise.os.

So, you appear to be more interested in the stable line of releases
which actually doesn't exist yet. The middle number is still odd. Once
the development version starts to stablise, I will roll over into a new
stable release (0.2.0) and simultaneously fire up another development
line (0.3.0).

I expect that version 0.4.0 will have API changes over 0.2.0 which means
you should continue to use 0.2.0 until you are ready to upgrade your
software to 0.4.0. The 0.2.0 version can still be maintained for those
people who are still using it (eg. bug fixes), but they won't be able to
take advantage of the new functionality in 0.4.0 until they upgrade
their program code to use the new version. My goal is to make API
changes minimal, but in the early phases I expect they will change a lot
since in the early stages I am more interested in working on the
interfaces over and over again until I've got them exactly right.

--snip--

Just a minor point. I have not renamed the product yet. I _have_ renamed
the java package names, which is a different issue. The latter affects
backward compatibility, and my believe is that such changes should be
made as early as possible. This is because as more people start writing
OS services on top of rheise.os, it will be more and more work for
everyone to change their code when I rename my packages to jos.*. While
my product is not _the_ java layer for JOS, I still see benefit in
naming my classes jos.*. All I have done here is expressed my believe. I
know you have different opinions on backward compatibility and I do not
wish to argue about them here. Let's just acknowledge for the moment
that we have different opinions and we are entitled to go with what we
think is best. Later we can discuss our differences.

--snip--

You can't claim that it is unusable just because it clashes with another
product. Once you see this, then you can focus your attention on design
issues such as: can we reorganise the package structure so that the
existing decaf classes in jos.system.* can go into another package,
leaving jos.* for public APIs? I see little value on claiming that
rheise.os is unusable if the classes are named jos.*. In reality either
decaf's classes can go in there, or my classes can go in there. The
productive approach is to work out where the classes should go, and not
to claim rheise.os is unusable.

--snip--

As I said, I'm not interested in discussing perfect backward
compatibility here. But I will say that I want to be able to work on a
development version and freely restructure things. In addition, I'd like
to release my development version so that others can help me.

--snip--

It is the product name that makes it unique. My proposal for the JOS
process API is that applications deal with a class called
jos.process.JavaProcess. THAT is my proposal. You can replace my product
with a different product and there will be no name clash. If you someone
else decides not to help me extend rheise.os and wishes to create their
own Java layer, they can name their own version jos.process.JavaProcess
too. Or maybe they'll have a different name for that class. You wouldn't
use both their product and my product at the same time, you would choose
to support one and program against that.

It is similar to how decaf is one possible JVM that can be used in the
JOS project, but it is not *the* JOS JVM. However, his interpreter
allows Java programs to use the exact same bytecodes as any other JVM.
There is no name clash. He needs to use the proper symbolic names before
it can be useful. The same applies to rheise.os.

--snip--

Just as decaf is not rheise.os specific. Yet, it needs to conform to
some standard symbolic names before it can be used across different
environments.

Namespace clashes are only a critical issue if you are using the two
products simultaneously in the same environment. If you want to maintain
separate incompatible package names otherwise, that's up to your own
personal tastes. And I know you have different tastes than me. However,
as I said, I do not wish to argue over which one is better, here.




-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/





