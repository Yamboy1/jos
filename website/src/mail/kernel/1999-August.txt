From jm@mak.com Sun, 01 Aug 1999 17:16:57 -0400
Date: Sun, 01 Aug 1999 17:16:57 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Re: [JOS-Admin] An idea for increasing the number of
 code-writers

Hi George (et al);

George Marrows wrote:
> 
> >(1) The decaf JVM we're using uses pointers, not handles, to represent Java
> >objects (although all Java objects are subclassed from a single C++ base
> >class
> >in the JVM so we could probably change this if it became necessary).  This
> >rules
> >out a whole bunch of "moving" or "copying" GC approaches.
> 
> That's certainly true if you want conservative gc, but if you know what is a
> pointer and what is not, then you can update the pointers directly. This is
> what HotSpot does -- Sun seem vey proud of this fact, so I guess it's not so
> easy (either that or their marketing dept have been working hard..) See
> http://developer.java.sun.com/developer/technicalArticles/Networking/HotSpot

Yeah, we probably could, but it would involve extensive changes.  The
conservative GC seems so much simpler for the moment in that we can
treat (pretty much) everything the same.

> A moving (compacting like HotSpot?) gc is something I'd maybe like to take a
> look at later.

Same here.

> >(2) The decaf JVM and the jjos nano/pico/femto/whatever kernel uses C++ and
> >dynamic memory allocation as well. Currently, both the jjos C++ objects and
> >the
> >Java objects (which are, after all, C++ objects as far as the JVM is
> >concerned)
> >are allocated out of the same heap.
> 
> I must admit I hadn't considered the heap requirements of the JVM and
> kernel. I'll get to thinking about what this might mean for JJOS's gc.

Again, I'm thinking we can treat everything exactly the same.  There's a
certain appeal to the economy of effort (especially when it's YOUR
effort, not mine!  <== this is an attempt at humor).

> >(3) The JVM uses "green threads" right now (i.e., simulated, not "real"
> >threads).  However, when the underlying kernel implements native threads,
> >we're
> >really going to have both a Java and a native code stack for each Java
> >thread.
> >Wouldn't it be nice if we just used a conservative GC to scan both data
> >structures the same way?
> 
> This has confused me whenever it's been mentioned on the JOS mailing lists -
> at the low level of the JOS kernel, is there that much to distinguish native
> threads and green threads? What benefit is there to the kernel implementing
> the threads rather than the VM? Explanations welcome ..

To the best of my knowledge, yes, there is a whole lot of difference. 
Using "green threads," or "simulated threads," it is (relatively)
straightforward to ensure that Java bytecodes are "atomic" with respect
to each other and with respect to hardware operations.  This simplifies
the writing of the JVM, especially with respect to the thread
synchronization primitives.  One never has to worry about pre-emption of
the C++ code which implements, well, just about everything in the JVM.

On the other hand, by using native threads, we can avail ourselves of
the CPU's (well, the x86 CPUs, anyway) ability to schedule threads via
interrupts (etc.), which will likely be faster and entail less overhead
than anything we can do via a polled, "is it time to switch threads
yet?" kind of top-level loop.  Based upon a whole 10 seconds of thought,
I'm thinking that this will have to happen prior to getting JIT
capability (assuming that we need JIT eventually).  I mean, once we
vector off to native code, that whole polling scheduler thing we're
using now pretty much doesn't work anymore.

> >With respect to design considerations, a couple of not-quite-typical
> >requirements:
> >
> >(1) Currently, decaf does not call destructors (and thence heap
> >deallocators)
> >everywhere it is possible to know that the memory object has
> instantaneously
> >become garbage.  Either Todd or I can track those down so you don't have
> to.
> >We
> >have, of late, become more conscientious about calling destructors.  Please
> >advise us if there is a suitable entry point in your conservative heap
> >implementation for us to mark a memory block as unused...
> 
> I hadn't considered calls to the heap to explicitly free memory, since you
> can't do it from Java, and that's what I was concentrating on. I think it
> would be helpful to null out pointers when they are known to be rubbish,
> even if I didn't provide a mechanism for explicit freeing.

That much, I think we do already.  Well, OK, we *try* to do it.  Well,
maybe, we try to *remember* to try to do it.  Seriously, it's your
call.  If you give it to us, we'll use it.  I'm sure there's more to it
than this (e.g., there's a school of thought that says don't free it
when you know it becomes garbage, because then you're paying the
overhead of GC/memory management in the user's time, instead of in the
GC's time).  Let me know what you think.

> >(5) Java requires that we call any "finalize" Java methods upon Java
> objects
> >prior to their being GC-ed/reclaimed.  Todd can perhaps shed more light
> upon
> >which context the methods must be executed in ...
> 
> Again, I've not considered this yet -- I'll have to come back to it after
> the thing actually manages to gc at all!

OK.  However, it might affect your design (e.g., some blocks can be
instantly reclaimed -- some others might have to go somewhere else (with
respect to Java code execution) to have their finalizers run).

> >> - Look at other types of gc: is generational gc useful for Java?
> >
> >Without having either a copying/compacting collector, I don't know right
> >now...
> 
> I hadn't read about HotSpot when I asked my question -- Sun certainly seem
> to think generational is good.

LispMs used to do this to great effect.

> >> My guiding light in all this has been "Garbage Collection : Algorithms
> for
> >> Automatic Dynamic Memory Management" by Richard Jones and Rafael Lins.
> >>
> >
> >An absolutely fabulous book -- read it cover-to-cover.  Please pay

Uh, that should've read "*I* read it cover-to-cover."  Whoops.  Didn't
mean to appear to be handing out reading assignments by Imperial Fiat. 
Sorry.

> >particular
> >attention to the brief bits about how Lisp Machines availed themselves of
> >the
> >special virtual memory hardware to increase performance (I do not have the
> >book
> >with me at work, but I recall finding some of these bits via the index).
> In
> >particular, I hope that we can scan pages BEFORE they have to get paged
> out,
> >as
> >part of the "regular" paging process, and reclaim instantly those pages
> >which
> >only contain garbage, and thus avoid the overhead of "throwing the page
> over
> >the
> >wall" and sleeping any threads at all.  This is supposed to be a Really Big
> >Win.
> 
> Yes. Because the gc is part of the kernel, I hope that eventually that we
> can work very closely with the the virtual memory system and take advantage
> of various gubbins in the memory mgt unit that are inaccessible to user
> processes.

There are also some weird things we can do by availing ourselves of the
x86's ability to trap accesses to pages that we've already scanned,
etc.  These seem to be useful for incremental GC, although I seem to
recall reading papers that said that it might not be such a Big Win. 
However, I have no problem with a stop-and-GC scheme at this point in
time.

> >I have other GC-related URLs, too, if you are interested...
> 
> One of the best sources I've discovered (only in the last day or two) is
> ftp://ftp.cs.utexas.edu/pub/garbage. bigsurv.ps is a survey of gc
> techniques - it covers a lot of the same ground as the Jones' book - and
> allocsrv.ps covers heap management.

Yeah, I've read those, too.  Lots of useful stuff in there.  Too bad not
many of the GC/DMA experts seem to agree with one another!

> Finally, a word of warning: what I've currently written is in C. This is for
> two reasons:
> 
> 1) I've never written any C++
> 2) I intended to try integrating it with Kaffe for testing purposes. (I'm
> not sure this is relevant now.)
> 
> I'll carry on in C until it's up and working. Then I'll try rewriting it in
> C++ -- should be a good way to learn ..

That's OK.  I'm assuming we can just recompile it with the C++ compiler
(it's ANSI C, right?) and link it on in.

With respect to schedule, when is the first likely time we can have a
simple allocate/deallocate-capable heap implementation, without the
conservative GC?  I'm not trying to lean on you, but we'll need
something Real Soon Now that will enable us to keep jjos+decaf up long
enough to do something interesting (right now we leak like a sieve
because we don't have a heap implementation at all).  I can always
kludge together, er, cons together, er, write a simple heap, but I'd
prefer not to if you've got something that'll be the right solution...

> Again, thanks for the warm welcome.

Looking forward to working with you...

-jm

-- 
==== John Morrison
==== MaK Technologies Inc.
==== 185 Alewife Brook Parkway, Cambridge, MA 02138
==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115
==== fax:617-876-9208
==== jm@mak.com



From George.Marrows@Smallworld.co.uk Tue, 3 Aug 1999 12:47:57 +0100
Date: Tue, 3 Aug 1999 12:47:57 +0100
From: George.Marrows@Smallworld.co.uk George.Marrows@Smallworld.co.uk
Subject: [JOS-Kernel] Garbage collection (was [JOS-Kernel] Re: [JOS-Admin] An idea for
 increasing the number of  code-writers)
 increasing the number of  code-writers)

	John --

> > >(2) The decaf JVM and the jjos nano/pico/femto/whatever kernel uses C++
> and
> > >dynamic memory allocation as well. Currently, both the jjos C++ objects
> and
> > >the
> > >Java objects (which are, after all, C++ objects as far as the JVM is
> > >concerned)
> > >are allocated out of the same heap.
> > 
> > I must admit I hadn't considered the heap requirements of the JVM and
> > kernel. I'll get to thinking about what this might mean for JJOS's gc.
> 
> Again, I'm thinking we can treat everything exactly the same.  There's a
> certain appeal to the economy of effort (especially when it's YOUR
> effort, not mine!  <== this is an attempt at humor).
> 
	[GAM]  Humour received and understood :-)

> To the best of my knowledge, yes, there is a whole lot of difference. 
> Using "green threads," or "simulated threads," it is (relatively)
> straightforward to ensure that Java bytecodes are "atomic" with respect
> to each other and with respect to hardware operations.  This simplifies
> the writing of the JVM, especially with respect to the thread
> synchronization primitives.  One never has to worry about pre-emption of
> the C++ code which implements, well, just about everything in the JVM.
> 
> On the other hand, by using native threads, we can avail ourselves of
> the CPU's (well, the x86 CPUs, anyway) ability to schedule threads via
> interrupts (etc.), which will likely be faster and entail less overhead
> than anything we can do via a polled, "is it time to switch threads
> yet?" kind of top-level loop.  Based upon a whole 10 seconds of thought,
> I'm thinking that this will have to happen prior to getting JIT
> capability (assuming that we need JIT eventually).  I mean, once we
> vector off to native code, that whole polling scheduler thing we're
> using now pretty much doesn't work anymore.
> 
	[GAM] I was aware of the synchronisation problems, which I would
have thought could be very unpleasant indeed. The benefits of interrupt
driven scheduling hadn't occurred to me. I guess another benefit of native
threads is the ability to make use of more than one processor in a
multi-processor box (though I imagine support for these is a low priority /
a long way off). I would still question whether the gains from native
threads will outweigh the pain of implementing them (both in terms of
reworking the kernel and putting in all the necessary synchronisation)?
[Please note that these comments are based on zero experience of
implementing operating systems and can therefore be safely ignored.]

> > I hadn't considered calls to the heap to explicitly free memory, since
> you
> > can't do it from Java, and that's what I was concentrating on. I think
> it
> > would be helpful to null out pointers when they are known to be rubbish,
> > even if I didn't provide a mechanism for explicit freeing.
> 
> That much, I think we do already.  Well, OK, we *try* to do it.  Well,
> maybe, we try to *remember* to try to do it.  Seriously, it's your
> call.  If you give it to us, we'll use it.  I'm sure there's more to it
> than this (e.g., there's a school of thought that says don't free it
> when you know it becomes garbage, because then you're paying the
> overhead of GC/memory management in the user's time, instead of in the
> GC's time).  Let me know what you think.
> 
	[GAM]  With the heap as it currently is, there's nothing I can do
with the information that a piece of memory is free *now* -- this info is
gathered during the mark phase. So carry on nulling out pointers for now. If
it seems like there would be useful gains from doing something sensible with
explicit frees, I'll try to work that into a later version.


> > >> My guiding light in all this has been "Garbage Collection :
> Algorithms
> > for
> > >> Automatic Dynamic Memory Management" by Richard Jones and Rafael
> Lins.
> > >>
> > >
> > >An absolutely fabulous book -- read it cover-to-cover.  Please pay
> 
> Uh, that should've read "*I* read it cover-to-cover."  Whoops.  Didn't
> mean to appear to be handing out reading assignments by Imperial Fiat. 
> Sorry.
> 
	[GAM]  The Imperial Fiat interpretation didn't occur to me at all.
The Emperor gives good advice though!

> > Yes. Because the gc is part of the kernel, I hope that eventually that
> we
> > can work very closely with the the virtual memory system and take
> advantage
> > of various gubbins in the memory mgt unit that are inaccessible to user
> > processes.
> 
> There are also some weird things we can do by availing ourselves of the
> x86's ability to trap accesses to pages that we've already scanned,
> etc.  These seem to be useful for incremental GC, although I seem to
> recall reading papers that said that it might not be such a Big Win. 
> However, I have no problem with a stop-and-GC scheme at this point in
> time.
> 
	[GAM]  The VM tricks also seem useful when doing generational GC --
they can be used to implement a write barrier to track pointers to younger
generations.

> That's OK.  I'm assuming we can just recompile it with the C++ compiler
> (it's ANSI C, right?) and link it on in.
> 
	[GAM] Yes it should compile fine with g++ (I'll check this).

> With respect to schedule, when is the first likely time we can have a
> simple allocate/deallocate-capable heap implementation, without the
> conservative GC?  I'm not trying to lean on you, but we'll need
> something Real Soon Now that will enable us to keep jjos+decaf up long
> enough to do something interesting (right now we leak like a sieve
> because we don't have a heap implementation at all).  I can always
> kludge together, er, cons together, er, write a simple heap, but I'd
> prefer not to if you've got something that'll be the right solution...
> 
	[GAM]  Apart from the lack of support for large objects (well, not
so large actually: >1/2 page) and no way of handling mark stack overflow,
it's pretty much getting there. (I managed to get it to allocate and
conservatively scan some noddy C structures at the weekend.) As mentioned
above, I've haven't put any thought into handling explicit frees, and I'm
loath to spend time turning it into an allocate/deallocate heap, cos that
will inevitably detract from progress elsewhere. I would very much hope to
have something that GCs correctly (albeit slowly) by, say, the 14th of this
month. This would include the large object support, but maybe not deal with
the mark stack overflow. If I haven't managed to get this far by then, I'll
happily hand over the code for completion by people with more time /
speedier coding skills. I hope this is a usable timescale for you and Todd.
In the meantime, it would be very useful if you could go through the kernel
and decaf and identify the roots for garbage collection. Issues I foresee
with this: do we need to look in registers; how to find top and bottom of
the native code stack for scanning.


	-- George



From toaster@pvv.ntnu.no Tue, 03 Aug 1999 14:28:00 +0200
Date: Tue, 03 Aug 1999 14:28:00 +0200
From: Thomas Oesterlie toaster@pvv.ntnu.no
Subject: [JOS-Kernel] Java Java Compiler

Hi,

Just a quick question: does anyone know if there exists a Java Compiler
that runs in the JRE?

------------------------------------------------------------------
Thomas Oesterlie                              toaster@pvv.ntnu.no 
Creative consultant,                    www.pvv.ntnu.no/~toaster/
Utoastria Productions                      www.come.to/utoastria/
------------------------------------------------------------------



From jm@mak.com Tue, 03 Aug 1999 14:02:33 -0400
Date: Tue, 03 Aug 1999 14:02:33 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Garbage collection (was [JOS-Kernel] Re: [JOS-Admin] An idea for
 increasing the number of  code-writers)
 increasing the number of  code-writers)

Hi;

George.Marrows@Smallworld.co.uk wrote:
>         [GAM] I was aware of the synchronisation problems, which I would
> have thought could be very unpleasant indeed. The benefits of interrupt
> driven scheduling hadn't occurred to me. I guess another benefit of native
> threads is the ability to make use of more than one processor in a
> multi-processor box (though I imagine support for these is a low priority /
> a long way off). I would still question whether the gains from native
> threads will outweigh the pain of implementing them (both in terms of
> reworking the kernel and putting in all the necessary synchronisation)?
> [Please note that these comments are based on zero experience of
> implementing operating systems and can therefore be safely ignored.]

I think we're on the same page.  Basically, we'll get green threads running, and
if native threads is the next-hottest fire, then we'll put that one out.

>         [GAM]  With the heap as it currently is, there's nothing I can do
> with the information that a piece of memory is free *now* -- this info is
> gathered during the mark phase. So carry on nulling out pointers for now. If
> it seems like there would be useful gains from doing something sensible with
> explicit frees, I'll try to work that into a later version.

OK.  Nulling-out-pointers it is...

>         [GAM]  The VM tricks also seem useful when doing generational GC --
> they can be used to implement a write barrier to track pointers to younger
> generations.

Exactly my understanding.

> > That's OK.  I'm assuming we can just recompile it with the C++ compiler
> > (it's ANSI C, right?) and link it on in.
> >
>         [GAM] Yes it should compile fine with g++ (I'll check this).

OK.  Just let us all know!

>         [GAM]  Apart from the lack of support for large objects (well, not
> so large actually: >1/2 page) and no way of handling mark stack overflow,
> it's pretty much getting there. (I managed to get it to allocate and
> conservatively scan some noddy C structures at the weekend.) As mentioned
> above, I've haven't put any thought into handling explicit frees, and I'm
> loath to spend time turning it into an allocate/deallocate heap, cos that
> will inevitably detract from progress elsewhere. I would very much hope to
> have something that GCs correctly (albeit slowly) by, say, the 14th of this
> month. This would include the large object support, but maybe not deal with

That's great!  Hopefully, we'll have something with which it can be integrated
(Todd and I can thus be advised to be sure to finish anything we start by
roughly the 14th).

> the mark stack overflow. If I haven't managed to get this far by then, I'll

Yeah, I think we're OK there.  Any improved marking-space improvements can
certainly wait.

> happily hand over the code for completion by people with more time /
> speedier coding skills. I hope this is a usable timescale for you and Todd.

You betcha.  It's a lot faster than either of us can come up with one...

> In the meantime, it would be very useful if you could go through the kernel
> and decaf and identify the roots for garbage collection. Issues I foresee

OK.  We'll start that effort...

> with this: do we need to look in registers; how to find top and bottom of
> the native code stack for scanning.

I'm thinking with green threads we won't have to, but that's based upon a whole
10 seconds of thought...  Todd, what sayest thou?

BTW, I'll be out of touch through Wednesday night at the earliest...

Thanks for the help!

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From scode@scode.webprovider.com Tue, 3 Aug 1999 22:56:58 +0200
Date: Tue, 3 Aug 1999 22:56:58 +0200
From: scode@scode.webprovider.com scode@scode.webprovider.com
Subject: [JOS-Kernel] Java Java Compiler

--cz6wLo+OExbGG7q/
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: quoted-printable

> Just a quick question: does anyone know if there exists a Java Compiler
> that runs in the JRE?

Yes; the javac that comes with Sun's JDK.

--=20
/ Peter Schuller

PGP userID: 0x5584BD98 or 'Peter Schuller <scode@scode.webprovider.com>'
Key retrival: Send an E-Mail to scode-getpgpkey@scode.webprovider.com
E-Mail: scode@scode.webprovider.com Web: http://hem.passagen.se/petersch

--cz6wLo+OExbGG7q/
Content-Type: application/pgp-signature

-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 5.0i for non-commercial use
MessageID: pU9Rm+iUXK5brrNx7mtTW+gJMi3YqPU0

iQA/AwUBN6dXmcBfJ1FVhL2YEQLUXgCgnFNpTB1DrbFJknAJVIwRDaDs+F0AnRvD
ZrgP99/ReDus8Gb8XcM5g82+
=ipnp
-----END PGP SIGNATURE-----

--cz6wLo+OExbGG7q/--



From tmiller@haverford.edu Tue, 3 Aug 1999 21:02:58 -0400 (EDT)
Date: Tue, 3 Aug 1999 21:02:58 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Garbage collection

On Tue, 3 Aug 1999, John Morrison wrote:
> > do we need to look in registers; how to find top and bottom of
> > the native code stack for scanning.
> 
> I'm thinking with green threads we won't have to, but that's based upon a whole
> 10 seconds of thought...  Todd, what sayest thou?

	The VM should be able to pass the gc back all the information it
wants, though I don't know off hand what that information might be.
These functions (probably) need to be in place to allow interaction "over
the wall" to Java GC anyway.

-_Quinn




From toaster@pvv.ntnu.no Wed, 04 Aug 1999 08:28:22 +0200
Date: Wed, 04 Aug 1999 08:28:22 +0200
From: Thomas Oesterlie toaster@pvv.ntnu.no
Subject: [JOS-Kernel] Java Java Compiler

>> Just a quick question: does anyone know if there exists a Java Compiler
>> that runs in the JRE?
>
>Yes; the javac that comes with Sun's JDK.

<GRIN> My fault. The question should've been "a free, open source Java Compiler
that runs in the JRE"? In this case I mean "free" as in licensing under the GPL
or similar license. As far as I'm concerned, the Java license isn't free
enough.

------------------------------------------------------------------
Thomas Oesterlie                              toaster@pvv.ntnu.no 
Creative consultant,                    www.pvv.ntnu.no/~toaster/
Utoastria Productions                      www.come.to/utoastria/
------------------------------------------------------------------



From max@immsp.kiev.ua Wed, 4 Aug 1999 11:32:27 +0300
Date: Wed, 4 Aug 1999 11:32:27 +0300
From: Maxim Kizub max@immsp.kiev.ua
Subject: [JOS-Kernel] Java Java Compiler

> >> Just a quick question: does anyone know if there exists a Java Compiler
> >> that runs in the JRE?
> >
> >Yes; the javac that comes with Sun's JDK.
>
> <GRIN> My fault. The question should've been "a free, open source Java
Compiler
> that runs in the JRE"? In this case I mean "free" as in licensing under
the GPL
> or similar license. As far as I'm concerned, the Java license isn't free
> enough.

http://forestro.com/kiev

actually, it's a java extension. But it compiles normal java sources too.






From scode@scode.webprovider.com Wed, 4 Aug 1999 12:39:04 +0200
Date: Wed, 4 Aug 1999 12:39:04 +0200
From: scode@scode.webprovider.com scode@scode.webprovider.com
Subject: [JOS-Kernel] GC and swap space

--e5bfZ/T2xnjpUIbw
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: quoted-printable

Hi!

I'm curious; has any thought been given to how garbage collection will work
on a system that uses swap space (i.e. 99% of them)?

I'm in *NO* way an expert on GC (I've only started reading that bigsurv.ps
that someone mentioned), but it seems to be that it will be very hard to
to implement a garbage collector capable of performing GC on a system half
of whose virtual RAM consists of swap space. It looks to me like at least
occatoinal thrashing is unavoidable.

Is it even *possible*? Does JavaOS do it, and if so, how?

Just curious...

--=20
/ Peter Schuller

PGP userID: 0x5584BD98 or 'Peter Schuller <scode@scode.webprovider.com>'
Key retrival: Send an E-Mail to scode-getpgpkey@scode.webprovider.com
E-Mail: scode@scode.webprovider.com Web: http://hem.passagen.se/petersch

--e5bfZ/T2xnjpUIbw
Content-Type: application/pgp-signature

-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 5.0i for non-commercial use
MessageID: r/DvwaI2mlcGwZkNoBtHEKkFG2ylXBBA

iQA/AwUBN6gYR8BfJ1FVhL2YEQIeJwCfdctWz/3Y77wxNl51Q9FQS8tAsiUAoOEI
maqoPYdb/g8VajdkSSCwgnZN
=RXH5
-----END PGP SIGNATURE-----

--e5bfZ/T2xnjpUIbw--



From George.Marrows@Smallworld.co.uk Wed, 4 Aug 1999 14:22:30 +0100
Date: Wed, 4 Aug 1999 14:22:30 +0100
From: George.Marrows@Smallworld.co.uk George.Marrows@Smallworld.co.uk
Subject: [JOS-Kernel] GC and swap space

Hi Peter --

As I understand it (and my knowledge only stretches as far as the bigsurv.ps
paper and the Richard Jones Garbage Collection book), the way a garbage
collector interacts with virtual memory is an issue whether it's at the OS
level (JJOS, JavaOS) or at the application level ('normal' Java running on
existing OS). However, as you'll in read in bigsurv.ps, the GC community is
well aware of these issues and modern garbage collectors are designed with
attention given to minimising swapping. Some types of moving GC can even
improve VM performance, by grouping frequently accessed objects together on
the same page, thus decreasing the size of the working set. To move down a
level again, there's quite a bit of space in both bigsurv.ps and the book
given to looking at how GC interacts with the processor's cache.

For the record, the GC I'm working on at the moment doesn't do anything
clever to avoid swapping - but that's OK, because JJOS doesn't do swapping
yet :-)

-- George

> -----Original Message-----
> From:	scode@scode.webprovider.com [SMTP:scode@scode.webprovider.com]
> Sent:	Wednesday, August 04, 1999 11:39
> To:	kernel@jos.org
> Subject:	[JOS-Kernel] GC and swap space
> 
> Hi!
> 
> I'm curious; has any thought been given to how garbage collection will
> work
> on a system that uses swap space (i.e. 99% of them)?
> 
> I'm in *NO* way an expert on GC (I've only started reading that bigsurv.ps
> that someone mentioned), but it seems to be that it will be very hard to
> to implement a garbage collector capable of performing GC on a system half
> of whose virtual RAM consists of swap space. It looks to me like at least
> occatoinal thrashing is unavoidable.
> 
> Is it even *possible*? Does JavaOS do it, and if so, how?
> 
> Just curious...
> 
> -- 
> / Peter Schuller
> 
> PGP userID: 0x5584BD98 or 'Peter Schuller <scode@scode.webprovider.com>'
> Key retrival: Send an E-Mail to scode-getpgpkey@scode.webprovider.com
> E-Mail: scode@scode.webprovider.com Web: http://hem.passagen.se/petersch



From George.Marrows@Smallworld.co.uk Wed, 4 Aug 1999 14:48:54 +0100
Date: Wed, 4 Aug 1999 14:48:54 +0100
From: George.Marrows@Smallworld.co.uk George.Marrows@Smallworld.co.uk
Subject: [JOS-Kernel] Garbage collection

	John / Todd - 

> > > That's OK.  I'm assuming we can just recompile it with the C++
> compiler
> > > (it's ANSI C, right?) and link it on in.
> > >
> >         [GAM] Yes it should compile fine with g++ (I'll check this).
> 
> OK.  Just let us all know!
> 
	[GAM]  Hmm.. plenty of warnings about doing arithmetic with void*.
I'll sort them out.

> That's great!  Hopefully, we'll have something with which it can be
> integrated
> (Todd and I can thus be advised to be sure to finish anything we start by
> roughly the 14th).
> 
	[GAM]  I propose to put the gc code in a separate directory:
common/nativecode/gc. How does that sound? It's currently in
common/nativecode, but it bloats that directory somewhat. Now I've just got
to sort out the accursed makefile :-(

> > In the meantime, it would be very useful if you could go through the
> kernel
> > and decaf and identify the roots for garbage collection. Issues I
> foresee
> 
> OK.  We'll start that effort...
> 
	[GAM]  I'll see if I can work out a modified interface for jbheap
earlier than the 14th. It needs to allow the rest of JJOS pass back
information about roots and kick off an on-demand garbage collect, in
addition to jbheap's current allocate functionality.

> > with this: do we need to look in registers; how to find top and bottom
> of
> > the native code stack for scanning.
> 
> I'm thinking with green threads we won't have to, but that's based upon a
> whole
> 10 seconds of thought...  Todd, what sayest thou?
> 
	[GAM]  But if I'm also doing gc for the C++ code, and the only ref
to some C++ heap object is in a local variable somewhere on the native code
stack, I'll need to find that ref. Otherwise that object is gone (or rather,
the memory for it doesn't get marked as in use and could end up being reused
for something else, which in turn could lead to some very nasty bugs).

	-- George




From draft@fear.ch Wed, 4 Aug 1999 19:05:45 +0200 (CEST)
Date: Wed, 4 Aug 1999 19:05:45 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] the vga driver is working now

Hi

I found the problem with the vga registers. It was a bug in the in8 (in32)
method. I fixed it, and now the vga driver works. 640x480x16 (YES!!).

Now we should start with a generic device loader (what do you think,
Hilary? The shark examples are quite good). I'm also very interested in
writing an IDE driver.

well, I've made some modifications in the source code, but I don't know
how to upload these changes. Can anybody help me?

another speed question: write8 is much faster than write 32 why? I wanted
to scrub the vga memory with write32, but it was too slow.


Regards,

Thomas




From tmiller@haverford.edu Wed, 4 Aug 1999 16:50:07 -0400 (EDT)
Date: Wed, 4 Aug 1999 16:50:07 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Garbage collection

> 	[GAM]  Hmm.. plenty of warnings about doing arithmetic with void*.
> I'll sort them out.

	You should be able to turn those warnings off on the commandline
for gcc... I think it's just "poor form" to do void* arithmetic in C++.

> 	[GAM]  I propose to put the gc code in a separate directory:
> common/nativecode/gc. How does that sound? It's currently in
> common/nativecode, but it bloats that directory somewhat. Now I've just got
> to sort out the accursed makefile :-(

	Yeah, the new directory is fine by me.  And the Makefiles are most
definitely accursed, but I haven't been able to come up with anything
better.  If you do, please share. :)

-_Quinn




From hilarycheng@usa.net Thu, 05 Aug 1999 12:33:53 +0800
Date: Thu, 05 Aug 1999 12:33:53 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] the vga driver is working now

Hi ,

Thomas, It should be better to keep discuission in Arch. :p


>
> I found the problem with the vga registers. It was a bug in the in8 (in32)
> method. I fixed it, and now the vga driver works. 640x480x16 (YES!!).

:o, GREAT! It is enough. Since All VGA Card supports this mode!
(If user is using EGA/CGA/HGA, we can't help............:p)

>
> Now we should start with a generic device loader (what do you think,
> Hilary? The shark examples are quite good). I'm also very interested in
> writing an IDE driver.

IMO, Shark provide a Generic Graphical Interface for drawing. We should
think about making a Generic Device Loader and then we make a Generic
Graphics Adaptor Driver.

>
> well, I've made some modifications in the source code, but I don't know
> how to upload these changes. Can anybody help me?

I think we should use CVS. But I donno how to operate the CVS and we got
no right to access current JJOS CVS.

>
> another speed question: write8 is much faster than write 32 why? I wanted
> to scrub the vga memory with write32, but it was too slow.

Would u mind pack several files to me that allows me to turn JOS to VGA Mode ?

Also, I found a Pascal Program that contains lots of SVGA Information using
VGA
Register. It called "WhatVGA". It contains lots of drivers. I think it can
cover more
than 50% of current Adaptor. We can get those information and make the drivers

for the users.

Regards,

Hilary




From jm@mak.com Thu, 05 Aug 1999 09:22:26 -0400
Date: Thu, 05 Aug 1999 09:22:26 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] the vga driver is working now

Hello Thomas (et al);

Thomas Bocek wrote:
> I found the problem with the vga registers. It was a bug in the in8 (in32)
> method. I fixed it, and now the vga driver works. 640x480x16 (YES!!).

Hey, this is great (except for my embarrassment with respect to the bug in
in8/in32)!

> Now we should start with a generic device loader (what do you think,
> Hilary? The shark examples are quite good). I'm also very interested in
> writing an IDE driver.

The following paragraph is based upon only what I can remember from a cursory
reading of both the "Inside JavaOS" book and the IBM "JavaOS for Business"
documentation (neither is in front of me now), so there's a distinct possibility
that I can be really mistaken:

JavaOS has this concept where they (apparently) unify the concept of a registry
and the traditional UNIX "/dev" device entries, and driver entries, too.  This
Java-object tree gets populated when the device discovery is done at boot time,
and then drivers are also elements of the tree.  Also, user preferences are
stored the same way somehow (serialization?).  Finally, they seem to one-up the
concept of a registry in that, when a member of the tree is updated (e.g., a
hot-swappable device is discovered, or a new driver is loaded), then other Java
objects can get notified, so they can remain in synchrony with the database.  It
seems neat and elegant (which implies that maybe it'll be simpler to
implement?), and I'm thinking we should clone it.

(With respect to device-discovery, I have some pretty good documentation on the
BIOS data areas, in which the BIOS stores the results of its device-probing
activities.  Now that we can read physical memory, we can stroll through this
area and find out exactly what devices are in the box.  I'm more than willing to
help out here...)

With respect to Shark Windows, the author, Michael Emmel (whom I have blind
cc-ed upon this response so that he can know what we're up to but will not get
inundated with pleas for help), has been kind enough to indicate a willingness
to help us out (but I have been remiss in following up on his generous offer).

> well, I've made some modifications in the source code, but I don't know
> how to upload these changes. Can anybody help me?

For expediency's sake, how about you send me the bug fixes for the existing
native code and I'll plug them in?  Either diffs with context or just the new
files in their entirety will do...  For the new Java source, either Todd or I
can check it in for you -- I'm getting the feeling that we'll need to modify the
CVS access lists (aren't you?)...  Who's in charge of the CVS access lists,
anyways?

> another speed question: write8 is much faster than write 32 why? I wanted
> to scrub the vga memory with write32, but it was too slow.

If I had to guess (and I can only hazard a guess at this point), I'd say that
it's maybe because the write32 stuff is Java 64-bit based so that we can avoid
sign-extension problems (maybe we really don't have to do that -- but I'll have
to think a little bit harder about that -- Pat had some thoughts he posted
earlier on this issue...).

Fabulous work -- congratulations!!

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From jm@mak.com Thu, 05 Aug 1999 09:35:05 -0400
Date: Thu, 05 Aug 1999 09:35:05 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Garbage collection

Hi George (and others);

George.Marrows@Smallworld.co.uk wrote:
>         [GAM]  Hmm.. plenty of warnings about doing arithmetic with void*.
> I'll sort them out.

Yeah, this particular embarrassment is my fault, not Todd's.  It worked, so I
focussed upon new functionality, not cleaning it up.  If you have already done
so, please let me know.  If not, this would be a good time to also put in Robert
Fitzsimons' (Hi, Robert!) code to enable booting via GRUB (I seem to recall
that, amongst the worst offenders in generating warnings, was the code which
looked for the Etherboot-specific data structures located in various bits of
memory...)

>         [GAM]  I propose to put the gc code in a separate directory:
> common/nativecode/gc. How does that sound? It's currently in
> common/nativecode, but it bloats that directory somewhat. Now I've just got
> to sort out the accursed makefile :-(

OK.  Works for me.  Sorry about the makefile trouble.  If there's a better way
to do this, I'd sure be interested...  I think we have similar problems in the
bytecode directory, in that we have no platform-specific bytecode files (e.g.,
VGA driver) yet.

Hmm... this also brings up the issue of debugging this stuff under UNIX.  Should
we try and build the host version with libVGA (or whatever it's called)? 
libGGI?  I don't know either of them.  Anybody out there with any ideas ("Hi"
and "help," UI@jos.org guys -- check out recent kernel postings about a VGA
driver working)...

>         [GAM]  I'll see if I can work out a modified interface for jbheap
> earlier than the 14th. It needs to allow the rest of JJOS pass back
> information about roots and kick off an on-demand garbage collect, in
> addition to jbheap's current allocate functionality.

Fabulous!  I look forward to this with great anticipation.  It'll enable us to
keep jjos+decaf running long enough to be interesting!

> > > with this: do we need to look in registers; how to find top and bottom
> > of
> > > the native code stack for scanning.
> >
> > I'm thinking with green threads we won't have to, but that's based upon a
> > whole
> > 10 seconds of thought...  Todd, what sayest thou?
> >
>         [GAM]  But if I'm also doing gc for the C++ code, and the only ref
> to some C++ heap object is in a local variable somewhere on the native code
> stack, I'll need to find that ref. Otherwise that object is gone (or rather,
> the memory for it doesn't get marked as in use and could end up being reused
> for something else, which in turn could lead to some very nasty bugs).

The location of the sole native-code stack (sole because we're not doing
multithreading yet in the kernel) is easily-computable at the point where you
need to scan for the GC roots.  Right now (I don't have the sources in front of
me, so this is from memory), I think there's a magic value that gets crammed
into the stack pointer register (2MB?), but I don't think this is saved into any
easily-accessible-from-C++ variable, although the heap-initialization code
*does* avoid stepping on the stack.  Sorry...  I can fix this...  Really!

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From jm@mak.com Thu, 05 Aug 1999 09:53:48 -0400
Date: Thu, 05 Aug 1999 09:53:48 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Found my URL for IBM "JavaOS for Business" documentation...

Hi All;

Here is the URL for the "JavaOS for Business" documentation!
	http://www.ibm.com/java/javaos/library/
I can't *believe* I misplaced this URL.

Of particular note at this point, the "JavaOS for Business Reference Manual"
discusses (pretty much) everything, including: device discovery, the Java System
Database (which I alluded to in my eariler email), and lots of other things... 
The "Device Driver Guide" might give enough of the APIs for us to be able to
clone that part of JavaOS.

There are also lots of other goodies here.  (I think I see tail-lights through
the fog!)

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From scode@scode.webprovider.com Thu, 5 Aug 1999 22:35:07 +0200
Date: Thu, 5 Aug 1999 22:35:07 +0200
From: scode@scode.webprovider.com scode@scode.webprovider.com
Subject: [JOS-Kernel] Garbage collection

--1E1Oui4vdubnXi3o
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: quoted-printable

> Hmm... this also brings up the issue of debugging this stuff under UNIX. =
 Should
> we try and build the host version with libVGA (or whatever it's called)?

I think you mean SVGAlib. If so, I'd say it's a good idea because SVGAlib is
extremely easy to use (as in, there's not much code one would have to write=
).

Hmm. Is there anyway one can help with these things (writing drivers etc) w=
ithout
acutally having JJOS/decaf up-and-running? Is the Linux-host working?

My problem is that I don't any a computer I can play with (as in screwing
around with booting stuff that might not even work etc...), so I can't do
much unless I can do it in Linux :)

--=20
/ Peter Schuller

PGP userID: 0x5584BD98 or 'Peter Schuller <scode@scode.webprovider.com>'
Key retrival: Send an E-Mail to scode-getpgpkey@scode.webprovider.com
E-Mail: scode@scode.webprovider.com Web: http://hem.passagen.se/petersch

--1E1Oui4vdubnXi3o
Content-Type: application/pgp-signature

-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 5.0i for non-commercial use
MessageID: B31B9PF2OuqErzL65wlaxcrkCGhnxMHK

iQA/AwUBN6n1esBfJ1FVhL2YEQKY+QCfR7sw2d+/anB7wSudMBmIcliDIbQAnRQ6
W9qVA4O5RORVNWzDuaHuisSJ
=J1LA
-----END PGP SIGNATURE-----

--1E1Oui4vdubnXi3o--



From tmiller@haverford.edu Thu, 5 Aug 1999 19:21:51 -0400 (EDT)
Date: Thu, 5 Aug 1999 19:21:51 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] the vga driver is working now

> Who's in charge of the CVS access lists, anyways?

	Whichever of the four of us (Heise, you, myself, Fitzsimmons) is
on the jos.org server at the time, I suspect.  We all have privs (or
should) to play with the cvs passwd & modules file, which is all that we
should need.

	And, let me second JM's 'fabulous work' accolade.

-_Quinn




From tmiller@haverford.edu Thu, 5 Aug 1999 19:28:59 -0400 (EDT)
Date: Thu, 5 Aug 1999 19:28:59 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Garbage collection

> Hmm. Is there anyway one can help with these things (writing drivers etc) without
> acutally having JJOS/decaf up-and-running? Is the Linux-host working?

	It'll run the java code, but the hardware-access calls will halt
the thread on an unavailable method error (IIRC). If anyone knows kernel
hacking, I'd be more than happy to drop a kernel module into the decaf/JJOS
source distribution that we could redirect these calls to.  Or, if you're not
as interested in driver development, SVGAlib could function as the back-end
of the VGA read/writes.

-_Quinn




From jm@mak.com Thu, 05 Aug 1999 20:18:14 -0400
Date: Thu, 05 Aug 1999 20:18:14 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Garbage collection

Hi;

scode@scode.webprovider.com wrote:
> 
> > Hmm... this also brings up the issue of debugging this stuff under UNIX.  Should
> > we try and build the host version with libVGA (or whatever it's called)?
> 
> I think you mean SVGAlib. If so, I'd say it's a good idea because SVGAlib is
> extremely easy to use (as in, there's not much code one would have to write).

At least writing windowing software would be possible, then...

> Hmm. Is there anyway one can help with these things (writing drivers etc) without
> acutally having JJOS/decaf up-and-running? Is the Linux-host working?

Well, "real" drivers will be impossible to do under Linux.  Perhaps we can
resurrect Robert's GRUB work...  Would it be OK if you could recompile the
jjos+decaf "kernel" and reboot your Linux box?  It would be tedious, but it
would be workable...

> My problem is that I don't any a computer I can play with (as in screwing
> around with booting stuff that might not even work etc...), so I can't do
> much unless I can do it in Linux :)

How about doing second-tier work?  Like, filesystem implementations?  I think
maybe we could use "raw" disk I/O (I seem to recall something about this being
possible in Linux -- bypassing the kernel caches...).  What would be necessary
to pull this off is arch-specific bytecode (we can already do arch-specific
native code).

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From tmiller@haverford.edu Thu, 5 Aug 1999 21:14:23 -0400 (EDT)
Date: Thu, 5 Aug 1999 21:14:23 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] work on decaf

	Finally got some time to work on decaf today.  It looks like I
neglected to implement support for synchronized methods when I
implemented the monitor* bytecodes.  This one will reqire a bit of
brain sweat.  Does anyone have an opinion in which frame the monitor
should be acquired (and the thread slept, if necessary)?  It would
probably be easiest to wait on the invoking thread...

-_Quinn




From scode@scode.webprovider.com Sat, 7 Aug 1999 18:42:24 +0200
Date: Sat, 7 Aug 1999 18:42:24 +0200
From: scode@scode.webprovider.com scode@scode.webprovider.com
Subject: [JOS-Kernel] Driver writing (was: Re: [JOS-Kernel] Garbage collection)

--TB36FDmn/VVEgNH/
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: quoted-printable

> > Hmm. Is there anyway one can help with these things (writing drivers et=
c) without
> > acutally having JJOS/decaf up-and-running? Is the Linux-host working?
>=20
> Well, "real" drivers will be impossible to do under Linux.

Yes, some of them. The graphics stuff can be done with SVGAlib, as mentioned
(although it will require root access).

>Perhaps we can
> resurrect Robert's GRUB work...  Would it be OK if you could recompile the
> jjos+decaf "kernel" and reboot your Linux box?  It would be tedious, but =
it
> would be workable...

As in pluging something into the Linux kernel? Modules can be added at boot
time, if that's what you're refering to.

But; don't go to any trouble because of me - I'm not experienced in driver
development and such, so I can't really promise I'll deliver.

> How about doing second-tier work?  Like, filesystem implementations?

Yes, that's a good possiblity. ext2fs would be a good starting point. I
might even learn something in the process :)

(didn't someone write a FAT implementation a long time ago? I think I've
seen it on the Wiki ages ago when I was new to the project)

>I think
> maybe we could use "raw" disk I/O (I seem to recall something about this =
being
> possible in Linux -- bypassing the kernel caches...).

It is, but I'm not sure how yet. I'll try to find out... hopefully one
won't need a 2.2 kernel (I'm on 2.0).

>What would be necessary
> to pull this off is arch-specific bytecode (we can already do arch-specif=
ic
> native code).

Hmm. You mean some sort of alternative (with less overhead) to JNI? Beats
me. But I guess it needs to be done. How much overheard *is* involved in
JNI? Doing JNI method calls for every disk access might become slow pretty
quickly, even with caching. Or am I misstaken?

--=20
/ Peter Schuller

PGP userID: 0x5584BD98 or 'Peter Schuller <scode@scode.webprovider.com>'
Key retrival: Send an E-Mail to scode-getpgpkey@scode.webprovider.com
E-Mail: scode@scode.webprovider.com Web: http://hem.passagen.se/petersch

--TB36FDmn/VVEgNH/
Content-Type: application/pgp-signature

-----BEGIN PGP SIGNATURE-----
Version: PGPfreeware 5.0i for non-commercial use
MessageID: U4PAqV4unWBkgf1DhJeqyZc4UVgYJ+4X

iQA/AwUBN6xh7sBfJ1FVhL2YEQJv5wCghQIE2J9rI7eaxQa1/LDrff2Lmr4AoLYB
PNCArrKWn1X3LXoZQIDprKe2
=+UbC
-----END PGP SIGNATURE-----

--TB36FDmn/VVEgNH/--



From jm@mak.com Sat, 07 Aug 1999 13:47:23 -0400
Date: Sat, 07 Aug 1999 13:47:23 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Driver writing (was: Re: [JOS-Kernel] Garbage collection)

Hi;

Note to Thomas (et al); I plan to check his fixes in today ...

scode@scode.webprovider.com wrote:
> >Perhaps we can
> > resurrect Robert's GRUB work...  Would it be OK if you could recompile the
> > jjos+decaf "kernel" and reboot your Linux box?  It would be tedious, but it
> > would be workable...
> 
> As in pluging something into the Linux kernel? Modules can be added at boot
> time, if that's what you're refering to.

Actually, using GRUB you could do single-host (no Etherboot)
development...  You'd build a new jjos+decaf image in GRUB format, then
reboot your Linux box to boot the jjos+decaf ...  more tedious than
using Etherboot, but then one could make do with just a single box...

> > How about doing second-tier work?  Like, filesystem implementations?
> 
> Yes, that's a good possiblity. ext2fs would be a good starting point. I
> might even learn something in the process :)
> 
> (didn't someone write a FAT implementation a long time ago? I think I've
> seen it on the Wiki ages ago when I was new to the project)

Hmm.. can't recall...

> >I think
> > maybe we could use "raw" disk I/O (I seem to recall something about this being
> > possible in Linux -- bypassing the kernel caches...).
> 
> It is, but I'm not sure how yet. I'll try to find out... hopefully one
> won't need a 2.2 kernel (I'm on 2.0).

OK.  Let me know what we can do...

> >What would be necessary
> > to pull this off is arch-specific bytecode (we can already do arch-specific
> > native code).
> 
> Hmm. You mean some sort of alternative (with less overhead) to JNI? Beats
> me. But I guess it needs to be done. How much overheard *is* involved in
> JNI? Doing JNI method calls for every disk access might become slow pretty
> quickly, even with caching. Or am I misstaken?

Well, that's kind of what we're doing now...  (actually, we're doing
stuff that's even slower because we look up methods in a linear
fashion)...

-jm (in the midst of a proposal crisis)

-- 
==== John Morrison ==== jm@mak.com == http://www.mak.com/welcome.html
==== MaK Technologies Inc., 185 Alewife Brook Parkway, Cambridge, MA
02138
==== vox:617-876-8085 x115
==== fax:617-876-9208



From onewith1@flash.net Sat, 7 Aug 1999 15:11:13 -0500
Date: Sat, 7 Aug 1999 15:11:13 -0500
From: Matt Albrecht onewith1@flash.net
Subject: [JOS-Kernel] Driver writing

Hello

-----Original Message-----
From: John Morrison <jm@mak.com>
To: kernel@jos.org <kernel@jos.org>
Date: Saturday, August 07, 1999 12:56 PM
Subject: Re: [JOS-Kernel] Driver writing (was: Re: [JOS-Kernel] Garbage
collection)



>> > How about doing second-tier work?  Like, filesystem implementations?
>>
>> Yes, that's a good possiblity. ext2fs would be a good starting point. I
>> might even learn something in the process :)
>>
>> (didn't someone write a FAT implementation a long time ago? I think I've
>> seen it on the Wiki ages ago when I was new to the project)
>
>Hmm.. can't recall...

Yes, there was work done on this. Last I remember it was about a year ago.
I think that if we are going to do file system stuff, the best way to start
is have "virtual/embedded file systems", where one file system is stored as
a big file in the parent file system.  This way we don't tromp on the user's
host system.  It would also enable us to easily build upon other file
systems (like having a FAT-16 system, with a ZIP compression system above
that, and above that one is a ext2fs), and also have RAM disks.

This would mean publishing a file type with a raw disk I/O interface.  Each
disk device (including virtual device for file system and RAM) would need an
implementation of this type, becoming the driver.

-Matt






From ryan@whitewolf.com.au Mon, 09 Aug 1999 11:23:25 +1000
Date: Mon, 09 Aug 1999 11:23:25 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] Re: [JOS-Arch] Re: [JOS-Kernel] the vga driver is working now

Hilary Cheng wrote:

> I think we should use CVS. But I donno how to operate the CVS and we got
> no right to access current JJOS CVS.

Basically, if you want write access to the JJOS module, John Morrison or
_Quinn/Todd can give you authorization.

You should simply send a request to admin@jos.org and the appropriate
module maintainer will respond to you.

The process will become more organised in the future when we set up a
web interface.

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From jm@mak.com Mon, 09 Aug 1999 01:36:37 +0000
Date: Mon, 09 Aug 1999 01:36:37 +0000
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Thomas Bocek's VGA driver L-I-V-E-S in CVS!

Hi All;

I committed the bugfixes Thomas made to interp.cc, and I committed his
VGA driver.  (Thomas, I had a little trouble -- there were two copies of
the vga class -- I nuked the first one, and the second one seemed to
work.  Let me know if I picked the wrong one!)

Per Thomas' direction, I added (and you will want to add) the following
lines to init.java:

jos.platform.driver.vga seton=new jos.platform.driver.vga();
seton.initvga();
seton.test();

I rebuilt the arch/i386 target, and, Lo and Behold.... it DID something!

If I saw correctly, it cleared the screen and made some falling
horizontal bars in multiple colors, and then left a little green
checkmark on the screen.  (Thomas, please tell me if this is the desired
behavior.  By the way, I especially like the little checkmark at the end
of the run!).

Great job, Thomas!  

-jm

p.s., I only did this tonight because I was feeling guilty at holding
things up -- please don't expect any further responses from me until
after FedEx deadline on Tuesday...  I'm in the midst of a Day Job
crisis!

-- 
==== John Morrison
==== MaK Technologies Inc.
==== 185 Alewife Brook Parkway, Cambridge, MA 02138
==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115
==== fax:617-876-9208
==== jm@mak.com



From hilarycheng@usa.net Mon, 09 Aug 1999 09:57:53 +0800
Date: Mon, 09 Aug 1999 09:57:53 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] Thomas Bocek's VGA driver L-I-V-E-S in CVS!

Hi,

John Morrison wrote:

> Hi All;
>
> I committed the bugfixes Thomas made to interp.cc, and I committed his
> VGA driver.  (Thomas, I had a little trouble -- there were two copies of
> the vga class -- I nuked the first one, and the second one seemed to
> work.  Let me know if I picked the wrong one!)
>
> Per Thomas' direction, I added (and you will want to add) the following
> lines to init.java:
>

Hm, I have made some changed in VGA Drivers to test. I found that using Java
to Fill Memory
IS VERY SLOW. I have added a operation using C/ASM to fill memory with a
value. Is that
good to have such a operation ? Also, when I want to fill whole screen with
the same color using Java.
It will hangs after a period of time. I guessed it would be a stack
overflow. Any Idea about it ?

Also, will Graphics Drivers are under JJOS Modules ?

>
> jos.platform.driver.vga seton=new jos.platform.driver.vga();
> seton.initvga();
> seton.test();
>
> I rebuilt the arch/i386 target, and, Lo and Behold.... it DID something!
>
> If I saw correctly, it cleared the screen and made some falling
> horizontal bars in multiple colors, and then left a little green
> checkmark on the screen.  (Thomas, please tell me if this is the desired
> behavior.  By the way, I especially like the little checkmark at the end
> of the run!).
>
>

It is a correct behaivor. :p

Now, I am modifying Thomas Driver to be a generic graphics drivers.

Regards,

Hilary

PS: Thomas, anythings new in VGA Driver ? :p




From ryan@whitewolf.com.au Mon, 09 Aug 1999 13:41:12 +1000
Date: Mon, 09 Aug 1999 13:41:12 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] Thomas Bocek's VGA driver L-I-V-E-S in CVS!

Hilary Cheng wrote:

> Also, will Graphics Drivers are under JJOS Modules ?

The CVS filesystem was designed so that all Java code is stored in the
jos/library module. I know jm and _Quinn have been putting Java in JJOS
but I figure that's fine for now since the code they're writing is (at
the moment) closely tied to how JJOS works.

There are other JOS kernels being developed. Once more progress happens
in the Java layer of JOS, we should think about writing a standard set
of classes in /jos/library that is common to all kernels.

{{ Note that package names don't include /jos/library. eg. org.jos.ui
will be stored in /jos/library/org/jos/ui }}

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From hilarycheng@usa.net Mon, 09 Aug 1999 11:19:17 +0800
Date: Mon, 09 Aug 1999 11:19:17 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] Thomas Bocek's VGA driver L-I-V-E-S in CVS!

Hi,

    That's what I concern. The Best Case that Graphics Driver should be A
GENERIC DRIVER
for all kernel that are avaible. Since current Graphics Driver are depends
on the JJOS API. We
tempoary put it into JJOS. But I would like to ask all people's idea about
packaging.

Regards,

Hilary

Ryan Heise wrote:

> Hilary Cheng wrote:
>
> > Also, will Graphics Drivers are under JJOS Modules ?
>
> The CVS filesystem was designed so that all Java code is stored in the
> jos/library module. I know jm and _Quinn have been putting Java in JJOS
> but I figure that's fine for now since the code they're writing is (at
> the moment) closely tied to how JJOS works.
>
> There are other JOS kernels being developed. Once more progress happens
> in the Java layer of JOS, we should think about writing a standard set
> of classes in /jos/library that is common to all kernels.
>
> {{ Note that package names don't include /jos/library. eg. org.jos.ui
> will be stored in /jos/library/org/jos/ui }}
>




From draft@fear.ch Mon, 9 Aug 1999 13:54:54 +0200 (CEST)
Date: Mon, 9 Aug 1999 13:54:54 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] Re: Thomas Bocek's VGA driver L-I-V-E-S in CVS!

Hi all

On Mon, 9 Aug 1999, John Morrison wrote:

> Hi All;
> 
> I committed the bugfixes Thomas made to interp.cc, and I committed his
> VGA driver.  (Thomas, I had a little trouble -- there were two copies of
> the vga class -- I nuked the first one, and the second one seemed to
> work.  Let me know if I picked the wrong one!)

strange, I mailed 2 copies? well, take the bigger one *g*.


> Per Thomas' direction, I added (and you will want to add) the following
> lines to init.java:
> 
> jos.platform.driver.vga seton=new jos.platform.driver.vga();
> seton.initvga();
> seton.test();

this is just for testing. Hey but it works!

> 
> I rebuilt the arch/i386 target, and, Lo and Behold.... it DID something!
> 
> If I saw correctly, it cleared the screen and made some falling
> horizontal bars in multiple colors, and then left a little green
> checkmark on the screen.  (Thomas, please tell me if this is the desired
> behavior.  By the way, I especially like the little checkmark at the end
> of the run!).
> 
> Great job, Thomas!  

wow cool, this is my very first driver.


how does the driver work?

first the driver initialize the vga card, then it clears the
video memory (fasten your seat belt, the speed is really incredibel).
In my first vgadriver version, the sreen was turned off while clearing the
video memory, but there was no reslut for a long while, so I made it
visible. (falling horizontal bars)
And at the end, there should be a green checkmark at the end. (in the
middle of the screen).




Thomas Bocek




From draft@fear.ch Mon, 9 Aug 1999 14:18:06 +0200 (CEST)
Date: Mon, 9 Aug 1999 14:18:06 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] Thomas Bocek's VGA driver L-I-V-E-S in CVS!

Hi Hilary and All

On Mon, 9 Aug 1999, Hilary Cheng wrote:

> Hi,
> 
> John Morrison wrote:
> 
> > Hi All;
> >
> > I committed the bugfixes Thomas made to interp.cc, and I committed his
> > VGA driver.  (Thomas, I had a little trouble -- there were two copies of
> > the vga class -- I nuked the first one, and the second one seemed to
> > work.  Let me know if I picked the wrong one!)
> >
> > Per Thomas' direction, I added (and you will want to add) the following
> > lines to init.java:
> >
> 
> Hm, I have made some changed in VGA Drivers to test. I found that using Java
> to Fill Memory
> IS VERY SLOW. I have added a operation using C/ASM to fill memory with a
> value. Is that

I know, dont't know why, and another fact is that a write8 is faster than
a write32...

> good to have such a operation ? Also, when I want to fill whole screen with
> the same color using Java.
> It will hangs after a period of time. I guessed it would be a stack
> overflow. Any Idea about it ?

I have the same problem: running a long task is impossible. (I think it
was something with jbHeap())

> 
> Also, will Graphics Drivers are under JJOS Modules ?
> 
> >
> > jos.platform.driver.vga seton=new jos.platform.driver.vga();
> > seton.initvga();
> > seton.test();
> >
> > I rebuilt the arch/i386 target, and, Lo and Behold.... it DID something!
> >
> > If I saw correctly, it cleared the screen and made some falling
> > horizontal bars in multiple colors, and then left a little green
> > checkmark on the screen.  (Thomas, please tell me if this is the desired
> > behavior.  By the way, I especially like the little checkmark at the end
> > of the run!).
> >
> >
> 
> It is a correct behaivor. :p
> 
> Now, I am modifying Thomas Driver to be a generic graphics drivers.
> 
> Regards,
> 
> Hilary
> 
> PS: Thomas, anythings new in VGA Driver ? :p

No, I'm reading the ibm-javaos manual, how to structure device drivers
e.t.c. 
Could you send me your latest code? 


Thomas Bocek




From RegierAveryJ@JDCORP.deere.com Mon, 9 Aug 1999 08:19:28 -0500
Date: Mon, 9 Aug 1999 08:19:28 -0500
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [JOS-Kernel] Driver writing

	-----Original Message-----
	From:	Matt Albrecht [SMTP:onewith1@flash.net]
	Sent:	Saturday, August 07, 1999 4:11 PM
	To:	kernel@jos.org
	Subject:	Re: [JOS-Kernel] Driver writing

	Hello

	-----Original Message-----
	From: John Morrison <jm@mak.com>
	To: kernel@jos.org <kernel@jos.org>
	Date: Saturday, August 07, 1999 12:56 PM
	Subject: Re: [JOS-Kernel] Driver writing (was: Re: [JOS-Kernel]
Garbage
	collection)



	>> > How about doing second-tier work?  Like, filesystem
implementations?
	>>
	>> Yes, that's a good possiblity. ext2fs would be a good starting
point. I
	>> might even learn something in the process :)
	>>
	>> (didn't someone write a FAT implementation a long time ago? I
think I've
	>> seen it on the Wiki ages ago when I was new to the project)
	>
	>Hmm.. can't recall...

	Yes, there was work done on this. Last I remember it was about a
year ago.
	I think that if we are going to do file system stuff, the best way
to start
	is have "virtual/embedded file systems", where one file system is
stored as
	a big file in the parent file system.  This way we don't tromp on
the user's
	host system.  It would also enable us to easily build upon other
file
	systems (like having a FAT-16 system, with a ZIP compression system
above
	that, and above that one is a ext2fs), and also have RAM disks.

	This would mean publishing a file type with a raw disk I/O
interface.  Each
	disk device (including virtual device for file system and RAM) would
need an
	implementation of this type, becoming the driver.

	-Matt

Matt & Peter,

Stephan Reich was leading this project a year ago.  He got to the point
where he had a filesystem API (it is pretty complete and well thought out)
and a driver written in Java for FAT16.  He also had a simple program for
viewing the FAT16 filesystem which was embedded in a file in your local file
system.  This should give you a good base to work on.

I have put the latest (I think) code that I have for it at:
ftp://wiki.jos.org/pub/jos/jos-filesystem-4-preview.jar

Regards,
Avery J. Regier





From hilarycheng@usa.net Mon, 09 Aug 1999 23:02:08 +0800
Date: Mon, 09 Aug 1999 23:02:08 +0800
From: hilarycheng@usa.net hilarycheng@usa.net
Subject: [JOS-Kernel] Thomas Bocek's VGA driver L-I-V-E-S in CVS!

Hi, 

>
>I know, dont't know why, and another fact is that a write8 is faster than
>a write32...
>

hm, I use write8 to fill up memory, still very slow (my CPU is AMD K6-350)
-_-.
I prefer to write some routines to fill up using native implementation.

>
>I have the same problem: running a long task is impossible. (I think it
>was something with jbHeap())
>

I think so. I think there is one more reason. We use lots of write8. But we
havn't
delcare a variable to get the value from write8. It may cause some problems.

>
>No, I'm reading the ibm-javaos manual, how to structure device drivers
>e.t.c. 

There is a discussion in arch. u can read sths about generic device drivers.
hm, if u got sths good from IBM one, pls write sths up about it. :p

>Could you send me your latest code? 

Hm, It just write a generic graphics implementation. and then move ur code
to implement this generic graphics drivers. But it is not yet finished. I
try my code 
to finish it in this week. :p

Regards,

Hilary





From jm@mak.com Mon, 09 Aug 1999 12:38:45 -0400
Date: Mon, 09 Aug 1999 12:38:45 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Thomas Bocek's VGA driver L-I-V-E-S in CVS!

Hi;

hilarycheng@usa.net wrote:
> hm, I use write8 to fill up memory, still very slow (my CPU is AMD K6-350)
> -_-.
> I prefer to write some routines to fill up using native implementation.

Two suggestions:

(1) Find out why the write* routines are so slow (I can think of several reasons
right off of the top of my head... why not just re-order the built-in-routine
checks to check the read/write operations first, before the other ones?), and

(2) See if the JavaOS "memory" classes have any interfaces for block memory
operations, and then implement them.

> >I have the same problem: running a long task is impossible. (I think it
> >was something with jbHeap())
> >
> 
> I think so. I think there is one more reason. We use lots of write8. But we
> havn't
> delcare a variable to get the value from write8. It may cause some problems.

I think we run out of memory after awhile, due to "leaking" Java stack frames. 
This is why George's new conservatively-GCed heap implementation is so
time-critical.

-jm (still in crisis mode)

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From jm@mak.com Mon, 09 Aug 1999 12:54:45 -0400
Date: Mon, 09 Aug 1999 12:54:45 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Thomas Bocek's VGA driver L-I-V-E-S in CVS!

Hi;

John Morrison wrote:
> Two suggestions:
> 
> (1) Find out why the write* routines are so slow (I can think of several reasons
> right off of the top of my head... why not just re-order the built-in-routine
> checks to check the read/write operations first, before the other ones?), and
> 
> (2) See if the JavaOS "memory" classes have any interfaces for block memory
> operations, and then implement them.

More suggestions:

(3) Find out if writing directly to VGA display memory is inherently any slower
than writing to main system (vanilla RAM) memory or if there's any speed
difference when the VGA page is selected...  If so, then we might need to do
something algorithmically cleverer for clearing...

(4) Find out if there are any VGA device controls which will clear/set banks of
display memory for you.  I have a fabulous "Guide to VGA/SVGA" book at home --
can't remember the title right now...

However, suggestion #1 is the most important.  If there's something that's
causing these operations to be slow, we need to speed it up.  There are other
bytecodes being executed, too, and maybe the whole enchilada needs speeding
up... or nobody will ever use the thing...

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From tmiller@haverford.edu Mon, 9 Aug 1999 16:54:16 -0400 (EDT)
Date: Mon, 9 Aug 1999 16:54:16 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Thomas Bocek's VGA driver L-I-V-E-S in CVS!

> > It will hangs after a period of time. I guessed it would be a stack
> > overflow. Any Idea about it ?
> 
> I have the same problem: running a long task is impossible. (I think it
> was something with jbHeap())

	We don't reclaim any memory at all right now.  (Really.)  The
garbage collector is under construction, though the author's name escapes
me at the moment.

-_Quinn




From tmiller@haverford.edu Mon, 9 Aug 1999 16:57:03 -0400 (EDT)
Date: Mon, 9 Aug 1999 16:57:03 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Thomas Bocek's VGA driver L-I-V-E-S in CVS!

> I prefer to write some routines to fill up using native implementation.

	This is not what we want to do, really.  The whole point of a Java
driver model is to avoid native device drivers, though I'm aware that the
decaf JVM is painfully slow as yet.  If you could, just leave the java
code in the source as comment form so we could test it every so often as
we make progress on the VM?

-_Quinn




From tmiller@haverford.edu Mon, 9 Aug 1999 18:16:29 -0400 (EDT)
Date: Mon, 9 Aug 1999 18:16:29 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] bug in decaf

	I found the bug I was looking for in decaf.  While I still think
(haven't actually checked) that synchronized methods aren't actually
implemented, it turns out the checkcast (and therefore, probably
instanceof) bytecode is horribly broken.  I'll try to put the fix in
tonight.

-_Quinn




From tmiller@haverford.edu Mon, 9 Aug 1999 20:17:26 -0400 (EDT)
Date: Mon, 9 Aug 1999 20:17:26 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] decaf fixes

in jos/util/Queue.java, on or about line 16, the constructor:

  data = new Object[Q_SIZE+1];

in common/decaf/interp.cc, on or about line 2618, in frame::instanceof:

  /* catches null java objects... */
  if ( cast_from == NULL )
    {
      op_stack.push_jint( 0 );
      return true;
    }

"			", on or about line 1215, in frame::checkcast:

	return true;


	No big fixes, just a trio of stupid oversights on my part.
Haven't tested this against the i386 build, but I can't think of a reason
why it wouldn't work.  (FYI, this came in the course of testing out an
implementation of virtual consoles.  I don't know if any of you'd have
come across this problem in your work, but I'd appreciate it, JM, if you
could put them in when you can; my sources are still too far divorced from
CVS to make a merge something worthwhile.)

-_Quinn





From jm@mak.com Mon, 09 Aug 1999 20:17:17 -0400
Date: Mon, 09 Aug 1999 20:17:17 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Re: decaf fixes

Hi;

Todd L. Miller wrote:
>         No big fixes, just a trio of stupid oversights on my part.
> Haven't tested this against the i386 build, but I can't think of a reason
> why it wouldn't work.  (FYI, this came in the course of testing out an
> implementation of virtual consoles.  I don't know if any of you'd have
> come across this problem in your work, but I'd appreciate it, JM, if you
> could put them in when you can; my sources are still too far divorced from
> CVS to make a merge something worthwhile.)

Absolutely, will do.

However, it'll have to wait until after FedEx deadline, Tuesday 7pm EST.

(If I ingest any more caffeine, I'll probably explode.  Not a pretty image
there, eh?)

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From robfitz@geocities.com Mon, 9 Aug 1999 23:46:52 +0000 (UTC)
Date: Mon, 9 Aug 1999 23:46:52 +0000 (UTC)
From: Robert Fitzsimons robfitz@geocities.com
Subject: [JOS-Kernel] Garbage collection

Hello

> Yeah, this particular embarrassment is my fault, not Todd's.  It worked, so I
> focussed upon new functionality, not cleaning it up.  If you have already done
> so, please let me know.  If not, this would be a good time to also put in Robert
> Fitzsimons' (Hi, Robert!) code to enable booting via GRUB (I seem to recall
> that, amongst the worst offenders in generating warnings, was the code which
> looked for the Etherboot-specific data structures located in various bits of
> memory...)

I had a look at this over the weekend, but i'm having a problem.  It seems
there is a problem with the way JJOS is being linked, the data structure
which GRUB needs should be in the first 8192 bytes of the file, but isn't.
I'm going to have another look at it tonight and I will report my findings
tomorrow.

Robert Fitzsimons
robfitz@geocities.com





From tmiller@haverford.edu Mon, 9 Aug 1999 20:42:14 -0400 (EDT)
Date: Mon, 9 Aug 1999 20:42:14 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Re: decaf fixes

> However, it'll have to wait until after FedEx deadline, Tuesday 7pm EST.

	Understood.  BTW, re: speed problems: should I start the
enviroment/intern stuff for the native code access, or will you be able to
handle that later this week?  I think it'd be the singles easiest/largest
speed jump we could generate, especialling with an efficient hash.  (I'll
need to re-read the JNI manual to see exactly what data we'd be hashing,
but anyway...) I'd prefer to keep slogging away at interp.cc's exception
handling over here.

-_Quinn




From hilarycheng@usa.net Tue, 10 Aug 1999 10:24:33 +0800
Date: Tue, 10 Aug 1999 10:24:33 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] Thomas Bocek's VGA driver L-I-V-E-S in CVS!

Hi,


>> I prefer to write some routines to fill up using native implementation.
>
> This is not what we want to do, really.  The whole point of a Java
>driver model is to avoid native device drivers, though I'm aware that the
>decaf JVM is painfully slow as yet.  If you could, just leave the java
>code in the source as comment form so we could test it every so often as
>we make progress on the VM?
>

hm, well, I think this is ok for me to write anything that in java. IMO,
native implementation of fill up operation is needed. In C, it can fill up
memory directly instead of calling method to write a certain value at 
certain memory address. It can save lots of times by removing lots of
method call in Graphics Drivers.

Regards,

Hilary





From jm@mak.com Tue, 10 Aug 1999 17:39:34 -0400
Date: Tue, 10 Aug 1999 17:39:34 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Priority List

Hi All;

Crisis Management 101, or "Put out the hottest fires first."

This message is to solicit, from the active host/i386 developers ONLY
please, their perceptions of the hottest current fires.  The hottest
ones get put out first.  

Here follows the tentative list, pending updates based upon feedback. 
Please reply to the list, so that everybody knows what's going on.

(1) Memory management.
(2) Performance.

-jm

-- 
==== John Morrison ==== jm@mak.com == http://www.mak.com/welcome.html
==== MaK Technologies Inc., 185 Alewife Brook Parkway, Cambridge, MA
02138
==== vox:617-876-8085 x115
==== fax:617-876-9208



From tmiller@haverford.edu Tue, 10 Aug 1999 18:07:04 -0400 (EDT)
Date: Tue, 10 Aug 1999 18:07:04 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Priority List

> Here follows the tentative list, pending updates based upon feedback. 
> Please reply to the list, so that everybody knows what's going on.
> 
> (1) Memory management.
> (2) Performance.

(3)  Deciding what to tell the architecture list, now that they've decided
to try and design a driver system without involving the kernel list.

-_Quinn




From onewith1@flash.net Tue, 10 Aug 1999 19:07:37 -0500
Date: Tue, 10 Aug 1999 19:07:37 -0500
From: Matt Albrecht onewith1@flash.net
Subject: [JOS-Kernel] Priority List

-----Original Message-----
From: Todd L. Miller <tmiller@haverford.edu>
To: kernel@jos.org <kernel@jos.org>
Cc: jm@mak.com <jm@mak.com>
Date: Tuesday, August 10, 1999 5:02 PM
Subject: Re: [JOS-Kernel] Priority List


>> Here follows the tentative list, pending updates based upon feedback.
>> Please reply to the list, so that everybody knows what's going on.
>>
>> (1) Memory management.
>> (2) Performance.
>
>(3)  Deciding what to tell the architecture list, now that they've decided
>to try and design a driver system without involving the kernel list.
>
>-_Quinn

Ok, I'm at fault for this.  I moved the discussion over to "Arch" since the
driver "architecture" doesn't directly relate to the kernel (but, my! the
implications it has!).

Actually, for Device architecture (from a nearly nieve perspective), I see
only two major hooks needed to join the kernel to the drivers:
   (1) Pat down the hardware resource interface to a point where somebody is
truly satisfied.  This is critical for both groups, but doesn't affect many
people beyond us.
   (2) Create a hook where the devices can detect and install themselves.
This is basically the "main" method of the OS, I feel (though it could be
something else too).  This is also a link into the registry and other cans
of worms.  But still, the kernel group (I feel) need only be conserned with
the "main" routine link.  If I'm not mistaken, this already exists.

Anyone see any oversights, or simplification of the real problem?

-Matt




From jm@mak.com Wed, 11 Aug 1999 10:35:51 -0400
Date: Wed, 11 Aug 1999 10:35:51 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Priority List

Hi All;

Matt Albrecht wrote:
> Ok, I'm at fault for this.  I moved the discussion over to "Arch" since the
> driver "architecture" doesn't directly relate to the kernel (but, my! the
> implications it has!).

With all due respect, in traditional monolithic, own-address-space kernels, they
directly relate in that the kernel *defines* the driver architecture/API.  Even
though
 jjos+decaf is NOT a traditional kernel
 jjos+decaf is NOT a traditional kernel
 jjos+decaf is NOT a traditional kernel
 jjos+decaf is NOT a traditional kernel
 jjos+decaf is NOT a traditional kernel
 jjos+decaf is NOT a traditional kernel
the driver architecture absolutely *still* relates to jjos+decaf.  I think
(based upon my reading of your email), the rest of your message reinforces this
view...

> Actually, for Device architecture (from a nearly nieve perspective), I see
> only two major hooks needed to join the kernel to the drivers:
>    (1) Pat down the hardware resource interface to a point where somebody is
> truly satisfied.  This is critical for both groups, but doesn't affect many
> people beyond us.
>    (2) Create a hook where the devices can detect and install themselves.
> This is basically the "main" method of the OS, I feel (though it could be
> something else too).  This is also a link into the registry and other cans
> of worms.  But still, the kernel group (I feel) need only be conserned with
> the "main" routine link.  If I'm not mistaken, this already exists.

Having said that, a couple of points... I *still* think we ought to satisfy your
two needs by using the JavaOS API as defined in the "Device Driver Guide,"
available at the following NEW URL (the old one now gets redirected to a place
without the documents):

http://developer.java.sun.com/developer/products/JavaOS/TechDocs/index.html

BTW, please notice that I think you can also DOWNLOAD (?!?!?!) JavaOS from this
page!  (The page info says it was last modified on the 7th...)

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From msneto@iceman.fee.unicamp.br Wed, 11 Aug 1999 13:30:14 -0300 (EST)
Date: Wed, 11 Aug 1999 13:30:14 -0300 (EST)
From: Mario de Souza Neto msneto@iceman.fee.unicamp.br
Subject: [JOS-Kernel] Web Page

I am trying to access the home page but i cant go anywhere. What is
happening?

Mario




From jm@mak.com Fri, 13 Aug 1999 21:03:00 -0400
Date: Fri, 13 Aug 1999 21:03:00 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Big changes

Hi Todd;

Made some big changes.  In order to try and perk up the performance, I
changed the successive logical "if" tests for built-in methods to be
hash-table based.  

It works, but I had to make extensive changes.  Basically, decaf needed
state -- I had to make a hash table after most of decaf was initialized,
but before it really started.  Most of this happens in d_main.cc.  I
also teased apart some of the bigger resolution routines into smaller
ones, until I figured out that doing this the next-to-be-described way
would entail REALLY extensive changes to the code, and then some
algorithmic behavioral changes...  I also put most of the char*/UTF8
routines into a new utf8.cc file.  I also put all the builtin methods
into one new file jvmbuiltins.cc.  There are obviously-named header
files for each.  There's a new hashtable template in jjos underlying
this.  I also tried to remove some globals and make them instance
variables on the new decafJVM class, which puts them in the heap, which
should make our job of finding the GC roots easier.

I verified both builds, but didn't notice a real performance boost on
the VGA driver screen clearing stuff (although I wasn't smart enough to
save the old binary before I overwrote it (Doh!), so I couldn't do A/B
testing -- Thomas and Hilary, please don't make the same mistake I did).

Eventually, I think maybe we should replace this mechanism with one that
forces the loading and resolution of each class for which there's a
builtin method, and then over-writes the resolved_method data structure
with one that calls a builtin.  Then we won't need a separate data
structure, and this would be even faster (probably twice as fast) as the
new scheme.

BTW, I should've incorporated the fixes you asked me to, too.

Whew.

I plan to check these in tomorrow AM US EST...

When George gets the conservative GC

Later!

-jm

-- 
==== John Morrison ==== jm@mak.com == http://www.mak.com/welcome.html
==== MaK Technologies Inc., 185 Alewife Brook Parkway, Cambridge, MA
02138
==== vox:617-876-8085 x115
==== fax:617-876-9208



From jm@mak.com Sat, 14 Aug 1999 10:11:31 -0400
Date: Sat, 14 Aug 1999 10:11:31 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Checked-in changes...

Hi Guys;

Could Todd, Thomas, and Hilary (sp?) please do me some favors?

Todd: You said you'd like to refetch the sources (instead of trying to
merge your obsolete set).  Would you please be so kind as to do it, and
let me know if I broke anything (esp makefiles)?  I should've made all
the fixes you asked me to.  I am just worried that maybe I broke
something as judged by the output of the testVM procedures.  If I did,
just let me know which ones I broke, and I will fix them (I'm not trying
to throw any such problems over the wall to you).

Thomas and/or Hilary: Would you please be so kind as to let me know if
you notice a speed-up in the performance of the built-in methods?  An
approximate figure and/or subjective impression would be good. If the
current level of performance proves to be unacceptable, I think the next
step is to implement the JavaOS memory classes.  They have a method in
one of the memory object that basically "setBytes" a whole bunch of
bytes to a given value.  This should be easier now that there is a way
of adding built-in methods without increasing the overhead (much if at
all) for each additional such built-in.  Also, adding such built-ins is
now divorced from the basic machinery of the JVM, so it should also be
more straightforward to do so.

Everybody else:  Please let me know if I have inadvertantly caused any
problems, and let me know via email to the list (it's more important
that everybody know there's a problem right away than it is to protect
my dignity via a private email).

Thanks, especially to those brave souls writing drivers!  Let me know if
there's anything I can do to help!

-jm

-- 
==== John Morrison ==== jm@mak.com == http://www.mak.com/welcome.html
==== MaK Technologies Inc., 185 Alewife Brook Parkway, Cambridge, MA
02138
==== vox:617-876-8085 x115
==== fax:617-876-9208



From tmiller@haverford.edu Sat, 14 Aug 1999 11:56:37 -0400 (EDT)
Date: Sat, 14 Aug 1999 11:56:37 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Re: Big changes

	Whatever system you end up with should be relatively simple to
extend to dynamically loaded native libraries, as well.  On my end of
things, I've been hammering away at decaf (mostly interp.cc), writing in
some changes here and there that I don't recall right now, having decided
to go ahead and work on starting the merge.  The most recent was
implementing synchronized methods, as well as some work on the java end of
things trying to get the virtual console switching to work.

-_Quinn





From draft@fear.ch Sat, 14 Aug 1999 18:17:07 +0200 (CEST)
Date: Sat, 14 Aug 1999 18:17:07 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] Checked-in changes...

Hi John and all


On Sat, 14 Aug 1999, John Morrison wrote:

> Hi Guys;
> 
> Could Todd, Thomas, and Hilary (sp?) please do me some favors?
> 
> Todd: You said you'd like to refetch the sources (instead of trying to
> merge your obsolete set).  Would you please be so kind as to do it, and
> let me know if I broke anything (esp makefiles)?  I should've made all
> the fixes you asked me to.  I am just worried that maybe I broke
> something as judged by the output of the testVM procedures.  If I did,
> just let me know which ones I broke, and I will fix them (I'm not trying
> to throw any such problems over the wall to you).
 
> Thomas and/or Hilary: Would you please be so kind as to let me know if
> you notice a speed-up in the performance of the built-in methods?  An
> approximate figure and/or subjective impression would be good. If the
> current level of performance proves to be unacceptable, I think the next
> step is to implement the JavaOS memory classes.  

ok I'll download the latest source and then I test it.

I started to implement a device manager, and a pci detector, but it is
very hard to find any documentations about pci. Do you know any good
sites?

[cut]

Thomas Bocek




From jm@mak.com Sat, 14 Aug 1999 13:38:32 -0400
Date: Sat, 14 Aug 1999 13:38:32 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Re: Big changes

Hi;

Todd L. Miller wrote:
>         Whatever system you end up with should be relatively simple to
> extend to dynamically loaded native libraries, as well.  On my end of

I would venture to say the DLL/DSO native libraries are not on the
horizon for now.  There are so many other things that need doing that
native libraries have fallen over (beyond?) the horizon.  (Like, maybe
getting to the point where we can run an interesting Java program at
all?)

On the off-chance that this is a performance-related need: the solution
to bad performance should be better performance (e.g., optimized JVM,
JIT, HotSpot, etc.), not native libraries.  JNI should be used to get to
large, pre-existing machine-dependent code bases (e.g., OpenGL), of
which we have none for JOS.

On a more concrete level, the solution I have is not optimal (although
it's better than the Order(N) performing solution it replaced), and it
doesn't extend to native libraries well. This is, in part, because I
don't have access to rebuildable Sun JDK sources, and we're not yet
using GNU classpath.  Right now, we're trapping calls to non-native
methods, which means I can't just see if the resolved_method is native,
and only THEN look up the built-in method in the hashtable.  I have to
pre-screen all the calls to ALL methods, and then trap to the overriding
built-in.  I figure I've got two options:

(1) If we use GNU classpath, we can simply make the built-ins "native"
Java methods, and then we can change those 10 (or so) lines of code in
the JVM, and make things run much faster.  (I think this is the Right
Way to do this.)  Much later (in the distant future?) we could extend
this to write a whole bunch of code to intern native methods, and use
that same mechanism.

(2) If we don't want to wait that long, alternatively, I think I could
force a loading of all the classes for which I have built-in methods,
and then traverse the resolved method tables and find and hammer all the
ones I want to be overriden with "native" methods.  This one would
entail some changes to the decaf initialization (slowing it down, and
being more memory-consumptive, because we'd have to load all these
classes whether we needed them or not -- don't know how many this is),
and to the method-invocation machinery (I think).

> things, I've been hammering away at decaf (mostly interp.cc), writing in
> some changes here and there that I don't recall right now, having decided
> to go ahead and work on starting the merge.  The most recent was
> implementing synchronized methods, as well as some work on the java end of
> things trying to get the virtual console switching to work.

OK.  I hope I haven't changed things too much so that you can't easily
find your way around!  Once we plug in the memory management stuff,
things should be much better!

-jm

-- 
==== John Morrison ==== jm@mak.com == http://www.mak.com/welcome.html
==== MaK Technologies Inc., 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== vox:617-876-8085 x115
==== fax:617-876-9208



From onewith1@flash.net Sat, 14 Aug 1999 17:56:46 -0500
Date: Sat, 14 Aug 1999 17:56:46 -0500
From: Matt Albrecht onewith1@flash.net
Subject: [JOS-Kernel] Checked-in changes...

Tomas wrote:
>Hi John and all
>
>
>I started to implement a device manager, and a pci detector, but it is
>very hard to find any documentations about pci. Do you know any good
>sites?
>
>Thomas Bocek
>


I happen to know of an *excellent* source on PCI, but unfortunately you need
to pay for it.  It's the PCI System Architecture book from the "MindShare
Architecture Series."  They were designed for hardware and driver
implementors, and go into extreme detail.  Unfortunately, they run for about
$30 US (I only have the plug-n-prey book).  The series is published by
MindShare, Inc.

-Matt




From hilarycheng@usa.net Sun, 15 Aug 1999 16:24:41 +0800
Date: Sun, 15 Aug 1999 16:24:41 +0800
From: hilarycheng@usa.net hilarycheng@usa.net
Subject: [JOS-Kernel] About CVS

Hi All,

	Anyone can download things from CVS ? I can't. Is that I use anonymous to
login.
I wanna to get the latest source of JJOS. But CVS tell me that I got no
access to it -_-!

Regards,

Hilary




From ryan@whitewolf.com.au Sun, 15 Aug 1999 21:18:25 +1000
Date: Sun, 15 Aug 1999 21:18:25 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] About CVS

hilarycheng@usa.net wrote:
> 
> Hi All,
> 
>         Anyone can download things from CVS ? I can't. Is that I use anonymous to
> login.
> I wanna to get the latest source of JJOS. But CVS tell me that I got no
> access to it -_-!

CVS seems to be working fine. On UNIX/bash, use the following commands
to checkout JJOS for the first time (these instructions will be useful
to anyone wanting to download JOS from CVS):

$ export CVSROOT=:pserver:anonymous@jos.org:/sites/jos/cvs/cvsroot

$ cvs login
(Logging in to anonymous@jos.org)
CVS password: *** type in "anonymous" ***

$ cvs checkout JJOS


It is a good idea to put CVSROOT in your .profile. Once you login,
subsequent cvs commands will be authorized. You do not need to re-login
- even after reboot.

Once you have checked out JJOS for the first time you use "cvs update
-d" to keep your local copy in sync with the server:

$ cd JJOS
$ cvs update -d

You can run cvs update from any directory and just that directory will
be sync'ed.


If you still get errors please email me the exact error messages.

--
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From draft@fear.ch Sun, 15 Aug 1999 18:36:10 +0200 (CEST)
Date: Sun, 15 Aug 1999 18:36:10 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] jJOS speed

Hi all

I made a little benchmark with the old source and with the new one:

old: vga fillroutine ~7 sec
new: vga fillroutine ~5 sec

The results aren't exact, because

1. made the test with a stop-watch

2. the old source crashed after 7 sec, and the screen was only 1/5 filled,
the new source crashes after the screen is 4/5 filled.


Thomas Bocek
   





From jm@mak.com Sun, 15 Aug 1999 12:54:11 -0400
Date: Sun, 15 Aug 1999 12:54:11 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] jJOS speed

Hi Thomas;

Thomas Bocek wrote:
> I made a little benchmark with the old source and with the new one:
> 
> old: vga fillroutine ~7 sec
> new: vga fillroutine ~5 sec
> 
> The results aren't exact, because
> 
> 1. made the test with a stop-watch
> 
> 2. the old source crashed after 7 sec, and the screen was only 1/5 filled,
> the new source crashes after the screen is 4/5 filled.

OK, so if I were to extrapolate, the old one would finish in 35 seconds
(barring a crash - HA), and the new one would finish in about 7 seconds
(barring a crash), right?  So, this means we've speeded up the
calls-to-native code about 5 times, eh?  If so, is performance creeping
into the "acceptable for now" range (At least, until we do the
JavaOS-style memory classes -- I'm also curious as to why the write32
stuff is SLOWER -- can you try that one, too?)?  If so, is the
memory-management stuff now the hottest fire?  

With respect to the crash:

(1) When my version hangs after displaying the checkmark, is that the
crash's failure mode?  I mean, is this the same "crash" you're getting? 
If so, I can try and debug it.

(2) Do you think it would help if I wrote something that, in the case of
a detectable crash, reset the VGA display to text mode and spat out some
debugging info?  (Our own little BSOD!  What color should I make the
screen?)  I could print out:
(a) a diagnostic string
(b) the native-code stacktrace (with "nm" you could see where in the JVM
we were)
(c) and maybe some other Java stuff (I'd have to think about how to do
this, and fit it on one screen -- there could be quite a few Java
threads -- too many to fit on one screen)
We don't have enough of a console/GUI/Window Mgr for me to do anything
else, right?

Again, thanks for the help -- I appreciate how, er, hostile the
debugging environment is at this point in time!  I shall endeavor to
make it less so.

-jm

-- 
==== John Morrison ==== jm@mak.com == http://www.mak.com/welcome.html
==== MaK Technologies Inc., 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== vox:617-876-8085 x115
==== fax:617-876-9208



From tmiller@haverford.edu Sun, 15 Aug 1999 20:46:34 -0400 (EDT)
Date: Sun, 15 Aug 1999 20:46:34 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Re: Big changes

	w.r.t. dynamic libraries, no, it's not a priority right now, but a
little foresight is always worthwhile...

	w.r.t. to speeding up native-code access even farther: why don't
we check if the method is native before handing it off to builtins lookup?
Originally, it was set up this way because Bad Things would happen trying
to use System.[in|err].print[ln] as a debugging tool... however, decaf has
gotten much more capabale since I wrote those methods in.  It would be
worthwhile to try adding a native check before the builtin lookup, and see
if things got far enough along to write in a native-only call.  (Likewise,
make sure that in8(), etc, calls were actually marked as native.)

-_Quinn




From hilarycheng@usa.net Mon, 16 Aug 1999 09:35:59 +0800
Date: Mon, 16 Aug 1999 09:35:59 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] jJOS speed

Hi All,


>Hi Thomas;
>
>Thomas Bocek wrote:
>> I made a little benchmark with the old source and with the new one:
>>
>> old: vga fillroutine ~7 sec
>> new: vga fillroutine ~5 sec

My testing is much similar to Thomas one. The speed has been improved
after I upgraded the kernel.

>>
>> The results aren't exact, because
>>
>> 1. made the test with a stop-watch
>>
>> 2. the old source crashed after 7 sec, and the screen was only 1/5
filled,
>> the new source crashes after the screen is 4/5 filled.
>

The Crash means the VGA class stop filling screen.

What I have done, I have made some changes on Thomas VGA class.
1. I am trying to make generic interface for Graphics Adapator
2. I added some variables after method call.
i.e.
original one : jos.system.machine.write8(0xaffff, 0);
modified one : short temp = jos.system.machine.write8(0xaffff, 0);

After modifying, the VGA can fill up whole screen without any problem. But
the color on the screen are same color of check mark -_-. I will check it
later.

Also, I have made a memfill routine. It can speed up VGA filling much much a
lots.

For the crash(I use old code), I think the problem is stack overflow. Since
the routine got no problem (it can fill up). I have tried to fill up with
different counter value. When more pixels
are filled, it will hangs very easy. If I fill up a few pixels, it got no
problems.

>OK, so if I were to extrapolate, the old one would finish in 35 seconds
>(barring a crash - HA), and the new one would finish in about 7 seconds
>(barring a crash), right?  So, this means we've speeded up the
>calls-to-native code about 5 times, eh?  If so, is performance creeping
>into the "acceptable for now" range (At least, until we do the
>JavaOS-style memory classes -- I'm also curious as to why the write32
>stuff is SLOWER -- can you try that one, too?)?  If so, is the
>memory-management stuff now the hottest fire?
>
>With respect to the crash:
>
>(1) When my version hangs after displaying the checkmark, is that the
>crash's failure mode?  I mean, is this the same "crash" you're getting?
>If so, I can try and debug it.
>
>(2) Do you think it would help if I wrote something that, in the case of
>a detectable crash, reset the VGA display to text mode and spat out some
>debugging info?  (Our own little BSOD!  What color should I make the
>screen?)  I could print out:
>(a) a diagnostic string
>(b) the native-code stacktrace (with "nm" you could see where in the JVM
>we were)
>(c) and maybe some other Java stuff (I'd have to think about how to do
>this, and fit it on one screen -- there could be quite a few Java
>threads -- too many to fit on one screen)
>We don't have enough of a console/GUI/Window Mgr for me to do anything
>else, right?

for debugging, I think we should modified VGA Class to be a Graphical
Console.
(Draw Characters pixel by pixel like Linux Frame Buffer Console). Then we
can
print debugging information on screen.

>Again, thanks for the help -- I appreciate how, er, hostile the
>debugging environment is at this point in time!  I shall endeavor to
>make it less so.
>
>-jm

Regards,

Hilary




From jm@mak.com Mon, 16 Aug 1999 07:23:30 -0400
Date: Mon, 16 Aug 1999 07:23:30 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Re: Big changes

Hi Todd;

Todd L. Miller wrote:
> 
>         w.r.t. dynamic libraries, no, it's not a priority right now, but a
> little foresight is always worthwhile...
> 
>         w.r.t. to speeding up native-code access even farther: why don't
> we check if the method is native before handing it off to builtins lookup?

Obviously, this is a much better way to do things.  However, I didn't do that
because I thought there were some methods in the JDK we absolutely didn't want
to run (I deduced this, apparently incorrectly, from the way the original code
was written).

> Originally, it was set up this way because Bad Things would happen trying
> to use System.[in|err].print[ln] as a debugging tool... however, decaf has
> gotten much more capabale since I wrote those methods in.  It would be

Great, I completely misinterpreted the reasons for this, then.  (That's a good
thing, actually.)

> worthwhile to try adding a native check before the builtin lookup, and see

We are already checking (and thus paying a cost for) this...  So, I will just
change the code around to only check the built-in table if and only if the
resolved_method* tells me that it's a native method.  This should be a
reasonably big performance win.

> if things got far enough along to write in a native-only call.  (Likewise,
> make sure that in8(), etc, calls were actually marked as native.)

It is my understanding that this is already the case (except maybe for the
print() and println() methods...).  Any idea how that works from your prior
experience with this?

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From jm@mak.com Mon, 16 Aug 1999 07:33:30 -0400
Date: Mon, 16 Aug 1999 07:33:30 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Garbage collection

Hi Robert;

Robert Fitzsimons wrote:
> I had a look at this over the weekend, but i'm having a problem.  It seems
> there is a problem with the way JJOS is being linked, the data structure
> which GRUB needs should be in the first 8192 bytes of the file, but isn't.
> I'm going to have another look at it tonight and I will report my findings
> tomorrow.

Sorry if I missed your reply/follow-up.  Is there anything I can do to help
here?  What's the "data structure" that GRUB needs?  

I know that we do some, er, funky things in the build process (to arrive at a
"raw" executable), but I think that we leave a file for each step in the build
process around (e.g., the jjos-elf file is an ELF-format version of the eventual
"raw" or "binary" file).  If GRUB requires ELF files (rather than "raw" -- I
seem to recall it wanted ELF), we can nuke the ELF->raw conversion and use that
instead to build the GRUB file.  Barring that, there are lots of things that
"objcopy" can do...

Let me know if there's anything else I can do to help.  I get the feeling that
there are more people in the "single machine" developer camp than in the "two
machines" camp.  Getting GRUB up would more than double the number of people
that could help, so I'd venture to say that it's the single most important task
any of us is working on.  (Don't feel any pressure, or anything! :=)

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From draft@fear.ch Mon, 16 Aug 1999 18:52:16 +0200 (CEST)
Date: Mon, 16 Aug 1999 18:52:16 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] jJOS speed

Hi John and all

On Sun, 15 Aug 1999, John Morrison wrote:

> Hi Thomas;
> 
> Thomas Bocek wrote:
> > I made a little benchmark with the old source and with the new one:
> > 
> > old: vga fillroutine ~7 sec
> > new: vga fillroutine ~5 sec
> > 
> > The results aren't exact, because
> > 
> > 1. made the test with a stop-watch
> > 
> > 2. the old source crashed after 7 sec, and the screen was only 1/5 filled,
> > the new source crashes after the screen is 4/5 filled.
> 
> OK, so if I were to extrapolate, the old one would finish in 35 seconds
> (barring a crash - HA), and the new one would finish in about 7 seconds
> (barring a crash), right?  So, this means we've speeded up the
> calls-to-native code about 5 times, eh?  

it's "only" about 40% faster: I marked the position of the (old source)
crash on my crt, and stopped the time, when the new source reached that
position.
But the clear screen seems to run much faster...

> If so, is performance creeping
> into the "acceptable for now" range (At least, until we do the
> JavaOS-style memory classes -- I'm also curious as to why the write32
> stuff is SLOWER -- can you try that one, too?)?  If so, is the
> memory-management stuff now the hottest fire?  

hmm a write32 is still about 10 times slower than a write8, but a write16
is about twice as fast as write8.

> With respect to the crash:
> 

> (1) When my version hangs after displaying the checkmark, is that the
> crash's failure mode?  I mean, is this the same "crash" you're getting? 
> If so, I can try and debug it.

the checkmark seems to run fine (there's no switching to text console
yet), but the pixel fillscreen test crashes after a while. Usualy I get
the screen filled with <000000> (div by zero I think) or a jbHeap error.

> (2) Do you think it would help if I wrote something that, in the case of
> a detectable crash, reset the VGA display to text mode and spat out some
> debugging info?  (Our own little BSOD!  What color should I make the
> screen?)

hmm blue? doh, sorry I mean red.

> I could print out:
> (a) a diagnostic string
> (b) the native-code stacktrace (with "nm" you could see where in the JVM
> we were)
> (c) and maybe some other Java stuff (I'd have to think about how to do
> this, and fit it on one screen -- there could be quite a few Java
> threads -- too many to fit on one screen)

printing on screen is ok, we can change the mode to 80x50 or 116x50, so we
could see more.

> We don't have enough of a console/GUI/Window Mgr for me to do anything
> else, right?

a log would be nice... but still no hdc driver (still searching for a good
manual).

> Again, thanks for the help -- I appreciate how, er, hostile the
> debugging environment is at this point in time!  I shall endeavor to
> make it less so.
[cut]

Thomas Bocek




From bpederson@geocities.com Mon, 16 Aug 1999 12:43:18 -0500
Date: Mon, 16 Aug 1999 12:43:18 -0500
From: Barry Pederson bpederson@geocities.com
Subject: [JOS-Kernel] jJOS speed

> hmm a write32 is still about 10 times slower than a write8, but a write16
> is about twice as fast as write8.

Hey guys, I've been lurking here a while (don't have a setup to run jJOS
- sure would be nice when you no longer need the Etherboot stuff), but
was wondering...

How about if you added a feature to allow arrays to be created that had
their values in particular regions of memory..something like:

    byte[] getBytes(long address, long length);

so you could write code like (just off the top of my head..don't really
know the details of VGA):

  byte[] vgaBuffer = jos.system.machine.getBytes(0xa0000, 0x10000);
  for (int i = 0; i < 0x10000; i++)
      vgaBuffer[i] = 0;

The only trick would be to make sure that when such an array was GC'd,
the underlying bytes were left alone and not reallocated. 

I'd think you'd save a fair amount of function call overhead, you'd be
able to use standard methods like java.lang.System.arraycopy(), and
you'd get the builtin Java array bounds checking for free.

Speaking of bounds checking, I understand that in at least some JVMs,
it'd be even faster to write code like:

  try
    {
    byte[] vgaBuffer = jos.system.machine.getBytes(0xa0000, 0x10000);
    int i = 0;
    while (true)
      vgaBuffer[i++] = 0;
    }
  catch (ArrayIndexOutOfBoundsException aioobe)
    {
    }
    
basically, don't bother explicitly checking the value of i (like the
"for" loop does) since the JVM will be checking it itself anyhow.

    Barry




From joakim.dahlstedt@appeal.se Mon, 16 Aug 1999 20:24:28 +0200
Date: Mon, 16 Aug 1999 20:24:28 +0200
From: Joakim Dahlstedt joakim.dahlstedt@appeal.se
Subject: [JOS-Kernel] jJOS speed

> Speaking of bounds checking, I understand that in at least some JVMs,
> it'd be even faster to write code like:
>
>   try
>     {
>     byte[] vgaBuffer = jos.system.machine.getBytes(0xa0000, 0x10000);
>     int i = 0;
>     while (true)
>       vgaBuffer[i++] = 0;
>     }
>   catch (ArrayIndexOutOfBoundsException aioobe)
>     {
>     }
>
> basically, don't bother explicitly checking the value of i (like the
> "for" loop does) since the JVM will be checking it itself anyhow.

I have to comment on this one.
Please, please, please... don't do that..
Don't!
You will make life much harder for an optimizing compiler.
Constant ranged loops can easily be optimized
(bounds checking removed, loopunrolling, etc.).
Please, don't rely on Exception-handling mechanism to handle cases that
are quite common. Exception handlers should handle exceptions from the
ordinary,
things that may take long time.

Joakim Dahlstedt




From jm@mak.com Mon, 16 Aug 1999 14:30:12 -0400
Date: Mon, 16 Aug 1999 14:30:12 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] jJOS speed

Hi Barry;

Barry Pederson wrote:
> How about if you added a feature to allow arrays to be created that had
> their values in particular regions of memory..something like:
> 
>     byte[] getBytes(long address, long length);

JavaOS has a hierarchy of "memory" classes with accessors and mutators like this
(e.g., they've got a setBytes method).  Hearing no objection, and now that we've
got a better mechanism for adding "built-in" method support, I'm going to set
about implementing them.  Should be a kick in the pants with respect to speed,
and it should be a damned sight prettier API than the one we've got.

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From jm@mak.com Mon, 16 Aug 1999 14:35:00 -0400
Date: Mon, 16 Aug 1999 14:35:00 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] jJOS speed

Hi;

Thomas Bocek wrote:
> it's "only" about 40% faster: I marked the position of the (old source)
> crash on my crt, and stopped the time, when the new source reached that
> position.
> But the clear screen seems to run much faster...

Hmm....

> hmm a write32 is still about 10 times slower than a write8, but a write16
> is about twice as fast as write8.

I'll take a look.  You would think that 4x fewer Java/native boundary crossing
would make up for any double-length operations.  Maybe there's a Real Bug (I
have noticed that, the way the x86 architecture works, that there is no "bus
error" exception when writing to non-existent memory (unless you are on a P5 or
above, and set some magical machine-specific register bit(s))) - but when I was
debugging the heap stuff, I noticed that writes to non-existent memory would
time-out in hardware, and thus appear to take WAY longer than writes to existing
memory.  (BTW, this should be better when I/we implement virtual memory.)

> > With respect to the crash:
> >
> 
> > (1) When my version hangs after displaying the checkmark, is that the
> > crash's failure mode?  I mean, is this the same "crash" you're getting?
> > If so, I can try and debug it.
> 
> the checkmark seems to run fine (there's no switching to text console
> yet), but the pixel fillscreen test crashes after a while. Usualy I get
> the screen filled with <000000> (div by zero I think) or a jbHeap error.

How can you tell which error occurs once the screen has gone to VGA mode?
 
> > (2) Do you think it would help if I wrote something that, in the case of
> > a detectable crash, reset the VGA display to text mode and spat out some
> > debugging info?  (Our own little BSOD!  What color should I make the
> > screen?)
> 
> hmm blue? doh, sorry I mean red.

Red Screen of Death?

> printing on screen is ok, we can change the mode to 80x50 or 116x50, so we
> could see more.

OK.

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From bpederson@geocities.com Mon, 16 Aug 1999 15:33:38 -0500
Date: Mon, 16 Aug 1999 15:33:38 -0500
From: Barry Pederson bpederson@geocities.com
Subject: [JOS-Kernel] jJOS speed


Joakim Dahlstedt wrote:
> 
> > Speaking of bounds checking, I understand that in at least some JVMs,
> > it'd be even faster to write code like:
> >
> >   try
> >     {
> >     byte[] vgaBuffer = jos.system.machine.getBytes(0xa0000, 0x10000);
> >     int i = 0;
> >     while (true)
> >       vgaBuffer[i++] = 0;
> >     }
> >   catch (ArrayIndexOutOfBoundsException aioobe)
> >     {
> >     }
> >
> > basically, don't bother explicitly checking the value of i (like the
> > "for" loop does) since the JVM will be checking it itself anyhow.
> 
> I have to comment on this one.
> Please, please, please... don't do that..
> Don't!
> You will make life much harder for an optimizing compiler.
> Constant ranged loops can easily be optimized
> (bounds checking removed, loopunrolling, etc.).

> Please, don't rely on Exception-handling mechanism to handle cases that
> are quite common. Exception handlers should handle exceptions from the
> ordinary,
> things that may take long time.

I guess what "ordinary" is depends on your point of view.  The idea
behind that particular trick is that the assignment to the array will be
made without any problem 65536 times and will fail on the 65537th.  So
you -could- say that something failing 1/65537th of the time is pretty
uncommon :)

But yeah, a person could always imagine some smart JIT that that trick
would confound - but lacking such a JIT, it's the kind of thing a person
might try in order to get unbearably slow code running a bit faster.

And to be honest, that example was probably unrealistic - it'd be much
better to have some sort of memset() equivalent to fill a range of
bytes.

	Barry

(I'm kind of itching now to figure out a way to get jJOS running somehow
so I can play with this stuff)




From tmiller@haverford.edu Mon, 16 Aug 1999 17:41:34 -0400 (EDT)
Date: Mon, 16 Aug 1999 17:41:34 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Re: Big changes

> > if things got far enough along to write in a native-only call.  (Likewise,
> > make sure that in8(), etc, calls were actually marked as native.)
> 
> It is my understanding that this is already the case (except maybe for the
> print() and println() methods...).  Any idea how that works from your prior
> experience with this?

	The experience is that decaf crashed in a wide variety of
dangerous ways before arriving at a native-code call.  You shouldn't,
actually, make the change quite yet, because it will probably break things
until we figure out what native calls Sun's code is making and emulate
them enough for things to work.  This is where it might also be worthwhile
to fetch classpath and look at how they do it / start the integration.

-_Quinn




From draft@fear.ch Tue, 17 Aug 1999 11:20:33 +0200 (CEST)
Date: Tue, 17 Aug 1999 11:20:33 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] jJOS speed

Hi John

On Mon, 16 Aug 1999, John Morrison wrote:

[cut]
 
> > > With respect to the crash:
> > >
> > 
> > > (1) When my version hangs after displaying the checkmark, is that the
> > > crash's failure mode?  I mean, is this the same "crash" you're getting?
> > > If so, I can try and debug it.
> > 
> > the checkmark seems to run fine (there's no switching to text console
> > yet), but the pixel fillscreen test crashes after a while. Usualy I get
> > the screen filled with <000000> (div by zero I think) or a jbHeap error.
> 
> How can you tell which error occurs once the screen has gone to VGA 
> mode?

I didn't say that's the error (well I didn't mean it)

while devoloping the vga driver I executed some of the code in text mode 
to see what's wrong and there I had some jbHeap errors and once a <00000000>.
Perhaps the error is the same, but I'm not sure.  I just said (wanted
to say) that this were the two errors I saw while developing the driver.

BTW the line:
String[][] test={{"0x0D10","test","Matrox Impression Plus","test"}};
does an jbHeap::allocate error too.

[cut]

Thomas Bocek




From jm@mak.com Tue, 17 Aug 1999 07:15:08 -0400
Date: Tue, 17 Aug 1999 07:15:08 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] jJOS speed

Hi Thomas;

Thomas Bocek wrote:
> while devoloping the vga driver I executed some of the code in text mode
> to see what's wrong and there I had some jbHeap errors and once a <00000000>.
> Perhaps the error is the same, but I'm not sure.  I just said (wanted
> to say) that this were the two errors I saw while developing the driver.

The <00000000> things are actually interrupts (?!) -- interrupt zero, actually
-- that occur but have no registered/assigned handler routine.  And, of course,
I don't have my books in front of me now, so I can't tell you what interrupt
that is.  I'll check up on this.  Weird.

The only error the heap currently can detect is an "out of memory" error.  Is
this the other problem you're seeing?

> BTW the line:
> String[][] test={{"0x0D10","test","Matrox Impression Plus","test"}};
> does an jbHeap::allocate error too.

Hmm...  Either the heap really thinks it's out of memory, or it could be a bug
in the Java array stuff (which is kind of built-in).

Might I be so bold as to ask you to please let me and/or Todd know about such
easily-reproducible errors?  They're wonderful in that they will help us to
debug jjos and decaf, and it sure is better to track down bugs like that than it
is to let them quietly lie dormant until the rear up and bite us on the
collective ass.

Thanks!  I'll look into both of these ASAP (probably Thursday at the earliest,
Friday at the latest).

By the way, George (Hi, George!) was kind enough to send me a cut at the
conservative GC heap implementation, which I'll also be looking into ASAP. 
Hopefully, jjos+decaf should stay up long enough to be "interesting" after it's
integrated.

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From jm@mak.com Tue, 17 Aug 1999 07:23:09 -0400
Date: Tue, 17 Aug 1999 07:23:09 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Re: Big changes

Hi Todd;

Todd L. Miller wrote:
>         The experience is that decaf crashed in a wide variety of
> dangerous ways before arriving at a native-code call.  You shouldn't,
> actually, make the change quite yet, because it will probably break things
> until we figure out what native calls Sun's code is making and emulate
> them enough for things to work.  This is where it might also be worthwhile

OK.  Does anybody have this checking on his To-Do list?

> to fetch classpath and look at how they do it / start the integration.

I sent an email to several individual classpath developers last night, but have
not received a reply yet.  However, I stupidly failed to send it to the official
"classpath" mailing list, because I had been corresponding with these guys
off-and-on for the last couple of months and just figured I'd keep it personal. 
Also, the classpath web site hasn't changed (according to the reported "age" of
the pages) since February (although some of the CVS files seem to be vintage
mid-June).  I hope this doesn't mean the project died.  That would be dreadful.

Has anybody out there in JOS-land heard anything from these guys?

If I don't get anything back from them by sometime later this afternoon, I'll
contact them again.

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From bpederson@geocities.com Tue, 17 Aug 1999 09:33:24 -0500
Date: Tue, 17 Aug 1999 09:33:24 -0500
From: Barry Pederson bpederson@geocities.com
Subject: [JOS-Kernel] jJOS speed


John Morrison wrote:
> 
> Hi Barry;
> 
> Barry Pederson wrote:
> > How about if you added a feature to allow arrays to be created that had
> > their values in particular regions of memory..something like:
> >
> >     byte[] getBytes(long address, long length);
> 
> JavaOS has a hierarchy of "memory" classes with accessors and mutators like this
> (e.g., they've got a setBytes method).  

I didn't mean that the method should make a -copy- of the bytes at the
given address, but rather than a byte array object somehow be created
with the underlying storage at a particular address.  

Looking at jbarray.h, I guess what I'm saying is: create an array with
the "myElements" field set to the specified address, and
"myNumberOfElements" to the specified length.

With such a deal, there'd be no need for a "setBytes" method, since
every value stored in the array would go directly where you want it.  
It'd be just about as handy as writing code with C pointers, but safer
because of the inherent bounds checking of Java.

	Barry




From george.marrows@triptych.freeserve.co.uk Fri, 6 Aug 1999 18:45:44 +0100
Date: Fri, 6 Aug 1999 18:45:44 +0100
From: George Marrows george.marrows@triptych.freeserve.co.uk
Subject: [JOS-Kernel] Garbage collection

John, Todd and all --

I hereby promise to make my mails clearer in future! To elaborate:

> >         [GAM]  Hmm.. plenty of warnings about doing arithmetic with
> void*.
> > I'll sort them out.
>
> Yeah, this particular embarrassment is my fault, not Todd's.  It worked,
> so I
> focussed upon new functionality, not cleaning it up.  If you have already
> done
> so, please let me know.  If not, this would be a good time to also put in
> Robert
> Fitzsimons' (Hi, Robert!) code to enable booting via GRUB (I seem to
> recall
> that, amongst the worst offenders in generating warnings, was the code
> which
> looked for the Etherboot-specific data structures located in various bits
> of
> memory...)
>
[GAM]  The source of the void* warnings is _my_ code (unfortunately). gcc
didn't complain about what I was doing, but g++ does (vociferously). I'll
sort them out before handing the code over -- there's so much noise from
spurious warnings, it's all too easy to miss the important stuff. I only got
2 or 3 warnings from the jjos code from CVS.

BTW, I'd be very interested in booting via GRUB -- I only have the one PC,
so Etherboot is not an option.

> >         [GAM]  I propose to put the gc code in a separate directory:
> > common/nativecode/gc. How does that sound? It's currently in
> > common/nativecode, but it bloats that directory somewhat. Now I've just
> got
> > to sort out the accursed makefile :-(
>
> OK.  Works for me.  Sorry about the makefile trouble.  If there's a better
> way
> to do this, I'd sure be interested...  I think we have similar problems in
> the
> bytecode directory, in that we have no platform-specific bytecode files
> (e.g.,
> VGA driver) yet.
>

[GAM]  The "accursed" was meant to apply to make files in general, not the
jjos ones. I'm not in any way an expert on makefiles, so I don't have any
suggestions for improvements. (My lack of expertise is probably why I end up
cursing makefiles  - though I doubt anyone actually loves them, do they? ;-)

> The location of the sole native-code stack (sole because we're not doing
> multithreading yet in the kernel) is easily-computable at the point where
> you
> need to scan for the GC roots.  Right now (I don't have the sources in
> front of
> me, so this is from memory), I think there's a magic value that gets
> crammed
> into the stack pointer register (2MB?), but I don't think this is saved
> into any
> easily-accessible-from-C++ variable, although the heap-initialization code
> *does* avoid stepping on the stack.  Sorry...  I can fix this...  Really!
>
[GAM]  That sounds good, thanks.

I've just been rereading bigsurv.ps and come across a couple of potential
unpleasantnesses:

1. Do the kernel or decaf ever only have a handle on an object by the middle
(as it were) while maintaining the necessary info to find the head of the
object again. eg it might have pointer into element 100 of a 150 element
array, but keep the offset from the start (100) in some other variable so
that the start of the object can be rediscovered. The GC at the moment will
only mark objects for which there is a pointer to the head somewhere, so
will fail to mark the example array as in use. If necessary, I think I can
change it so that pointers to the middle of an object lead to that object
being marked. I'd prefer not to though, cos it will make the mark phase more
inaccurate and slower.

2. A similar problem, but at the C++ compiler level. bigsurv.ps claims that
some compilers, particularly when doing heavy optimisation, perform
algebraic transforms / bit ops on pointers which can disguise them or make
them temporarily not point at the head of the object (or even, I suppose,
into the heap). I have no idea if g++ does this, but it is something to be
aware of as it will break a conservative garbage collector.

-- George






From tmiller@haverford.edu Tue, 17 Aug 1999 18:10:48 -0400 (EDT)
Date: Tue, 17 Aug 1999 18:10:48 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Re: Big changes

> >         The experience is that decaf crashed in a wide variety of
> > dangerous ways before arriving at a native-code call.  You shouldn't,
> > actually, make the change quite yet, because it will probably break things
> > until we figure out what native calls Sun's code is making and emulate
> > them enough for things to work.  This is where it might also be worthwhile
> 
> OK.  Does anybody have this checking on his To-Do list?

	Eventually.  Don't know how long it'll take to get to it, tho.

-_Quinn




From tmiller@haverford.edu Tue, 17 Aug 1999 18:12:45 -0400 (EDT)
Date: Tue, 17 Aug 1999 18:12:45 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] jJOS speed

> Looking at jbarray.h, I guess what I'm saying is: create an array with
> the "myElements" field set to the specified address, and
> "myNumberOfElements" to the specified length.

	This is actually a really intelligent suggestion.  JM, I don't
have the jos docs handy, but do they allow this with their memory model?
It seems like a very good way to speed things up immensely, and the
standard locking ops will work on arrays, as well.

-_Quinn




From RegierAveryJ@JDCORP.deere.com Wed, 18 Aug 1999 10:21:15 -0500
Date: Wed, 18 Aug 1999 10:21:15 -0500
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [JOS-Kernel] Adventures with the tool chain

Hi all,

Last night, after a year of waiting for Linux to finally work with my
hardware and other assorted challenges, I was finally able to get almost
everything in the tool chain to compile!  I had to make some changes in the
mknbi-jos Makefile and mknbi.c to get mknbi to compile with Etherboot 4.2.?.
I also found that a few things in the tool chain are undocumented.  For
instance, I had to get the blackdown JDK, but no where in the docs was that
mentioned, and no mention of what version was required and/or known to work
either.  I ended up getting the latest (1.1.7v3) and it compiles, though I
don't know about running yet.  I am using newer version of Etherboot and
nasm than the tested versions, so I don't know yet whether they will run or
not (they do finally compile).  I also discovered that bootp is no longer
recommended or distributed with RedHat 6.0.  I had to go back and find in in
5.2.  I still don't know if this is going to work.  According to the
Etherboot documents, DHCP(?) is now recommended instead of bootp in RedHat
6.  I don't know why this is the case, but we may need to consider upgrading
our tool chain in order to keep current.  I can't go back to RedHat 5.2
because of the above mentioned hardware compatibility problems which were
finally solved with RedHat 6.  (RedHat 6, BTW, I have found to be far
superior and much easier to use and work with than 5.2 was.  I heartily
recommend an upgrade if you are on 5.2.)

Here are my outstanding problems:
* The i386 build compiles, but the host build does not.  It is complaining
about missing a file: /etc/lib/gnu/types.h (or something like that, I dont'
have it in front of me.)  And lo and behold, the directory is there, but not
the file.  Am I missing an RPM?  If so, which one might that be?
* I was able to build the floppy and I tried to boot JJOS over my home
network, but for some reason it couldn't find my NIC.  Was there maybe a
configuration step that I could have been missing?  What are the standard
steps you need to go through to get that to work reliably  I am reasonably
sure I have the right driver (Tulip) for my NIC.
* The above DHCP vs. bootp question.

I also learned yesterday that the maker of one of my video cards (NVIDIA)
has released OS-independent source code for the driver with loads of
documentation.  There is a good chance of my being able to massage that into
a driver for JJOS.  I will need GRUB first, because that video card is on my
host machine, not the slave.

I'm looking forward to actually seeing this thing run and be able to
contribute!

Regards,
Avery J. Regier





From jm@mak.com Wed, 18 Aug 1999 16:33:01 -0400
Date: Wed, 18 Aug 1999 16:33:01 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Adventures with the tool chain

Hello;

Regier Avery J wrote:
> Last night, after a year of waiting for Linux to finally work with my
> hardware and other assorted challenges, I was finally able to get almost
> everything in the tool chain to compile!  I had to make some changes in the
> mknbi-jos Makefile and mknbi.c to get mknbi to compile with Etherboot 4.2.?.
> I also found that a few things in the tool chain are undocumented.  For
> instance, I had to get the blackdown JDK, but no where in the docs was that

I don't actually use either Kaffe or blackdown (I could never seem to get Kaffe
happy anything), but instead use the "guavac" Java compiler which comes with
RedHat 6.0.

> mentioned, and no mention of what version was required and/or known to work
> either.  I ended up getting the latest (1.1.7v3) and it compiles, though I
> don't know about running yet.  I am using newer version of Etherboot and
> nasm than the tested versions, so I don't know yet whether they will run or
> not (they do finally compile).  I also discovered that bootp is no longer
> recommended or distributed with RedHat 6.0.  I had to go back and find in in

Hmm...  I am using stock RedHat 6.0, and bootp is there and works fine (I think
I had to enable it via either chkconfig or linuxconf).

> 5.2.  I still don't know if this is going to work.  According to the
> Etherboot documents, DHCP(?) is now recommended instead of bootp in RedHat
> 6.  I don't know why this is the case, but we may need to consider upgrading
> our tool chain in order to keep current.  I can't go back to RedHat 5.2
> because of the above mentioned hardware compatibility problems which were
> finally solved with RedHat 6.  (RedHat 6, BTW, I have found to be far
> superior and much easier to use and work with than 5.2 was.  I heartily
> recommend an upgrade if you are on 5.2.)

Like I said, I am using RedHat 6.0 with the existing toolchain.  I'll be more
than happy to help you get this working.  I do not think that there should be
any issue with respect to the version of NASM you're using -- we don't really do
anything, er, creative with it (I think there's only some 300 lines of asm).  I
*do* know there *are* problems with pre-4.0 Etherboot (related to the maximum
workable size of the downloaded image, and, at 9MB, we're pretty much pushing
the envelope).

> Here are my outstanding problems:
> * The i386 build compiles, but the host build does not.  It is complaining
> about missing a file: /etc/lib/gnu/types.h (or something like that, I dont'
> have it in front of me.)  And lo and behold, the directory is there, but not
> the file.  Am I missing an RPM?  If so, which one might that be?

Ah.  You probably need to remake the "dependencies" in the Makefile by building
the "depend" target.  I seem to recall an issue concerning the exact format of
the "Don't delete this line, makedepend depends upon it" between Todd's
distribution and my RedHat one.  We should probably separate out that into a
separate "included" part of the Makefile so as to make this easier.

> * I was able to build the floppy and I tried to boot JJOS over my home
> network, but for some reason it couldn't find my NIC.  Was there maybe a
> configuration step that I could have been missing?  What are the standard
> steps you need to go through to get that to work reliably  I am reasonably
> sure I have the right driver (Tulip) for my NIC.

There is a configuration step in how you build the floppy -- you must also "dd"
onto the floppy the right NIC-specific driver (the directions that come with
Etherboot explain this).  Please also be advised that somebody else (I forget
who) uses Netboot instead, which uses NDIS packet-drivers (which I understand
are easier to come by) instead of custom assembly drivers.  Either should work
fine.

> * The above DHCP vs. bootp question.

I am using BOOTP.  I do not know of anybody who has successfully used DHCP. 
(Hell, I don't know anybody who even *tried*.)

> I'm looking forward to actually seeing this thing run and be able to
> contribute!

Great!  Let me know what else I can do to help!

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From tmiller@haverford.edu Wed, 18 Aug 1999 17:12:31 -0400 (EDT)
Date: Wed, 18 Aug 1999 17:12:31 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Adventures with the tool chain

> Last night, after a year of waiting for Linux to finally work with my
> hardware and other assorted challenges, I was finally able to get almost
> everything in the tool chain to compile!

	Hey, congratulations!

> I had to make some changes in the
> mknbi-jos Makefile and mknbi.c to get mknbi to compile with Etherboot 4.2.?.

	Hm.  I'm currently using Etherboot-4.2 without any changes,
though I'll admit it's been a while since I compiled mknbi-jos.

> I also found that a few things in the tool chain are undocumented.  For
> instance, I had to get the blackdown JDK, but no where in the docs was that
> mentioned, and no mention of what version was required and/or known to work
> either.  I ended up getting the latest (1.1.7v3) and it compiles, though I
> don't know about running yet.

	The only part of the JDK that decaf/JJOS should require is the
classfile, and that dependency will disappear when we start distributing
classpath with the source, which will be whenever we (finally) integrate
it.

	bootp is for etherboot, newer versions of which should support
DHCP using the -DDHCP_SUPPORT compile option.  (see
etherboot-4.2/doc/text/README.txt).  

> Here are my outstanding problems:
> * The i386 build compiles, but the host build does not.  It is complaining
> about missing a file: /etc/lib/gnu/types.h (or something like that, I dont'
> have it in front of me.)  And lo and behold, the directory is there, but not
> the file.  Am I missing an RPM?  If so, which one might that be?

	gnu/types.h is included by sys/types.h, and should be in
/usr/include (at least, on my slackware system.)  It should not be
directly included by any file in JJOS/decaf (which includes sys/types.h).

> * I was able to build the floppy and I tried to boot JJOS over my home
> network, but for some reason it couldn't find my NIC.  Was there maybe a
> configuration step that I could have been missing?  What are the standard
> steps you need to go through to get that to work reliably  I am reasonably
> sure I have the right driver (Tulip) for my NIC.

	Be aware with the tulip driver that some of Netgear's cards need
Netgear's tulip driver because the aren't the same chips as they used to
be.  If that's not it, the same README referenced above notes that the
tulip driver isn't well tested, and essentially needs to be written to
include each particular specifically.  It might be worth the money in
terms of time saved just to pick up a cheap PCI NE2000 clone...

> I also learned yesterday that the maker of one of my video cards (NVIDIA)
> has released OS-independent source code for the driver with loads of
> documentation.  There is a good chance of my being able to massage that into
> a driver for JJOS.  I will need GRUB first, because that video card is on my
> host machine, not the slave.

	I believe that someone is working on GRUB right now.  If not, and
anyone is interested, _please_ go ahead.

> I'm looking forward to actually seeing this thing run and be able to
> contribute!

	I'm looking forward to seeing your stuff.  Hope I helped here.
(Oh, BTW, if you've got specific suggestions for the docs, just right them
into the docs and send them along -- I'll drop the changes into CVS.)

-_Quinn





From jm@mak.com Wed, 18 Aug 1999 17:27:23 -0400
Date: Wed, 18 Aug 1999 17:27:23 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] jJOS speed

Hi;

Todd L. Miller wrote:
> 
> > Looking at jbarray.h, I guess what I'm saying is: create an array with
> > the "myElements" field set to the specified address, and
> > "myNumberOfElements" to the specified length.
> 
>         This is actually a really intelligent suggestion.  JM, I don't
> have the jos docs handy, but do they allow this with their memory model?
> It seems like a very good way to speed things up immensely, and the
> standard locking ops will work on arrays, as well.

JavaOS has memory classes exactly like that --- Figure 3-20, on page 3-41 of the
JavaOS Reference Guide explains the heirarchy (abstract classes in lowercase):

memory
  main memory
    accessiblememory
      portiomemory
        UnSwappedPortIOMemory
        SwappedPortIOMemory
      virtualmemory
        virtualiomemory
          UnSwappedVirtualIOMemory
          SwappedVirtualIOMemory
        virtualregularmemory
          UnSwappedVirtualRegularMemory
          VirtualRegularMemory
    PhysicalMemory
  MemoryDescriptor
  DMAMemory

Unfortunately, I cannot seem to find a tabular listing for all the methods.  The
accompanying text lists some methods, but not all.  The "Inside JavaOS" book
lists some I couldn't find in the documents.  One of them was a "setBytes"
method that set all the memory in the memory object (can't remember which one --
the book is at home) to the value you specified.  Correct me if I'm wrong, but
this is exactly what we are wanting here.

Note also how useful classes like these would be for a Java-language paging
daemon/thread.  And for drivers (where we use special in8/out8 methods, they use
a memory object to organize the ports).
    
-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From onewith1@flash.net Wed, 18 Aug 1999 19:56:57 -0500
Date: Wed, 18 Aug 1999 19:56:57 -0500
From: Matt Albrecht onewith1@flash.net
Subject: [JOS-Kernel] jJOS speed

Yodels.

John Morrison wrote:

>Hi;
>
>Todd L. Miller wrote:
>>
>Note also how useful classes like these would be for a Java-language paging
>daemon/thread.  And for drivers (where we use special in8/out8 methods,
they use
>a memory object to organize the ports).

This was to support, I figured, machines like the Power PC where the I/O
ports can be memory mapped.  So their model makes both x86s and Power PCs
work the same way with I/O ports.  I'm sure this would extend further with
other machines, but this is all I'm familiar with.

I'm /totally/ for copying their memory model.  Its the most extensive and
inclusive approach to a memory model that I've ever seen.  But, I'm also for
not being sued by IBM...

-Matt




From gwest@krdl.org.sg Thu, 19 Aug 1999 09:07:12 +0800
Date: Thu, 19 Aug 1999 09:07:12 +0800
From: Glenn West gwest@krdl.org.sg
Subject: [JOS-Kernel] jJOS speed

Hi everyone.

I'm currently in the process of doing a "JAVA" Machine core that can be put
in a FPGA. so JOS is rather interesting. Right now we are at about 30,000
gates. So far its clean-room.

The web-sites a bit non-functional, so could someone give me a nice overview
of current status.

On the memory model, a flat memory model is prefered in a embedded space,
where I'm looking at. 
-----------------------------------------------------
Glenn West - Senior Member, Research Staff
Kent Ridge Digital Labs (KRDL)
Voice: (65) 874-8210 Fax: (65) 776-8109
21 Heng Mui Keng Terrace
Singapore 119613 Singapore
-----------------------------------------------------
         



From tmiller@haverford.edu Wed, 18 Aug 1999 23:19:26 -0400 (EDT)
Date: Wed, 18 Aug 1999 23:19:26 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] jJOS speed

> JavaOS has memory classes exactly like that 
[where the array is located in an interesting chunk of physical ram]

	Great, this is a good reason to use the JavaOS APIs.  (BTW, our
IRQ handling is in dire need of fixing, so I'll go ahead and clone that
part of the classes out when I've got the time.)  Right now I'm working on
correcting some bugs I either induced or unmasked in the keyboard driver
while getting virtual-console switching to work.  (At this point, the
consoles are just aware that they're being switched, and aren't actually
redrawing the screen & keeping track of scroll-back, etc... I figure the
VGA driver will be worth waiting for.  And I've gotten down into the
invoke methods in interp.cc with the error-checking/exceptions stuff. 
*Sigh*...)  At any rate, I'm hoping to upload my stuff to CVS in the
middle of next week.  (Possibly fold the gc in, also... we'll see.)

-_Quinn




From thomas.olausson@home.se Wed, 18 Aug 1999 23:44:14 -0400
Date: Wed, 18 Aug 1999 23:44:14 -0400
From: thomas olausson thomas.olausson@home.se
Subject: [JOS-Kernel] JOS for StrongARM

I'm new to the list.
Greetings all.

Has anyone installed JOS for a StrongARM platform?

Thomas



From hilarycheng@usa.net Thu, 19 Aug 1999 15:11:23 +0800
Date: Thu, 19 Aug 1999 15:11:23 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] Adventures with the tool chain

Hi,

>
>I also learned yesterday that the maker of one of my video cards (NVIDIA)
>has released OS-independent source code for the driver with loads of
>documentation.  There is a good chance of my being able to massage that
into
>a driver for JJOS.  I will need GRUB first, because that video card is on
my
>host machine, not the slave.
>
>I'm looking forward to actually seeing this thing run and be able to
>contribute!
>

I would like to read the document of NVIDIA. Where can I get it ? :o
Since I am developing a Generic Graphics Adaptor Driver.

Regards,

Hilary




From tmiller@haverford.edu Thu, 19 Aug 1999 07:47:25 -0400 (EDT)
Date: Thu, 19 Aug 1999 07:47:25 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] JOS for StrongARM

> Has anyone installed JOS for a StrongARM platform?

	JOS does not have a port for StrongARM, but you're welcome to work
on one.

-_Quinn




From RegierAveryJ@JDCORP.deere.com Thu, 19 Aug 1999 08:03:03 -0500
Date: Thu, 19 Aug 1999 08:03:03 -0500
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [JOS-Kernel] Adventures with the tool chain

	> Here are my outstanding problems:
	> * The i386 build compiles, but the host build does not.  It is
complaining
	> about missing a file: /etc/lib/gnu/types.h (or something like
that, I dont'
	> have it in front of me.)  And lo and behold, the directory is
there, but not
	> the file.  Am I missing an RPM?  If so, which one might that be?

John Morrison wrote:
	Ah.  You probably need to remake the "dependencies" in the Makefile
by building the "depend" target.  I seem to recall an issue concerning the
exact format of the "Don't delete this line, makedepend depends upon it"
between Todd's distribution and my RedHat one.  We should probably separate
out that into a separate "included" part of the Makefile so as to make this
easier.

Todd Miller wrote:
	gnu/types.h is included by sys/types.h, and should be in
/usr/include (at least, on my slackware system.)  It should not be directly
included by any file in JJOS/decaf (which includes sys/types.h).

I did the make on the 'depend' target, but that didn't solve the problem.
Could someone please do a 
'rpm -q -f /usr/include/gnu/types.h' on their RedHat system and tell me what
package that belongs to?  it would help greatly.

Thanks,
Avery J. Regier





From RegierAveryJ@JDCORP.deere.com Thu, 19 Aug 1999 08:06:33 -0500
Date: Thu, 19 Aug 1999 08:06:33 -0500
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [JOS-Kernel] Adventures with the tool chain

Hilary,

Here is all that I know on the subject:

http://linuxtoday.com/stories/8796.html

NVidia Releases Open Source OS-Neutral Driver Suite for RIVA Chips
Aug 16, 1999, 05:05 UTC (2 Talkbacks) 
[ Linux Today reader ewhac writes: ] 

Several weeks ago, the linux-nvidia list (formerly the Riva Enlightenment
Project) 
reported that NVidia released a binary-only OS-neutral driver core for their
chips. 
Well, NVidia has released an update, and this time they're serving up
source! (Note: 
This is not the same as the XFree86 source re  

NVIDIA has opened up an area on their Web site, where is contained an
OS-neutral 
driver core. The suite is intended for developers to write their own drivers
and 3D 
accelerators for the RIVA 128, TNT, and TNT2 chips on the platform of their
choice. 
Materials available so far include an implementa  

Also included in the distribution are OS interface documentation, rendering
primitive 
documentation, and source code to example programs, test programs, and
sample 
driver implementations for Linux and Windows-NT.  

My reading of the docs suggests that the NVIDIA API supports impressive
levels of 
concurrency at a hardware level through multiple independent contexts and an

object-oriented-like interface. It looks like there's enough information
here to make 
high-performance 3D-in-a-window comparatively easy t  



Avery J. Regier



> -----Original Message-----
> From:	Hilary Cheng [SMTP:hilarycheng@usa.net]
> Sent:	Thursday, August 19, 1999 3:11 AM
> To:	kernel@jos.org
> Subject:	Re: [JOS-Kernel] Adventures with the tool chain
> 
> Hi,
> 
> >
> >I also learned yesterday that the maker of one of my video cards (NVIDIA)
> >has released OS-independent source code for the driver with loads of
> >documentation.  There is a good chance of my being able to massage that
> into
> >a driver for JJOS.  I will need GRUB first, because that video card is on
> my
> >host machine, not the slave.
> >
> >I'm looking forward to actually seeing this thing run and be able to
> >contribute!
> >
> 
> I would like to read the document of NVIDIA. Where can I get it ? :o
> Since I am developing a Generic Graphics Adaptor Driver.
> 
> Regards,
> 
> Hilary
> 
> 
> _______________________________________________
> Kernel maillist  -  Kernel@jos.org
> http://jos.org/mailman/listinfo/kernel



From jm@mak.com Thu, 19 Aug 1999 14:11:43 +0000
Date: Thu, 19 Aug 1999 14:11:43 +0000
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] JOS for StrongARM

Hello Thomas;

thomas olausson wrote:
> Has anyone installed JOS for a StrongARM platform?

Is this for a StrongARM running Linux (Netwinder??  Or is that a vanilla
ARM part?), or for a bare-iron platform?

Either way, you'd have to make a 3rd (we've got 2 now) "arch" target. 
The real trick for bare-iron is getting both the program and
zipfile-ramdisk into memory.  It calls for a studly bootloader...

Let me know what we can do to help...  I am a real fan of the ARM
architecture in general, and the StrongARM in particular (how many
MIPS/Watt again?).

-jm

-- 
==== John Morrison
==== MaK Technologies Inc.
==== 185 Alewife Brook Parkway, Cambridge, MA 02138
==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115
==== fax:617-876-9208
==== jm@mak.com



From thomas.olausson@home.se Thu, 19 Aug 1999 10:08:25 -0400
Date: Thu, 19 Aug 1999 10:08:25 -0400
From: thomas olausson thomas.olausson@home.se
Subject: [JOS-Kernel] JOS for StrongARM

>         JOS does not have a port for StrongARM, but you're welcome to work
> on one.

Where do I start?

Thomas



From thomas.olausson@home.se Thu, 19 Aug 1999 10:22:52 -0400
Date: Thu, 19 Aug 1999 10:22:52 -0400
From: thomas olausson thomas.olausson@home.se
Subject: [JOS-Kernel] JOS for StrongARM

> Let me know what we can do to help...  I am a real fan of the ARM
> architecture in general, and the StrongARM in particular (how many
> MIPS/Watt again?).


I have a half prototype/half finished Web Phone from Lucent,
normally running Inferno. Inferno is discontinued by Lucent,
so no much help from them.

It's got a 16 MB ram and probably as much Flash memory,
touchscreen,  keyboard and 2 PCMCIA slots.

I know how to make Inferno kernels and upload them to the board.

The bootloader on the board expects gzipped kernels in ARM Image Format
(AIF), that's why I couldn't continue on
arm-linux-gcc, because I don't know what AIF is, haven't
seen any useful info on this.

So the good part is that there's a bootloader there already,
which I communicate with via minicom and serial link.

Thomas



From jm@mak.com Thu, 19 Aug 1999 14:34:02 +0000
Date: Thu, 19 Aug 1999 14:34:02 +0000
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] JOS for StrongARM

Hi,

I know it's Poor Form to follow-up your own post, but I made a, well,
boo-boo.

John Morrison wrote:
> Is this for a StrongARM running Linux (Netwinder??  Or is that a vanilla
> ARM part?), or for a bare-iron platform?
> 
> Either way, you'd have to make a 3rd (we've got 2 now) "arch" target.

Whoops -- if it's running Linux, I *think* you should be able to build
the "host" target.

-jm

-- 
==== John Morrison
==== MaK Technologies Inc.
==== 185 Alewife Brook Parkway, Cambridge, MA 02138
==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115
==== fax:617-876-9208
==== jm@mak.com



From thomas.olausson@home.se Thu, 19 Aug 1999 13:22:22 -0400
Date: Thu, 19 Aug 1999 13:22:22 -0400
From: thomas olausson thomas.olausson@home.se
Subject: [JOS-Kernel] JOS for StrongARM

> Whoops -- if it's running Linux, I *think* you should be able to build
> the "host" target.

The binutils are only for ELF and other output formats.
:(

Thomas



From jm@mak.com Thu, 19 Aug 1999 17:53:39 +0000
Date: Thu, 19 Aug 1999 17:53:39 +0000
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] JOS for StrongARM

Hi;

thomas olausson wrote:
> I know how to make Inferno kernels and upload them to the board.

What tools do you use to do this?

> The bootloader on the board expects gzipped kernels in ARM Image Format
> (AIF), that's why I couldn't continue on
> arm-linux-gcc, because I don't know what AIF is, haven't
> seen any useful info on this.

The catch would be if the bootloader can't load multiple "modules"
(i.e., the native code to one address, and the bytecode zipfile ramdisk
to another).

If it can't, but you *can* have a big, contiguous data section (we can't
on the PC due to physical memory address space layout) you can probably
hexify the ramdisk and just stick it in the .data section (or whatever)
of the AIF file -- assuming that a couple-MB initialized data array
doesn't choke your tools.  It would actually be a lot easier than what
we do (we have to find tabular module directories at runtime).

-jm

-- 
==== John Morrison
==== MaK Technologies Inc.
==== 185 Alewife Brook Parkway, Cambridge, MA 02138
==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115
==== fax:617-876-9208
==== jm@mak.com



From jm@mak.com Thu, 19 Aug 1999 18:02:20 +0000
Date: Thu, 19 Aug 1999 18:02:20 +0000
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] JOS for StrongARM

Hi;

thomas olausson wrote:
> 
> >         JOS does not have a port for StrongARM, but you're welcome to work
> > on one.
> 
> Where do I start?

common
arch
  host
     bytecode
     nativecode
  i386
      bytecode
      nativecode
  strongarm (clone the "host" directory contents here and edit to taste)
      bytecode
      nativecode (edit makefiles, build in here)

The tools, as I mentioned before, will probably be more of an issue.

-jm		

-- 
==== John Morrison
==== MaK Technologies Inc.
==== 185 Alewife Brook Parkway, Cambridge, MA 02138
==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115
==== fax:617-876-9208
==== jm@mak.com



From jm@mak.com Thu, 19 Aug 1999 18:22:36 +0000
Date: Thu, 19 Aug 1999 18:22:36 +0000
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Adventures with the tool chain

Hi;

Regier Avery J wrote:
> I did the make on the 'depend' target, but that didn't solve the problem.
> Could someone please do a
> 'rpm -q -f /usr/include/gnu/types.h' on their RedHat system and tell me what
> package that belongs to?  it would help greatly.

I don't have that file, either, and I build OK.  (I *do* need
/usr/include/sys/types.h, though.)  Would you please be so kind as to
cut-and-paste the exact errors into a reply?  Is it "make" or gcc/g++
that's got heartburn?

-jm

-- 
==== John Morrison
==== MaK Technologies Inc.
==== 185 Alewife Brook Parkway, Cambridge, MA 02138
==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115
==== fax:617-876-9208
==== jm@mak.com



From jm@mak.com Thu, 19 Aug 1999 18:39:35 +0000
Date: Thu, 19 Aug 1999 18:39:35 +0000
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] jJOS speed

Hi;

"Todd L. Miller" wrote:
>         Great, this is a good reason to use the JavaOS APIs.  (BTW, our
> IRQ handling is in dire need of fixing, so I'll go ahead and clone that

OK, I'll bite.  Given that we pretty much don't distinguish interrupts
from IRQs, I'm guessing you mean interrupt handling is in a losing way. 
What, specifically?  What will you be cloning (native classes? 
bytecode?)?  How will cloning help?

> part of the classes out when I've got the time.)  Right now I'm working on
> correcting some bugs I either induced or unmasked in the keyboard driver
> while getting virtual-console switching to work.  (At this point, the
> consoles are just aware that they're being switched, and aren't actually
> redrawing the screen & keeping track of scroll-back, etc... I figure the
> VGA driver will be worth waiting for.  And I've gotten down into the

I'm not even sure of the requirement to have virtual consoles, frankly. 
While it's a "cool" feature of Linux, UNIX (and just about every other
operating system out of the dozen or so ones I've ever seen or used in
over 20 years) gets along without it quite nicely.  Assuming I've
correctly figured out what you're talking about (no better than even
money, I'll wager), can't that wait?  Remember that all the native code
has got to fit between about 1K and 600K in memory.

> invoke methods in interp.cc with the error-checking/exceptions stuff.
> *Sigh*...)  At any rate, I'm hoping to upload my stuff to CVS in the
> middle of next week.  (Possibly fold the gc in, also... we'll see.)

I was planning to hook up the GC stuff this weekend.  By the flurry of
email from me today, I am sure you can tell I'm at home hacking away,
and not at the Day Job (and I won't be again until Monday).

-jm

-- 
==== John Morrison
==== MaK Technologies Inc.
==== 185 Alewife Brook Parkway, Cambridge, MA 02138
==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115
==== fax:617-876-9208
==== jm@mak.com



From jm@mak.com Thu, 19 Aug 1999 18:55:09 +0000
Date: Thu, 19 Aug 1999 18:55:09 +0000
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] JOS for StrongARM

Hi;

thomas olausson wrote:
> 
> > Whoops -- if it's running Linux, I *think* you should be able to build
> > the "host" target.
> 
> The binutils are only for ELF and other output formats.
> :(

I am pretty darned sure that the binutils (e.g., objcopy) are only used
in the arch/i386 built target.  The arch/host target should only use the
vanilla linker/loader (e.g., ld).

If you've got a linker/loader for AIF, you should be OK.  (You gotta
give the bootloader what it expects, and it expects AIF, right?  Our
Ethernet bootloader expects, in part, a "raw" file, and we needed to use
objcopy only to turn the default ELF format into a "raw" file whose
entry point was at the zeroth byte, and whose .bss section was actually
represented as zeroes in the file.)

In summary, if I understand what you're trying to do (and maybe I
*STILL* don't), I don't think you need the binutils.

-jm

-- 
==== John Morrison
==== MaK Technologies Inc.
==== 185 Alewife Brook Parkway, Cambridge, MA 02138
==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115
==== fax:617-876-9208
==== jm@mak.com



From tmiller@haverford.edu Thu, 19 Aug 1999 17:00:42 -0400 (EDT)
Date: Thu, 19 Aug 1999 17:00:42 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] jJOS speed

> >         Great, this is a good reason to use the JavaOS APIs.  (BTW, our
> > IRQ handling is in dire need of fixing, so I'll go ahead and clone that
> 
> OK, I'll bite.  Given that we pretty much don't distinguish interrupts
> from IRQs, I'm guessing you mean interrupt handling is in a losing way. 
> What, specifically?  What will you be cloning (native classes? 
> bytecode?)?  How will cloning help?

	Er, I phrased this poorly because we don't distinguish between
IRQ's and interrupts.  Basically, we don't currently use
InterrupterDispatcher at all.  This induces a hack in the keyboard driver
that will lose scancodes if >1 is generated per interrupt.  This might be
'fixable' by re-implementing InterrupterDispatcher.  However, I don't know
how much work this might entail, and as long as you're cloning the JavaOS
APIs for memory, I might as well clone the APIs for IRQs/interrupts.
(Rather, clone the parts that I need.)

> I'm not even sure of the requirement to have virtual consoles, frankly. 
> While it's a "cool" feature of Linux, UNIX (and just about every other
> operating system out of the dozen or so ones I've ever seen or used in
> over 20 years) gets along without it quite nicely.  Assuming I've
> correctly figured out what you're talking about (no better than even
> money, I'll wager), can't that wait?  Remember that all the native code
> has got to fit between about 1K and 600K in memory.

	Er, these virtual consoles are implemented entirely in Java, and
besides being "cool" (and wonderful for debugging), it's a good test of
the driver system.  If the VGA driver ends up doing our text-display work
(and/or includes a text/video mode switch), I can use that method/code to
(help) handle switching the consoles. 

> I was planning to hook up the GC stuff this weekend.  By the flurry of
> email from me today, I am sure you can tell I'm at home hacking away,
> and not at the Day Job (and I won't be again until Monday).

	Hey, great, anything that makes my job easier :)

-_Quinn




From vbman@pcpros.net Thu, 19 Aug 1999 18:23:32 -0500
Date: Thu, 19 Aug 1999 18:23:32 -0500
From: Cliff Baeseman vbman@pcpros.net
Subject: [JOS-Kernel] Adventures with the tool chain

glibc-devel-2.1.1-6     is the rpm you are looking for...


Cliff Baeseman



-----Original Message-----
From: Regier Avery J <RegierAveryJ@JDCORP.deere.com>
To: 'kernel@jos.org' <kernel@jos.org>
Date: Thursday, August 19, 1999 8:12 AM
Subject: RE: [JOS-Kernel] Adventures with the tool chain


> > Here are my outstanding problems:
> > * The i386 build compiles, but the host build does not.  It is
>complaining
> > about missing a file: /etc/lib/gnu/types.h (or something like
>that, I dont'
> > have it in front of me.)  And lo and behold, the directory is
>there, but not
> > the file.  Am I missing an RPM?  If so, which one might that be?
>
>John Morrison wrote:
> Ah.  You probably need to remake the "dependencies" in the Makefile
>by building the "depend" target.  I seem to recall an issue concerning the
>exact format of the "Don't delete this line, makedepend depends upon it"
>between Todd's distribution and my RedHat one.  We should probably separate
>out that into a separate "included" part of the Makefile so as to make this
>easier.
>
>Todd Miller wrote:
> gnu/types.h is included by sys/types.h, and should be in
>/usr/include (at least, on my slackware system.)  It should not be directly
>included by any file in JJOS/decaf (which includes sys/types.h).
>
>I did the make on the 'depend' target, but that didn't solve the problem.
>Could someone please do a
>'rpm -q -f /usr/include/gnu/types.h' on their RedHat system and tell me
what
>package that belongs to?  it would help greatly.
>
>Thanks,
>Avery J. Regier
>
>
>
>_______________________________________________
>Kernel maillist  -  Kernel@jos.org
>http://jos.org/mailman/listinfo/kernel
>
>




From vbman@pcpros.net Thu, 19 Aug 1999 18:25:27 -0500
Date: Thu, 19 Aug 1999 18:25:27 -0500
From: Cliff Baeseman vbman@pcpros.net
Subject: [JOS-Kernel] Source Code

Where is the jos source code...


I wish to help you guys out a little here...

Cliff Baeseman




From ryan@whitewolf.com.au Fri, 20 Aug 1999 11:18:06 +1000
Date: Fri, 20 Aug 1999 11:18:06 +1000
From: Ryan Heise ryan@whitewolf.com.au
Subject: [JOS-Kernel] Source Code

Cliff Baeseman wrote:
> 
> Where is the jos source code...
> 
> I wish to help you guys out a little here...

Normally you would find documentation on jos.org, but it has been
temporarily moved to:

	http://www.metamech.com/wiki

Type in "CVS" in upper case and press go. There are several code modules
on our server but the one you are probably after is JJOS. To grab the
source code, use "cvs checkout JJOS". Once you have the source code,
"cvs update -d JJOS" will update your local copy if files have been
added or changed.

-- 
Ryan Heise

http://www.progsoc.uts.edu.au/~rheise/



From hilarycheng@usa.net Fri, 20 Aug 1999 08:18:15 +0800
Date: Fri, 20 Aug 1999 08:18:15 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] Source Code

Hi,

    U should got a cvs tools from for Linux. and then

$ export CVSROOT=:pserver:anonymous@jos.org:/sites/jos/cvs/cvsroot

$ cvs login
(Logging in to anonymous@jos.org)
CVS password: *** type in "anonymous" ***

$ cvs checkout JJOS

U can get the source of JJOS.


>Where is the jos source code...
>
>
>I wish to help you guys out a little here...
>





From thomas.olausson@home.se Fri, 20 Aug 1999 11:17:40 +0200
Date: Fri, 20 Aug 1999 11:17:40 +0200
From: Thomas Olausson thomas.olausson@home.se
Subject: [JOS-Kernel] JOS for StrongARM

>If you've got a linker/loader for AIF, you should be OK

But I don't

(this thread is getting a little tangential, but what a heck)
When I upload my Linux kernels to the flash and
boot from that kernel, I get 
"Not AIF", which means no AIF header, I guess.

I don't know how to produce a AIF header, since
there's no documentation on this. :(

Does anyone know where to get this?

Thomas




From RegierAveryJ@JDCORP.deere.com Fri, 20 Aug 1999 07:26:03 -0500
Date: Fri, 20 Aug 1999 07:26:03 -0500
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [JOS-Kernel] Adventures with the tool chain

Oops.  Tried the 'make depend' thing again;  this time it worked.  For some
reason I had thought that to remake the dependencies, you do a 'make -dep'.
I actually got output from that, which confused me.  I've now got the host
build running, and now I'm just held up by the Tulip driver not detecting my
NIC.  I'll see what I can do in the meantime with just the host build, and
do what I can to put more detail in the docs.

Thanks for your help!
Avery J. Regier


> -----Original Message-----
> From:	John Morrison [SMTP:jm@mak.com]
> Sent:	Thursday, August 19, 1999 2:23 PM
> To:	kernel@jos.org
> Subject:	Re: [JOS-Kernel] Adventures with the tool chain
> 
> Hi;
> 
> Regier Avery J wrote:
> > I did the make on the 'depend' target, but that didn't solve the
> problem.
> > Could someone please do a
> > 'rpm -q -f /usr/include/gnu/types.h' on their RedHat system and tell me
> what
> > package that belongs to?  it would help greatly.
> 
> I don't have that file, either, and I build OK.  (I *do* need
> /usr/include/sys/types.h, though.)  Would you please be so kind as to
> cut-and-paste the exact errors into a reply?  Is it "make" or gcc/g++
> that's got heartburn?
> 
> -jm
> 
> -- 
> ==== John Morrison
> ==== MaK Technologies Inc.
> ==== 185 Alewife Brook Parkway, Cambridge, MA 02138
> ==== http://www.mak.com/welcome.html
> ==== vox:617-876-8085 x115
> ==== fax:617-876-9208
> ==== jm@mak.com
> 
> _______________________________________________
> Kernel maillist  -  Kernel@jos.org
> http://jos.org/mailman/listinfo/kernel



From jm@mak.com Fri, 20 Aug 1999 15:14:00 -0400
Date: Fri, 20 Aug 1999 15:14:00 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] jJOS speed

Hi;

Todd L. Miller wrote:
>         Er, I phrased this poorly because we don't distinguish between
> IRQ's and interrupts.  Basically, we don't currently use
> InterrupterDispatcher at all.  This induces a hack in the keyboard driver
> that will lose scancodes if >1 is generated per interrupt.  This might be
> 'fixable' by re-implementing InterrupterDispatcher.  However, I don't know

Hmm... I vaguely and fuzzily recall something about this.  Was the "bug"
or misfeature in the native code, the Java, or in the interaction
between the two?

> how much work this might entail, and as long as you're cloning the JavaOS
> APIs for memory, I might as well clone the APIs for IRQs/interrupts.
> (Rather, clone the parts that I need.)

Ah.  Cloning the APIs.  (Well, I guess I misread subject, verb, and
object of your description.  Three in one sentence.  Pretty much
everything -- didn't miss a single chance to misintepret something. 
This is some sort of personal record. :=)

>         Er, these virtual consoles are implemented entirely in Java, and
> besides being "cool" (and wonderful for debugging), it's a good test of
> the driver system.  If the VGA driver ends up doing our text-display work
> (and/or includes a text/video mode switch), I can use that method/code to
> (help) handle switching the consoles.

(Well, I'm 2 for 2 here.  Thought you were talking about native code.)

> > I was planning to hook up the GC stuff this weekend.  By the flurry of
> > email from me today, I am sure you can tell I'm at home hacking away,
> > and not at the Day Job (and I won't be again until Monday).
> 
>         Hey, great, anything that makes my job easier :)

Let's hope my C++ and Java are better than my English.

Embarrassedly Yours,

-jm

-- 
==== John Morrison ==== jm@mak.com == http://www.mak.com/welcome.html
==== MaK Technologies Inc., 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== vox:617-876-8085 x115
==== fax:617-876-9208



From jm@mak.com Fri, 20 Aug 1999 15:18:51 -0400
Date: Fri, 20 Aug 1999 15:18:51 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] JOS for StrongARM

Hi;

Thomas Olausson wrote:
> 
> >If you've got a linker/loader for AIF, you should be OK
> 
> But I don't
> 
> (this thread is getting a little tangential, but what a heck)
> When I upload my Linux kernels to the flash and
> boot from that kernel, I get
> "Not AIF", which means no AIF header, I guess.

I seem to recall you said you knew how to build Inferno kernels.  I
presumed the bootloader was happy with these, so they were in AIF
format.  I further presumed that "knowing how" to build the Inferno
kernel meant that you had the right toolchain to build the Inferno
kernels, so I (even further) presumed that you could build JOS using the
same toolchain.  Is this not the case?

-jm

-- 
==== John Morrison ==== jm@mak.com == http://www.mak.com/welcome.html
==== MaK Technologies Inc., 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== vox:617-876-8085 x115
==== fax:617-876-9208



From jkmccrary@yahoo.com Fri, 20 Aug 1999 17:45:25 -0700 (PDT)
Date: Fri, 20 Aug 1999 17:45:25 -0700 (PDT)
From: Ken McCrary jkmccrary@yahoo.com
Subject: [JOS-Kernel] Java Device Driver Kit (JDDK)

I have seen some discussion here about JavaOS and 
mechanisms to configure/manage Java device drivers.
Check out http://www.javapos.com/jddk.main.html

You can download the JDDK stuff, which contains 
for example, javaos.javax.system.database.

Regards,
Ken McCrary


__________________________________________________
Do You Yahoo!?
Bid and sell for free at http://auctions.yahoo.com




From jeff@duska.com Sat, 21 Aug 1999 14:13:48 -0400
Date: Sat, 21 Aug 1999 14:13:48 -0400
From: Jeff Duska jeff@duska.com
Subject: [JOS-Kernel] NewsFlash:   IBM and Sun kill JavaOS, comments

Here is a news item that is very important to us. IBM and Sun has killed the
JavaOS initiative. There is a section on this news at Slashdot.org. There is
nothing on Javalobby, which is make me feel that this becoming more and more
a joke of a information portal IMHO... Here is a link to the story

http://www.excite.com/computers_and_internet/tech_news/zdnet/?article=zdnews
1.inp

I think the group needs to reply to this news item. At end of this message I
have added rough idea of a press release that the group might release.

would appear that our group should follow the slashdot org thread. I
dontrack of comments and publish a reply. This would bring this project to
peoples attention, and possible get some press for the project, which now
appears to be the only JavaOS.

I think with all hopla around Linux, I think we need to describe why JOS is
better than Linux on the desktop. I know that this is key question that I
have for the group.

Later,

Jeff Duska
Free Builder - GUI Designer Lead
Korfe - Project Lead



Idea for press release...

                                            ---- 00 ----

Open Source JavaOS Team responds to IBM and Sun's JavaOS for Business
announcement

August 21 1999 -
The Java Open Source OS group is disappointed with the news that IBM and Sun
have announced the disconituation of the JavaOS for Business. There is still
an important need for JavaOS in several key markets. As Anne Thomas, an
analyst with The Patricia Seybold Group stated in the ZDNN article.  JavaOS
"...was a really nice solution." As this news story points our there is
still a large customer intrest in this option.

Our team wishes to extend our an offer to help transition folks from the IBM
and Sun soluton to our JavaOS development. We also welcome developers,
indivuals, and companies that wish to help with our project.

We will also be releasing a detail responce for developers, for managers,
and for the press in near future.

JOS is an Open Source project that goal is to create an Open Source version
of the JavaOS. More background blah, blah, blah...

                                            ---- 00 ----





From vbman@pcpros.net Sat, 21 Aug 1999 17:20:51 -0500
Date: Sat, 21 Aug 1999 17:20:51 -0500
From: Cliff Baeseman vbman@pcpros.net
Subject: [JOS-Kernel] NewsFlash:   IBM and Sun kill JavaOS, comments

 Better yet we should be urging IBM and SUN to Open Source their operating
system. The business communities that adopted the java os should be leaning
on Sun and IBM to do it also. The only way the JavaOS was going to gain
momentum is to be open sourced.  If they where to do such a thing I bet you
would see some crazy stuff happen with it in a very short period of time.



Sun and IBM could still hammer java home and we could have the os we
need....

nuff said!

Cliff
-----Original Message-----
From: Jeff Duska <jeff@duska.com>
To: kernel@jos.org <kernel@jos.org>
Date: Saturday, August 21, 1999 1:37 PM
Subject: [JOS-Kernel] NewsFlash: IBM and Sun kill JavaOS, comments


>Here is a news item that is very important to us. IBM and Sun has killed
the
>JavaOS initiative. There is a section on this news at Slashdot.org. There
is
>nothing on Javalobby, which is make me feel that this becoming more and
more
>a joke of a information portal IMHO... Here is a link to the story
>
>http://www.excite.com/computers_and_internet/tech_news/zdnet/?article=zdnew
s
>1.inp
>
>I think the group needs to reply to this news item. At end of this message
I
>have added rough idea of a press release that the group might release.
>
>would appear that our group should follow the slashdot org thread. I
>dontrack of comments and publish a reply. This would bring this project to
>peoples attention, and possible get some press for the project, which now
>appears to be the only JavaOS.
>
>I think with all hopla around Linux, I think we need to describe why JOS is
>better than Linux on the desktop. I know that this is key question that I
>have for the group.
>
>Later,
>
>Jeff Duska
>Free Builder - GUI Designer Lead
>Korfe - Project Lead
>
>
>
>Idea for press release...
>
>                                            ---- 00 ----
>
>Open Source JavaOS Team responds to IBM and Sun's JavaOS for Business
>announcement
>
>August 21 1999 -
>The Java Open Source OS group is disappointed with the news that IBM and
Sun
>have announced the disconituation of the JavaOS for Business. There is
still
>an important need for JavaOS in several key markets. As Anne Thomas, an
>analyst with The Patricia Seybold Group stated in the ZDNN article.  JavaOS
>"...was a really nice solution." As this news story points our there is
>still a large customer intrest in this option.
>
>Our team wishes to extend our an offer to help transition folks from the
IBM
>and Sun soluton to our JavaOS development. We also welcome developers,
>indivuals, and companies that wish to help with our project.
>
>We will also be releasing a detail responce for developers, for managers,
>and for the press in near future.
>
>JOS is an Open Source project that goal is to create an Open Source version
>of the JavaOS. More background blah, blah, blah...
>
>                                            ---- 00 ----
>
>
>
>_______________________________________________
>Kernel maillist  -  Kernel@jos.org
>http://jos.org/mailman/listinfo/kernel
>
>




From hilarycheng@usa.net Sun, 22 Aug 1999 11:05:28 +0800
Date: Sun, 22 Aug 1999 11:05:28 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] About String Maniplation

This is a multi-part message in MIME format.

------=_NextPart_000_000E_01BEEC8E.3E161BA0
Content-Type: text/plain;
	charset="big5"
Content-Transfer-Encoding: quoted-printable

Hi All,

   I have found a bug when I use the String.  Since I want to display =
string on VGA driver.
When I use charAt or getBytes from String, it will hangs up. Is that =
current JJOS is not
supporting charAt of String ?

Regards,

Hilary

------=_NextPart_000_000E_01BEEC8E.3E161BA0
Content-Type: text/html;
	charset="big5"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD W3 HTML//EN">
<HTML><HEAD>
<META content=3Dtext/html;charset=3Dbig5 http-equiv=3DContent-Type>
<STYLE></STYLE>

<META content=3D'"MSHTML 5.00.0910.1309"' name=3DGENERATOR></HEAD>
<BODY bgColor=3D#d8d0c8>
<DIV><FONT size=3D4><FONT face=3DArial>Hi All,</FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT size=3D4><FONT face=3DArial>&nbsp;&nbsp;&nbsp;I have found a =
bug when I=20
use the String. </FONT><FONT face=3DArial> Since I want to display =
string on VGA=20
driver.</FONT></FONT></DIV>
<DIV><FONT size=3D4><FONT face=3DArial>When I use charAt or getBytes =
from String, it=20
will hangs up. Is that current JJOS is not</FONT></FONT></DIV>
<DIV><FONT size=3D4><FONT face=3DArial>supporting charAt of String=20
?</FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT size=3D4><FONT face=3DArial>Regards,</FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D4>Hilary</FONT></DIV></BODY></HTML>

------=_NextPart_000_000E_01BEEC8E.3E161BA0--




From tmiller@haverford.edu Sun, 22 Aug 1999 00:21:06 -0400 (EDT)
Date: Sun, 22 Aug 1999 00:21:06 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] About String Maniplation

	charAt() dies in the native call to arraycopy(), because it hasn't
been implemented yet.  I would guess getBytes() dies in the same place,
though I haven't checked it.  I'll try to get around to it sometime next
week.

-_Quinn






From thomas.olausson@home.se Sun, 22 Aug 1999 15:32:14 +0200
Date: Sun, 22 Aug 1999 15:32:14 +0200
From: Thomas Olausson thomas.olausson@home.se
Subject: [JOS-Kernel] NewsFlash:   IBM and Sun kill JavaOS, comments

What about JavaOS for consumers?
Is that dead already?

Thomas




From jeff@duska.com Sun, 22 Aug 1999 13:22:56 -0400
Date: Sun, 22 Aug 1999 13:22:56 -0400
From: Jeff Duska jeff@duska.com
Subject: [JOS-Kernel] NewsFlash:   IBM and Sun kill JavaOS, comments

We can add this to the press release, but I really doubt that either of IBM
or Sun are going to do this. If they do, it will be some lic. that no in the
JOS group can accept. I personally would like it under a BSD lic, but GPL is
fine also.

Later,

Jeff

> -----Original Message-----
> From: kernel-admin@jos.org [mailto:kernel-admin@jos.org]On Behalf Of
> Cliff Baeseman
> Sent: Saturday, August 21, 1999 6:21 PM
> To: kernel@jos.org
> Subject: Re: [JOS-Kernel] NewsFlash: IBM and Sun kill JavaOS, comments
>
>
>  Better yet we should be urging IBM and SUN to Open Source their operating
> system. The business communities that adopted the java os should
> be leaning
> on Sun and IBM to do it also. The only way the JavaOS was going to gain
> momentum is to be open sourced.  If they where to do such a thing
> I bet you
> would see some crazy stuff happen with it in a very short period of time.
>
>
>
> Sun and IBM could still hammer java home and we could have the os we
> need....
>
> nuff said!
>
> Cliff
> -----Original Message-----
> From: Jeff Duska <jeff@duska.com>
> To: kernel@jos.org <kernel@jos.org>
> Date: Saturday, August 21, 1999 1:37 PM
> Subject: [JOS-Kernel] NewsFlash: IBM and Sun kill JavaOS, comments
>
>
> >Here is a news item that is very important to us. IBM and Sun has killed
> the
> >JavaOS initiative. There is a section on this news at Slashdot.org. There
> is
> >nothing on Javalobby, which is make me feel that this becoming more and
> more
> >a joke of a information portal IMHO... Here is a link to the story
> >
> >http://www.excite.com/computers_and_internet/tech_news/zdnet/?art
> icle=zdnew
> s
> >1.inp
> >
> >I think the group needs to reply to this news item. At end of
> this message
> I
> >have added rough idea of a press release that the group might release.
> >
> >would appear that our group should follow the slashdot org thread. I
> >dontrack of comments and publish a reply. This would bring this
> project to
> >peoples attention, and possible get some press for the project, which now
> >appears to be the only JavaOS.
> >
> >I think with all hopla around Linux, I think we need to describe
> why JOS is
> >better than Linux on the desktop. I know that this is key question that I
> >have for the group.
> >
> >Later,
> >
> >Jeff Duska
> >Free Builder - GUI Designer Lead
> >Korfe - Project Lead
> >
> >
> >
> >Idea for press release...
> >
> >                                            ---- 00 ----
> >
> >Open Source JavaOS Team responds to IBM and Sun's JavaOS for Business
> >announcement
> >
> >August 21 1999 -
> >The Java Open Source OS group is disappointed with the news that IBM and
> Sun
> >have announced the disconituation of the JavaOS for Business. There is
> still
> >an important need for JavaOS in several key markets. As Anne Thomas, an
> >analyst with The Patricia Seybold Group stated in the ZDNN
> article.  JavaOS
> >"...was a really nice solution." As this news story points our there is
> >still a large customer intrest in this option.
> >
> >Our team wishes to extend our an offer to help transition folks from the
> IBM
> >and Sun soluton to our JavaOS development. We also welcome developers,
> >indivuals, and companies that wish to help with our project.
> >
> >We will also be releasing a detail responce for developers, for managers,
> >and for the press in near future.
> >
> >JOS is an Open Source project that goal is to create an Open
> Source version
> >of the JavaOS. More background blah, blah, blah...
> >
> >                                            ---- 00 ----
> >
> >
> >
> >_______________________________________________
> >Kernel maillist  -  Kernel@jos.org
> >http://jos.org/mailman/listinfo/kernel
> >
> >
>
>
> _______________________________________________
> Kernel maillist  -  Kernel@jos.org
> http://jos.org/mailman/listinfo/kernel
>




From myoung@bristol.st.com Mon, 23 Aug 1999 10:32:45 +0100
Date: Mon, 23 Aug 1999 10:32:45 +0100
From: Martin Young myoung@bristol.st.com
Subject: [JOS-Kernel] NewsFlash:   IBM and Sun kill JavaOS, comments

On Aug 22,  3:32pm, Thomas Olausson wrote:

> What about JavaOS for consumers?
> Is that dead already?

Absolutely not.  JOS4C is a completely different animal.  It's simply a JRE and
some extra classes running atop a microkernel.  In fact, I think there's a
specification for JOS4C which several groups have implemented.  At JavaOne,
Transvirtual were showing a JOS4C implementation based on Kaffe, for example.

That said, Sun don't seem terribly committed to the platform and anyway, it's
targeted mostly at quite different (generally smaller) devices than IBM's
JavaOS.


-- 
Martin Young, at STMicroelectronics,   \O    O   \O    O
  at 1000 Aztec West, Almondsbury,     //\  /\\  //\  /\\   ,^O
Bristol, BS32 4SQ. +44 145 446 2523   / |  / \  / |  //    // `   \\__|O
     myoung@bristol.st.com           Ah   Ah   Ah   Ah   Stayin' alive



From thomas.olausson@home.se Mon, 23 Aug 1999 13:13:33 +0200
Date: Mon, 23 Aug 1999 13:13:33 +0200
From: Thomas Olausson thomas.olausson@home.se
Subject: [JOS-Kernel] jos for consumers

>  JOS4C 

Where can I get, otherwise than calling Sun?

Thomas




From myoung@bristol.st.com Mon, 23 Aug 1999 12:28:01 +0100
Date: Mon, 23 Aug 1999 12:28:01 +0100
From: Martin Young myoung@bristol.st.com
Subject: [JOS-Kernel] jos for consumers

On Aug 23,  1:13pm, Thomas Olausson wrote:
> >  JOS4C
> Where can I get, otherwise than calling Sun?

Good question.  There's some information at
"http://www.sun.com/javaos/consumers/".

Now that I've consummed more coffee and officially woken up, I'll appologise
for including a factual inaccuracy in my last message i.e. I was wrong.  There
*isn't* a spec for JOS4C, rather it simply provides enough infrastructure to
implement PersonalJava on an otherwise bare machine.

AFAIK there is no publically available documentation of JOS4C internals.  OTOH
it is based on ChorusOS (formally known simply as Chorus from Chorus Systeme in
Paris) and there is /some/ publically available information about that,
including a very quiet newsgroup "comp.os.chorus".


-- 
Martin Young, at STMicroelectronics,   \O    O   \O    O
  at 1000 Aztec West, Almondsbury,     //\  /\\  //\  /\\   ,^O
Bristol, BS32 4SQ. +44 145 446 2523   / |  / \  / |  //    // `   \\__|O
     myoung@bristol.st.com           Ah   Ah   Ah   Ah   Stayin' alive



From SteReich@aol.com Sat, 21 Aug 1999 19:36:23 EDT
Date: Sat, 21 Aug 1999 19:36:23 EDT
From: SteReich@aol.com SteReich@aol.com
Subject: [JOS-Kernel] Driver writing

Hi JOSers,

I'm no longer part of the JOS project, and not subscribed to jos-kernel, so I 
will only receive your replies if you send them to me directly.

Yes, I started to write that file system. I will definitely not do any 
further development on it in the near future. But I'd love to see anyone else 
continue the development! If some parts of what I wrote will survive in a 
working JOS file system, I will be happy.

I will answer questions concerning the code if there are any, but can't spend 
too much time on it. Thanks Avery for the compliment. :)

Version "4 preview" is the most recent one. The actual version 4 has never 
been finished...

Best wishes,
Stefan

PS: When will the first kernel be ready? ;)




From hilarycheng@usa.net Tue, 24 Aug 1999 13:46:18 +0800
Date: Tue, 24 Aug 1999 13:46:18 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] Driver writing

Hi Stefan,

    What filesystem are u written ? Since Thomas and me is writing VGA
Graphics
Driver/Generic Device Driver. If someone has device driver model, we would
like
to have a look at it.

Regards,

Hilary


>Hi JOSers,
>
>I'm no longer part of the JOS project, and not subscribed to jos-kernel, so
I
>will only receive your replies if you send them to me directly.
>
>Yes, I started to write that file system. I will definitely not do any
>further development on it in the near future. But I'd love to see anyone
else
>continue the development! If some parts of what I wrote will survive in a
>working JOS file system, I will be happy.
>
>I will answer questions concerning the code if there are any, but can't
spend
>too much time on it. Thanks Avery for the compliment. :)
>
>Version "4 preview" is the most recent one. The actual version 4 has never
>been finished...
>
>Best wishes,
>Stefan
>
>PS: When will the first kernel be ready? ;)
>
>
>_______________________________________________
>Kernel maillist  -  Kernel@jos.org
>http://jos.org/mailman/listinfo/kernel
>




From tmiller@haverford.edu Wed, 25 Aug 1999 00:08:57 -0400 (EDT)
Date: Wed, 25 Aug 1999 00:08:57 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] decaf updates

	Implemented synchronized methods; implemented virtual consoles in
a java daemon, `consoled', though I've decided against implementing a
screen-redraw hack, waiting for the VGA driver to mature instead.  Began
to implement throws/exceptions for the native code, within interp.cc.
Tried to do a little housecleaning w.r.t. to the tools/ directory in CVS.

	Hopefully, I didn't break anything.  Added a few builtins for
keyboard emulation (very basic) and to allow the vga driver to 'run.'  (At
least, with 24 MB on the emulation's heap, until the JVM halts, out of
memory.)

	Up next is testing checking if a method is native before trying to
look it up in the builtins hash, which may lead to classpath integration
(and a fully functional class library!).  Or maybe getting GC to work, but
we'll see.

-_Quinn




From draft@fear.ch Wed, 25 Aug 1999 13:21:11 +0200 (CEST)
Date: Wed, 25 Aug 1999 13:21:11 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] decaf updates

Hi all

I updated the vga driver, made some bugfixes, added a stop routine that
switches to the previous video mode and a bitblt to draw sprites (I  hate
bit shiftings *g*). Found 2 bugs in the jvm -> idiv and irem. 

I will update (send code to John-> still no cvs access) the code when
the general driver implementation is done (end of this week, I guess).

The problem is the speed: I think we (Hilary?, you have done something
similar) should implement a native memcopy to speed up the vga output. 

vga and speed:
To avoid flickering, you have to write into the vga-mem when the vertical
retrace is active. the memcopy should be finished before the vertical
retrace ends. If not, you will see the sprite flickering. The current
speed of the write8/16/32 is to slow to finish before the vertical retrace
gets inactive.


Thomas Bocek


On Wed, 25 Aug 1999, Todd L. Miller wrote:

> 	Implemented synchronized methods; implemented virtual consoles in
> a java daemon, `consoled', though I've decided against implementing a
> screen-redraw hack, waiting for the VGA driver to mature instead.  Began
> to implement throws/exceptions for the native code, within interp.cc.
> Tried to do a little housecleaning w.r.t. to the tools/ directory in CVS.
> 
> 	Hopefully, I didn't break anything.  Added a few builtins for
> keyboard emulation (very basic) and to allow the vga driver to 'run.'  (At
> least, with 24 MB on the emulation's heap, until the JVM halts, out of
> memory.)
> 
> 	Up next is testing checking if a method is native before trying to
> look it up in the builtins hash, which may lead to classpath integration
> (and a fully functional class library!).  Or maybe getting GC to work, but
> we'll see.
> 
> -_Quinn
> 
> 
> _______________________________________________
> Kernel maillist  -  Kernel@jos.org
> http://jos.org/mailman/listinfo/kernel
> 




From hilarycheng@usa.net Wed, 25 Aug 1999 20:52:28 +0800
Date: Wed, 25 Aug 1999 20:52:28 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] decaf updates

Hi all,

>Hi all
>
>I updated the vga driver, made some bugfixes, added a stop routine that
>switches to the previous video mode and a bitblt to draw sprites (I  hate
>bit shiftings *g*). Found 2 bugs in the jvm -> idiv and irem.

Would u mind send me the latest code ? :D
I wanna to test ur bitblt function and I would like to implement it to
draw Font on the VGA Screen.
Also, I have finished a drawLine and drawRect routine. These two methods
are similar to java.awt.Graphcis. I will try to implements some more
java.awt.Graphisc
in device driver level.

>I will update (send code to John-> still no cvs access) the code when
>the general driver implementation is done (end of this week, I guess).
>
>The problem is the speed: I think we (Hilary?, you have done something
>similar) should implement a native memcopy to speed up the vga output.

Well, I found two bugs in JVM.
1. Date Object -- When I create Date Object, JJOS Kernel will got some
behaivour. (Show lots of Zero on the screen.)
2. String -- String can't perform chatAt and getBytes, toCharArray
So I can't draw Character on VGA from a Java String.

I have implemented a simple fill routine. It just fill up a memory space
in native implementation. But I think this routine is just for testing
puporse. If speed of JJOS is fast enough, It will be deleted.

>vga and speed:
>To avoid flickering, you have to write into the vga-mem when the vertical
>retrace is active. the memcopy should be finished before the vertical
>retrace ends. If not, you will see the sprite flickering. The current
>speed of the write8/16/32 is to slow to finish before the vertical retrace
>gets inactive.
>


>On Wed, 25 Aug 1999, Todd L. Miller wrote:
>
>> Implemented synchronized methods; implemented virtual consoles in
>> a java daemon, `consoled', though I've decided against implementing a
>> screen-redraw hack, waiting for the VGA driver to mature instead.  Began
>> to implement throws/exceptions for the native code, within interp.cc.
>> Tried to do a little housecleaning w.r.t. to the tools/ directory in CVS.

For 'consoled' daemon, is it a Console Driver for System.out ?

>> Hopefully, I didn't break anything.  Added a few builtins for
>> keyboard emulation (very basic) and to allow the vga driver to 'run.'
(At
>> least, with 24 MB on the emulation's heap, until the JVM halts, out of
>> memory.)

I would like to know, is the current keyboard emulation fully funtional ?
Since I havn't try to test it in my computer.

>> Up next is testing checking if a method is native before trying to
>> look it up in the builtins hash, which may lead to classpath integration
>> (and a fully functional class library!).  Or maybe getting GC to work,
but
>> we'll see.

Any Conservative GC has been already implemented ? If so, we can port it
to JJOS, it can save time on it.

Regards,

Hilary





From hilarycheng@usa.net Wed, 25 Aug 1999 21:47:36 +0800
Date: Wed, 25 Aug 1999 21:47:36 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] About Current CVS Source of JJOS

This is a multi-part message in MIME format.

------=_NextPart_000_0173_01BEEF43.7216D9A0
Content-Type: text/plain;
	charset="big5"
Content-Transfer-Encoding: quoted-printable

Hi All,

    I have download the current CVS Source of JJOS. But It
can't find QueueElement.java (it is needed in Queue.java).
Anything is missing?

Regards,

Hilary

------=_NextPart_000_0173_01BEEF43.7216D9A0
Content-Type: text/html;
	charset="big5"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD W3 HTML//EN">
<HTML><HEAD>
<META content=3Dtext/html;charset=3Dbig5 http-equiv=3DContent-Type>
<STYLE></STYLE>

<META content=3D'"MSHTML 5.00.0910.1309"' name=3DGENERATOR></HEAD>
<BODY bgColor=3D#d8d0c8>
<DIV><FONT size=3D2><FONT face=3DArial>Hi All,</FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT size=3D2><FONT face=3DArial>&nbsp;&nbsp;&nbsp; I have =
download the=20
current CVS Source of JJOS. But It</FONT></FONT></DIV>
<DIV><FONT size=3D2><FONT face=3DArial>can't find QueueElement.java (it =
is needed in=20
Queue.java).</FONT></FONT></DIV>
<DIV><FONT size=3D2><FONT face=3DArial>Anything is =
missing?</FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT size=3D2><FONT face=3DArial>Regards,</FONT></FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>Hilary</FONT></DIV></BODY></HTML>

------=_NextPart_000_0173_01BEEF43.7216D9A0--




From draft@fear.ch Wed, 25 Aug 1999 15:52:49 +0200 (CEST)
Date: Wed, 25 Aug 1999 15:52:49 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] decaf updates

On Wed, 25 Aug 1999, Hilary Cheng wrote:

> Hi all,
> 
> >Hi all
> >
> >I updated the vga driver, made some bugfixes, added a stop routine that
> >switches to the previous video mode and a bitblt to draw sprites (I  hate
> >bit shiftings *g*). Found 2 bugs in the jvm -> idiv and irem.
> 
> Would u mind send me the latest code ? :D

yep, but first I have to clean up...

> I wanna to test ur bitblt function and I would like to implement it to
> draw Font on the VGA Screen.

cool, do you read the fonts from the vid-mem? the start routine
clears unforunately the hole vid-mem, so no fonts after the stop routine
are available (yet).

> Also, I have finished a drawLine and drawRect routine. These two methods
> are similar to java.awt.Graphcis. I will try to implements some more
> java.awt.Graphisc
> in device driver level.

hmm, does drawLine and drawRect write direct to the vidmem or is there a
kind of a virtual screen (jdkxx?).

(drawRect/drawLine/drawString->buffer->bitblt?->vidmem) or
(drawRect/drawLine/drawString->vidmem)

If there is a kind of a buffer, then we can't use the drawLine and
drawRect which is implemented in the driver. But I really don't know!

> >I will update (send code to John-> still no cvs access) the code when
> >the general driver implementation is done (end of this week, I guess).
> >
> >The problem is the speed: I think we (Hilary?, you have done something
> >similar) should implement a native memcopy to speed up the vga output.
> 
> Well, I found two bugs in JVM.
> 1. Date Object -- When I create Date Object, JJOS Kernel will got some
> behaivour. (Show lots of Zero on the screen.)

I had the same bug, but it was a div by zero. This is now fixed.
->idiv,irem, already sent to John.

> 2. String -- String can't perform chatAt and getBytes, toCharArray
> So I can't draw Character on VGA from a Java String.
> 
> I have implemented a simple fill routine. It just fill up a memory space
> in native implementation. But I think this routine is just for testing
> puporse. If speed of JJOS is fast enough, It will be deleted.
> 
> >vga and speed:
> >To avoid flickering, you have to write into the vga-mem when the vertical
> >retrace is active. the memcopy should be finished before the vertical
> >retrace ends. If not, you will see the sprite flickering. The current
> >speed of the write8/16/32 is to slow to finish before the vertical retrace
> >gets inactive.

[cut]

Thomas Bocek





From tmiller@haverford.edu Wed, 25 Aug 1999 11:36:46 -0400 (EDT)
Date: Wed, 25 Aug 1999 11:36:46 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] About Current CVS Source of JJOS

>     I have download the current CVS Source of JJOS. But It
> can't find QueueElement.java (it is needed in Queue.java).
> Anything is missing?

	Yes, my apologies.  QueueElement was added in fixing Queue and I
neglected to add it to the CVS.  Look for it later today.

-_Quinn




From tmiller@haverford.edu Wed, 25 Aug 1999 13:55:57 -0400 (EDT)
Date: Wed, 25 Aug 1999 13:55:57 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] decaf updates

> Well, I found two bugs in JVM.
> 1. Date Object -- When I create Date Object, JJOS Kernel will got some
> behaivour. (Show lots of Zero on the screen.)
> 2. String -- String can't perform chatAt and getBytes, toCharArray
> So I can't draw Character on VGA from a Java String.

	As I've already noted, we're not working with a fully-functional
class library.  #2 should be a (relatively) quick fix of adding
"arraycopy" to the builtins...

> For 'consoled' daemon, is it a Console Driver for System.out ?

	No.  It's a daemon that (for now?) is the only consumer of the
keyboard's KeyEvents; after checking if it's a KeyEvent that causes the
console to switch (which fires FocusEvents), it redirects the KeyEvent to
the currently-focused console.  (Actually, KeyListener, so things like
telnet should just fit right in.)

> I would like to know, is the current keyboard emulation fully funtional ?
> Since I havn't try to test it in my computer.

	Yes and no.  It will convince the keyboard driver that it's
talking to a real keyboard, but one that can only generate the single
scancode you've hard-coded into it.  Some raw-mode hack should be possible
to make the Right Thing happen...

> Any Conservative GC has been already implemented ? If so, we can port it
> to JJOS, it can save time on it.

	Yes, we're working on integrating a conservative that was
generously written for us by George Marrows.

-_Quinn







From hilarycheng@usa.net Thu, 26 Aug 1999 09:07:13 +0800
Date: Thu, 26 Aug 1999 09:07:13 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] decaf updates

Hi All,

>> >
>> >I updated the vga driver, made some bugfixes, added a stop routine that
>> >switches to the previous video mode and a bitblt to draw sprites (I
hate
>> >bit shiftings *g*). Found 2 bugs in the jvm -> idiv and irem.
>>
>> Would u mind send me the latest code ? :D
>
>yep, but first I have to clean up...

would u mind send me a copy after u have been finished ?

>> I wanna to test ur bitblt function and I would like to implement it to
>> draw Font on the VGA Screen.
>
>cool, do you read the fonts from the vid-mem? the start routine
>clears unforunately the hole vid-mem, so no fonts after the stop routine
>are available (yet).

well, I just copy the font from Linux and store in byte array. and draw it
pixel on the screen. I think that would be much more easy to do it.
hm, What's vid-mem ?  :o, I remember that font are stored in VGA.
But I forget how to retrieve it from VGA. is there any Doc?

>> Also, I have finished a drawLine and drawRect routine. These two methods
>> are similar to java.awt.Graphcis. I will try to implements some more
>> java.awt.Graphisc
>> in device driver level.
>
>hmm, does drawLine and drawRect write direct to the vidmem or is there a
>kind of a virtual screen (jdkxx?).

yap, in Sun JDK. drawLine & drawRect will draw it into Buffer first. and
then
draw those buffer on screen.

>(drawRect/drawLine/drawString->buffer->bitblt?->vidmem) or
>(drawRect/drawLine/drawString->vidmem)

I am thinking about these two rountine. The best one should be
(drawRect/drawLine/drawString->buffer->bitblt->vidmem). But I
concern about speed. If I draw a simple Line on screen, it needs to
draw to buffer, and then bilblt the buffer to screen. Will it be slow ?

>If there is a kind of a buffer, then we can't use the drawLine and
>drawRect which is implemented in the driver. But I really don't know!

hm, the first one will be common implememtation of current OS/Graphics
Rountine.
(drawRect/drawLine/drawString->buffer->bitblt->vidmem)

>> >I will update (send code to John-> still no cvs access) the code when
>> >the general driver implementation is done (end of this week, I guess).
>> >
>> >The problem is the speed: I think we (Hilary?, you have done something
>> >similar) should implement a native memcopy to speed up the vga output.
>>
>> Well, I found two bugs in JVM.
>> 1. Date Object -- When I create Date Object, JJOS Kernel will got some
>> behaivour. (Show lots of Zero on the screen.)
>
>I had the same bug, but it was a div by zero. This is now fixed.
>->idiv,irem, already sent to John.

one more thing, Thomas, have u start to implemented VGA Driver from
a generic Graphics Device ?

[cut]

Regards,

Hilary





From hilarycheng@usa.net Mon, 30 Aug 1999 09:44:57 +0800
Date: Mon, 30 Aug 1999 09:44:57 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] Some Questions about JJOS

This is a multi-part message in MIME format.

------=_NextPart_000_018B_01BEF2CC.522BB980
Content-Type: text/plain;
	charset="big5"
Content-Transfer-Encoding: quoted-printable

Hi All,

    I would like to ask some questions about JJOS.

1. Have reflection implemented in JJOS ?
2. Is that current JJOS should depends on Sun Classes ?Can we run w/o =
any Sun Java Class like sun.awt ?

Regards,

Hilary


------=_NextPart_000_018B_01BEF2CC.522BB980
Content-Type: text/html;
	charset="big5"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META content=3Dtext/html;charset=3Dbig5 http-equiv=3DContent-Type>
<META content=3D"MSHTML 5.00.2014.210" name=3DGENERATOR>
<STYLE></STYLE>
</HEAD>
<BODY bgColor=3D#ffffff>
<DIV><FONT face=3DArial size=3D2>Hi All,</FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>&nbsp;&nbsp;&nbsp; I would like to ask =
some=20
questions about JJOS.</FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>1. Have reflection implemented in JJOS=20
?</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>2. Is that current JJOS should depends =
on Sun=20
Classes ?Can we run w/o any Sun Java Class like sun.awt ?</FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>Regards,</FONT></DIV>
<DIV>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>Hilary</FONT></DIV>
<DIV>&nbsp;</DIV></BODY></HTML>

------=_NextPart_000_018B_01BEF2CC.522BB980--




From tmiller@haverford.edu Sun, 29 Aug 1999 22:13:01 -0400 (EDT)
Date: Sun, 29 Aug 1999 22:13:01 -0400 (EDT)
From: Miller Todd L tmiller@haverford.edu
Subject: [JOS-Kernel] Some Questions about JJOS

> 1. Have reflection implemented in JJOS ?

	No.  See question 2.

> 2. Is that current JJOS should depends on Sun Classes ?Can we run w/o any Sun Java Class like sun.awt ?

	Sure.  I haven't tried using anyone else's class library, but we
haven't implemented the vast majority of any library's native code, so
they should work as well as the 'canonical' build with the Sun code.  I
am, however, currently hacking away at integrating classpath, which will
get us a great many features indeed.

-_Quinn




From hilarycheng@usa.net Mon, 30 Aug 1999 11:20:21 +0800
Date: Mon, 30 Aug 1999 11:20:21 +0800
From: Hilary Cheng hilarycheng@usa.net
Subject: [JOS-Kernel] Some Questions about JJOS

Hi ,


>> 1. Have reflection implemented in JJOS ?
>
> No.  See question 2.
>
>> 2. Is that current JJOS should depends on Sun Classes ?Can we run w/o any
Sun Java Class like sun.awt ?
>
> Sure.  I haven't tried using anyone else's class library, but we
>haven't implemented the vast majority of any library's native code, so
>they should work as well as the 'canonical' build with the Sun code.  I
>am, however, currently hacking away at integrating classpath, which will
>get us a great many features indeed.
>

    Any Plan about it ? Since when I wrote the Graphics Driver. I found that
a number of things of JJOS has not been fully implemented. If possible, I
want to take time to have a look at JJOS. and try to give a helping hand
to make JJOS to be complete JVM.

Regards,

Hilary




From jm@mak.com Mon, 30 Aug 1999 09:00:04 -0400
Date: Mon, 30 Aug 1999 09:00:04 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Quick jjos+decaf status

Hi All;

Although we've not been posting much to the list, there actually has been a lot
of activity lately...  Here's a ruthless summary (please follow-up if I've
missed anything):

Progress:

(1) Todd implemented: synchronized methods in the JVM; virtual consoles in a
java daemon.

(2) Thomas Bocek found a bug in two of the JVM's opcodes -- irem, and idiv. 
Either Todd or jm will integrate his fix with the other active mods to the JVM. 
Will probably be committed to CVS within a day or two.

(3) CVS pserver has been acting up again.  Todd was kind enough to restart the
server again.

(4) jm implemented an unbelievably slow (but working), malloc-free memory
manager.  Implements hybrid best/first-fit, with sentinel words to try and
detect writing over the end of blocks, and with status bits to detect
multiple-freeing.  Todd and jm used it to detect and fix two memory-management
bugs in the JVM.  This capability and the bug fixes have not yet been committed
to CVS because of a problem with the i386 build.

Ongoing, not-yet-complete efforts:

(1) Todd has begun to implement throws/exceptions in the JVM.

(2) The combined jjos+decaf+GC dies shortly after the first GC.  George Marrows
and jm are looking into this.  (Fixing the memory management bugs mentioned
above unfortunately had no effect on this problem.)  Scheduling constraints will
likely preclude any resolution before late this weekend.

(3) jm ran into a problem with the i386 build while verifying code changes prior
to CVS commitment.  jm's P5 box complains about not having CPUID implemented. 
Weird, because that's the box the CPUID code was debugged upon.  (Anybody else
seen this?)  Resolution no earlier than Thursday due to schedule constraints.

(4) Todd and jm are looking into integrating GNU classpath (so we can have
sources to help us debug the low-level classes -- right now we have no idea
what's going to be called except through time-consuming trial-and-error with
Sun's JDK -- plus we can't redistribute it.  This is also preventing us from
making a key, "Right Thing To Do" change to the JVM to radically speed-up Java
method calls.).  jm has already contacted key classpath developers via email and
gotten their go-ahead.

As usual, please reply to me and/or the list with any errors of either omission
or commission.

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/welcome.html
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From tmiller@haverford.edu Mon, 30 Aug 1999 10:06:50 -0400 (EDT)
Date: Mon, 30 Aug 1999 10:06:50 -0400 (EDT)
From: Todd L. Miller tmiller@haverford.edu
Subject: [JOS-Kernel] Some Questions about JJOS

>     Any Plan about it ? Since when I wrote the Graphics Driver. I found that
> a number of things of JJOS has not been fully implemented. If possible, I
> want to take time to have a look at JJOS. and try to give a helping hand
> to make JJOS to be complete JVM.

	No plan yet, I'm still trying to get a feel for classpath.  More
on this later.

-_Quinn




From draft@fear.ch Mon, 30 Aug 1999 21:38:06 +0200 (CEST)
Date: Mon, 30 Aug 1999 21:38:06 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] Quick jjos+decaf status

Hi

On Mon, 30 Aug 1999, John Morrison wrote:

> Progress:
> 
> (1) Todd implemented: synchronized methods in the JVM; virtual consoles in a
> java daemon.
> 
> (2) Thomas Bocek found a bug in two of the JVM's opcodes -- irem, and idiv. 
> Either Todd or jm will integrate his fix with the other active mods to the JVM. 
> Will probably be committed to CVS within a day or two.
> 
> (3) CVS pserver has been acting up again.  Todd was kind enough to restart the
> server again.
> 
> (4) jm implemented an unbelievably slow (but working), malloc-free memory
> manager.  Implements hybrid best/first-fit, with sentinel words to try and
> detect writing over the end of blocks, and with status bits to detect
> multiple-freeing.  Todd and jm used it to detect and fix two memory-management
> bugs in the JVM.  This capability and the bug fixes have not yet been committed
> to CVS because of a problem with the i386 build.

(5) finihed the vga-routine / bitblt / stop and integrated this into a new
device structure (structures done: general device/graphic device)
 
> Ongoing, not-yet-complete efforts:
> 
> (1) Todd has begun to implement throws/exceptions in the JVM.
> 
> (2) The combined jjos+decaf+GC dies shortly after the first GC.  George Marrows
> and jm are looking into this.  (Fixing the memory management bugs mentioned
> above unfortunately had no effect on this problem.)  Scheduling constraints will
> likely preclude any resolution before late this weekend.
> 
> (3) jm ran into a problem with the i386 build while verifying code changes prior
> to CVS commitment.  jm's P5 box complains about not having CPUID implemented. 
> Weird, because that's the box the CPUID code was debugged upon.  (Anybody else
> seen this?)  Resolution no earlier than Thursday due to schedule constraints.
> 
> (4) Todd and jm are looking into integrating GNU classpath (so we can have
> sources to help us debug the low-level classes -- right now we have no idea
> what's going to be called except through time-consuming trial-and-error with
> Sun's JDK -- plus we can't redistribute it.  This is also preventing us from
> making a key, "Right Thing To Do" change to the JVM to radically speed-up Java
> method calls.).  jm has already contacted key classpath developers via email and
> gotten their go-ahead.
> 
> As usual, please reply to me and/or the list with any errors of either omission
> or commission.

(5) upload my work to CVS (never done this before!)

(6) I found a very good (and free) documentation about FDC programming. I
think I take a look on this.

[cut]

Thomas Bocek




From jm@mak.com Tue, 31 Aug 1999 08:22:22 -0400
Date: Tue, 31 Aug 1999 08:22:22 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] FYI -- rumours of an MS-Office killer available via Java applet

http://www.theregister.co.uk/990831-000003.html

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From draft@fear.ch Tue, 31 Aug 1999 18:29:53 +0200 (CEST)
Date: Tue, 31 Aug 1999 18:29:53 +0200 (CEST)
From: Thomas Bocek draft@fear.ch
Subject: [JOS-Kernel] Interrupts

Hi all

Is the current JOS version able to handle Interrupts?
I tried to catch the timer-interrupt (8), but it didn't work.
....int008.wait(); waits endless.


Thomas Bocek







From jm@mak.com Tue, 31 Aug 1999 12:48:04 -0400
Date: Tue, 31 Aug 1999 12:48:04 -0400
From: John Morrison jm@mak.com
Subject: [JOS-Kernel] Interrupts

Hello Thomas;

Thomas Bocek wrote:
> Is the current JOS version able to handle Interrupts?
> I tried to catch the timer-interrupt (8), but it didn't work.
> ....int008.wait(); waits endless.

I am assuming you are talking about the i386 build.

At one point, it did.  However, as I reported yesterday, I was unsuccessful in
getting the i386 build to even believe that my P5 supported the CPUID
instruction (it does, and that's the same box that the code was written/debugged
upon).  Thus, I am afraid I can't take a good hard look at this problem until
Thursday.  If anybody else either sees or (dare I hope?) solves Thomas' problem
and/or mine, please be so kind as to let us/me know.

Sorry,

-jm

-- 
==== John Morrison            ==== MaK Technologies, Inc.
==== Chief Technology Officer ==== 185 Alewife Brook Pkwy, Cambridge, MA 02138
==== jm@mak.com               ==== http://www.mak.com/
==== vox:617-876-8085 x115    ==== fax:617-876-9208



From R.Argentini@student.tudelft.nl Thu, 26 Aug 1999 16:14:15 +0200
Date: Thu, 26 Aug 1999 16:14:15 +0200
From: Ranieri Argentini R.Argentini@student.tudelft.nl
Subject: [JOS-Kernel] decaf updates

<html>
&gt;&gt;cool, do you read the fonts from the vid-mem? the start
routine<br>
&gt;&gt;clears unforunately the hole vid-mem, so no fonts after the stop
routine<br>
&gt;&gt;are available (yet).<br>
&gt;<br>
&gt;well, I just copy the font from Linux and store in byte array. and
draw it<br>
&gt;pixel on the screen. I think that would be much more easy to do
it.<br>
&gt;hm, What's vid-mem ?&nbsp; :o, I remember that font are stored in
VGA.<br>
&gt;But I forget how to retrieve it from VGA. is there any Doc?<br>
<br>
This is the way to retrieve it using the BIOS. This might prove to be a
bit problematic in OS design, but solving this problem is left as an
excersize for the reader ;-D<br>
<br>
This info has been extracted from Ralf Brown's interrupt list, file
inter60a.zip available through ftpsearch.lycos.com ....<br>
<br>
Hope it helps someone somewhere ...<br>
<br>
Ranieri<br>
<br>
<tt><font face="Courier New, Courier" size=2>--------V-101130-----------------------------<br>
INT 10 - VIDEO - GET FONT INFORMATION (EGA, MCGA, VGA)<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>AX =
1130h<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>BH =
pointer specifier<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>&nbsp;&nbsp;&nbsp;
00h INT 1Fh pointer<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>&nbsp;&nbsp;&nbsp;
01h INT 43h pointer<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>&nbsp;&nbsp;&nbsp;
02h ROM 8x14 character font pointer<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>&nbsp;&nbsp;&nbsp;
03h ROM 8x8 double dot font pointer<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>&nbsp;&nbsp;&nbsp;
04h ROM 8x8 double dot font (high 128 characters)<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>&nbsp;&nbsp;&nbsp;
05h ROM alpha alternate (9 by 14) pointer (EGA,VGA)<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>&nbsp;&nbsp;&nbsp;
06h ROM 8x16 font (MCGA, VGA)<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>&nbsp;&nbsp;&nbsp;
07h ROM alternate 9x16 font (VGA only) (see #00021)<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>&nbsp;&nbsp;&nbsp;
11h (UltraVision v2+) 8x20 font (VGA) or 8x19 font (autosync EGA)<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>&nbsp;&nbsp;&nbsp;
12h (UltraVision v2+) 8x10 font (VGA) or 8x11 font (autosync EGA)<br>
Return: ES:BP = specified pointer<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>CX&nbsp;&nbsp;&nbsp;
= bytes/character of on-screen font (not the requested font!)<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>DL&nbsp;&nbsp;&nbsp;
= highest character row on screen<br>
Note:<x-tab>&nbsp;&nbsp;&nbsp;</x-tab>for UltraVision v2+, the 9xN
alternate fonts follow the corresponding<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>&nbsp; 8xN
font at ES:BP+256N<br>
BUG:<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>the IBM EGA and some other EGA
cards return in DL the number of rows on<br>
<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>&nbsp;
screen rather than the highest row number (which is one less).<br>
SeeAlso: AX=1100h,AX=1103h,AX=1120h,INT 1F&quot;SYSTEM DATA&quot;,INT
43&quot;VIDEO DATA&quot;<br>
<br>
Format of alternate font table [array]:<br>
Offset<x-tab>&nbsp;&nbsp;</x-tab>Size<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>Description<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>(Table
00021)<br>
&nbsp;00h<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>BYTE<x-tab>&nbsp;&nbsp;&nbsp;&nbsp;</x-tab>character
to be replaced (00h = end of table)<br>
&nbsp;01h&nbsp; N BYTEs<x-tab>&nbsp;&nbsp;&nbsp;</x-tab>graphics data for
character, one byte per scan line<br>
--------V-101130BX4D4F-----------------------<br>
<br>
<br>
</font></html>





From Yves.Bossu.fi_system@renault.fr Tue, 24 Aug 1999 11:31:25 +0100
Date: Tue, 24 Aug 1999 11:31:25 +0100
From: Yves Bossu Yves.Bossu.fi_system@renault.fr
Subject: [JOS-Kernel] jos for consumers

Martin Young wrote:
> 
> On Aug 23,  1:13pm, Thomas Olausson wrote:
> > >  JOS4C
> > Where can I get, otherwise than calling Sun?
> 
> Good question.  There's some information at
> "http://www.sun.com/javaos/consumers/".
> 
> Now that I've consummed more coffee and officially woken up, I'll appologise
> for including a factual inaccuracy in my last message i.e. I was wrong.  There
> *isn't* a spec for JOS4C, rather it simply provides enough infrastructure to
> implement PersonalJava on an otherwise bare machine.
> 
> AFAIK there is no publically available documentation of JOS4C internals.  OTOH
> it is based on ChorusOS (formally known simply as Chorus from Chorus Systeme in
> Paris) and there is /some/ publically available information about that,
> including a very quiet newsgroup "comp.os.chorus".

"JAvaOS for consumer" is not a Java OS. It is simply a PersonalJava VM
on top of a real-time kernel (Chorus).
All system or driver call must be done in native code, like any standard
Java implementation on an OS.
The only thing that could justify the marketing name "JavaOS" is that
the AWT has been implemented in Java on native low-level graphics
primitives.

The real Java OS is JavaOS for business, from Sun and IBM. Its
documentation can be found at IBM. (not recall the URL)

-- 
Yves Bossu
  Consultant
  Fi System, Web Agency
  mailto:ybossu@fisystem.fr
  http://www.fisystem.fr     http://www.embeddedjava.net




