From gchii@mindspring.com Sat, 02 Sep 2000 09:11:17 -0400
Date: Sat, 02 Sep 2000 09:11:17 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [smartapi] Coming soon: Release 11

Release 11 of the Smart API 2a is coming soon. It includes a bug fix to the
Universal Browser, which once again enables it to launch a copy of itself.
It includes a new utility for comparing two text files, called TextCompare.

Universal Browser depends on the Smart API. The Universal Browser
demonstrates the power of the Smart API. It is an example program. Many
other programs in this collection are example programs. It seems to me that
Smart API and Universal Browser should have been distributed separately.

The distribution may change, but not the names of any package. The process
of splitting off the Universal Browser part of the Smart API is a good
thing. It would enable me to provide more documentation of these example
programs.

It leads directly to the possibility of a fully self-contained product
called Universal Browser for Windows(tm), and another called Universal
Browser for Linux(r).

In the beginning, every change to Smart API had a corresponding change to
the Universal Browser. It made sense to distribute them together. Now, the
Smart API 2a distribution might be too big.





From gchii@mindspring.com Sat, 02 Sep 2000 09:13:01 -0400
Date: Sat, 02 Sep 2000 09:13:01 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [textcompare] Version 1a

The first version of Text Compare has been written. Soon, it will be
distributed in release 11 of the Smart API 2a.

Already it has enabled me to see the difference between versions 1c and 1d
of the Source Server.





From gchii@mindspring.com Mon, 04 Sep 2000 17:01:02 -0400
Date: Mon, 04 Sep 2000 17:01:02 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [smartapi] Release 11

Release 11 of the Smart API is available for immediate download. See the
following article on JOS Wiki:

http://www.metamech.com/wiki/view/Main/DownloadSmartAPI

This release includes the Text Compare utility.





From gchii@mindspring.com Wed, 06 Sep 2000 15:05:33 -0400
Date: Wed, 06 Sep 2000 15:05:33 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [smartapi] Release 2 for Version 1a

Release 2 of the Smart API Version 1a is available for immediate download.
For more information, see also the following article on JOS Wiki:

http://www.metamech.com/wiki/view/Main/DownloadSmartAPI

Do not confuse this with version 2a. Version 2a depends on 1a and 1b.

Open source and free license information is included in source files. The
following "internal-use-only" packages have been "moved":

com.realignsoft.iniregistry1a --> gchii.library.iniregistry1a
com.realignsoft.streamfactory1a --> gchii.library.streamfactory1a
com.realignsoft.stringregistry1a --> gchii.library.stringregistry1a
com.realignsoft.stringregistry1b --> gchii.library.stringregistry1b
com.realignsoft.textregistry1a --> gchii.library.textregistry1a

This is proof of the power of the Smart API. Even major changes like these
do not break perfect backward compatibility. A number of minor changes have
also been made.





From gchii@mindspring.com Wed, 06 Sep 2000 17:42:14 -0400
Date: Wed, 06 Sep 2000 17:42:14 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [applet browser] Release 1

Release 1 of Applet Browser 1c for Windows(tm) is available for immediate
download (485,451 bytes):

http://www.jos.org/redist/mirror/jos1g/jos1g-appletbrowser1c-1-win.zip

This product is self-contained, runtime edition. It includes an eric tool
from eric1c-2. The eric tool depends on any off-the-shelf JNI-compatible
virtual machine, such as JRE 1.1.6 or JRE 1.2.2. It includes the
smartapi1a.jar and smartapi1b.jar.

To install your applet:
  1. Create a jar from your applet's class files.
  2. Copy the jar to the appletbrowser1c-1-win/lib directory.

To run your applet:
  1. Double-click on appletbrowser.exe.
  2. Type in a location and press the Run button.

The AppletBrowser uses the applet: scheme, part of the Smart API. For an
applet called org.jos.demo.DemoApplet, the location is

applet:org.jos.demo.DemoApplet

Many applets require parameters. Parameters are passed using a query
string, like this:

applet:org.jos.demo.DemoApplet?name1=value1&name2=value2&name3=value3

For anyone with Windows 95/98/NT/2000, unzip and enjoy!





From gchii@mindspring.com Thu, 07 Sep 2000 07:58:10 -0400
Date: Thu, 07 Sep 2000 07:58:10 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [applet browser] Release 1

Release 1 of Applet Browser 1c is available for immediate download. It does
not yet have a corresponding article on JOS Wiki. Here are the links for
the runtime edition and two source editions:

http://www.jos.org/redist/mirror/jos1g/jos1g-appletbrowser1c-1.zip
http://www.jos.org/redist/mirror/jos1g/jos1g-appletbrowser1c-1-src.tgz
http://www.jos.org/redist/mirror/jos1g/jos1g-appletbrowser1c-1-src.zip

The distribution of the Applet Browser by itself strays from the
distribution process I have been using. Applet Browser is part of Smart API
2a. A new release of Smart API 2a is pending.

As for the Windows-specific version, it also strays from the distribution
process I have been using. The eric tool from eric1c-2 has not yet been
officially released.





From gchii@mindspring.com Thu, 07 Sep 2000 08:42:56 -0400
Date: Thu, 07 Sep 2000 08:42:56 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [smartapi 2a] Release 12

Release 12 of Smart API 2a is available for immediate download. For more
information, see also the following article on JOS Wiki:

http://www.metamech.com/wiki/view/Main/DownloadSmartAPI

This release includes Program Browser 2c. It is based on the Subprogram API
for JOS instead of José. Note that this has not yet been integrated into
the Universal Browser.

This release also includes Applet Browser 1c, also available elsewhere as a
stand-alone application.

This release also includes the Application Studio 2b, reworked from
experience with Text Search and Text Compare.

The source code for this release is available on-line. See the "view
source" link inside the above article.





From gchii@mindspring.com Sat, 09 Sep 2000 19:16:08 -0400
Date: Sat, 09 Sep 2000 19:16:08 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [purereflection] Release 1

Release 1 of Pure Reflection 1c is available for immediate download. It was
written in C++ on Windows and needs to be tested (ported?) to Linux.

SOURCE: This archive includes only the C++ source code:

http://www.jos.org/redist/mirror/jos1g/jos1g-purereflection1c-1.zip

Pure reflection is part of the VMKit. Pure reflection decodes a class file.
It works inside and outside of a virtual machine. One pure reflection
component works with Java 0, 1 and 2 platforms since they all share the
same "classfile" format. All virtual machines written in i86 machine code
need some sort of component to decode a class file, such as pure
reflection. For more information, see also the PureReflection article on
JOS Wiki.

This is pretty close to an anchor-based model that I've been working on for
the past year and a half. This is the first version capable of reflection
down to the Code attribute. The CodeAttributeTool is able to return
MaxStack and MaxLocals, code, handlers and attributes.

This distribution also includes the new IntArray and ByteArray classes,
(although they aren't yet used).

This archive contains a pre-compiled copy of classdata.exe. This program
reflects the java.lang, java.util, java.io and java.net packages of Kore.
If you'll notice, it requires no external resources. It does not read
classes from a directory or an archive.

With a little work, this program could recognize command line options. I'm
thinking a command like this might reflect a single class:

classdata java/lang/Object

and a command like this might reflect a package:

classdata java/lang/*

With a little work, classdata.exe could easily generate HTML pages.

-----

KORE: This archive includes classes from Kore 0.0.7 already converted to C++:

http://www.jos.org/redist/mirror/jos1g/jos1g-purereflection1c-1-kore.zip

A simple Java application converts .class files to bytecode resource (.cpp)
files. The generated code in this archive is only one of many possible ways
to do this.

-----

I'm planning to write a new JOSWiki article called DownloadPureReflection.
Look for it.





From gchii@mindspring.com Sat, 09 Sep 2000 20:05:05 -0400
Date: Sat, 09 Sep 2000 20:05:05 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [purereflection] Release 1

Release 1 of Pure Reflection 1c is available for immediate download. For
more information, see also the following article on JOS Wiki:

http://www.metamech.com/wiki/view/Main/DownloadPureReflection

Pure reflection is a shared library. It can be linked to a virtual machine.

Additional libraries contain bytecode as a resource. These are also linked
to a virtual machine.

A virtual machine and its core packages can be statically linked into a
single executable program. You can connect pure reflection to your
primordial class loader.

Bytecode as a resoure also saves time and memory. It saves time because
read-only bytecode is loaded with the virtual machine. No separate
file-open or network connection is required. Real memory contains only the
bytecode actually used. A highly efficient page-fault forces a virtual
memory manager to load the bytecode.

With bytecode as a resource, it is nearly impossible for your virtual
machine to lose its core classes. Download all other classes in the usual way.

With pure reflection, you can get to the good stuff. Instead of decoding
the class file, you can concentrate on building your vm-specific
representation of a class.

Don't worry. When the bytecode format changes, your virtual machine may not
be affected. Decoding is encapsulated in the pure reflection library.





From gchii@mindspring.com Tue, 12 Sep 2000 15:48:30 -0400
Date: Tue, 12 Sep 2000 15:48:30 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [bulkmake] For Windows(tm)

Release 3 of BulkMake 2b is now available for Windows(tm). For more
information, see also the following article on JOS Wiki:

http://www.metamech.com/wiki/view/Main/DownloadBulkMake





From gchii@mindspring.com Tue, 12 Sep 2000 22:28:38 -0400
Date: Tue, 12 Sep 2000 22:28:38 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [purereflection] Release 2

Release 2 of Pure Reflection 1c is now available. See also the
DownloadPureReflection article on JOS Wiki.

A series of ..CP methods have been added. They return the actual constant
pool index.

  getThisClassSpecCP();
  getSuperClassSpecCP();
  getInterfaceSpecCP();
  getFieldNameCP();
  getFieldTypeCP();
  getMethodNameCP();
  getMethodDescriptorCP();

The new classes are HeaderTool and SignatureTool. Also, individual tools
are now responsible for maintaining their "after" property (for increased
efficiency).

When compared to pure reflection in bytecode, the "ClassFile" class is
still missing from this C++ implementation. The "BasicAccess" class need an
additional property to select class, field or method access.





From gchii@mindspring.com Tue, 12 Sep 2000 22:57:59 -0400
Date: Tue, 12 Sep 2000 22:57:59 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [smartapi] New release

My product review is complete. New releases of Smart API 1a, 1b and 2a are
now available. See also the DownloadSmartAPI article on JOS Wiki. Here are
the latest releases:

Smart API 1a - Release 3
Smart API 1b - Release 2
Smart API 2a - Release 13

a. Pure reflection in Java will be eventually moved out of Smart API 1b and
into its own product. It should be part of a pure reflection product, right?

b. Universal Browser and all of its plug-ins will be eventually moved out
of Smart API 2a and into its own product.

c. Smart API 1a, 1b and 2a will be eventually distributed together, since
2a depends on 1a and 1b.

Thanks Iain :)





From iainshigeoka@yahoo.com Wed, 13 Sep 2000 09:34:39 -0500
Date: Wed, 13 Sep 2000 09:34:39 -0500
From: Iain Shigeoka iainshigeoka@yahoo.com
Subject: [JOS-Apps] [smartapi] New release

All three of your latest releases have been announced on the webpage.

-iain

At 10:57 PM 9/12/00 -0400, Gilbert Carl Herschberger II wrote:
>My product review is complete. New releases of Smart API 1a, 1b and 2a are
>now available. See also the DownloadSmartAPI article on JOS Wiki. Here are
>the latest releases:
>
>Smart API 1a - Release 3
>Smart API 1b - Release 2
>Smart API 2a - Release 13
>
>a. Pure reflection in Java will be eventually moved out of Smart API 1b and
>into its own product. It should be part of a pure reflection product, right?
>
>b. Universal Browser and all of its plug-ins will be eventually moved out
>of Smart API 2a and into its own product.
>
>c. Smart API 1a, 1b and 2a will be eventually distributed together, since
>2a depends on 1a and 1b.
>
>Thanks Iain :)
>
>
>_______________________________________________
>Apps maillist  -  Apps@jos.org
>http://jos.org/mailman/listinfo/apps





From gchii@mindspring.com Thu, 14 Sep 2000 11:44:56 -0400
Date: Thu, 14 Sep 2000 11:44:56 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [programservice] New article on JOS Wiki

The Program Service utility provides a program service environment. It is a
simple demonstration of how to run programs using a service on the network.
Any TELNET-compatible client is used to connect to the program service and
run programs. For more information, see also the following article on JOS
Wiki:

http://www.metamech.com/wiki/view/Main/ProgramService

Since the java.net.Socket class is a TELNET-compatible client, any method
can invoke a program on a program service. Here is a very simple example
which invokes a demo program and prints its output to system out:

  public void example() {
    try {
      exec( "run:program:org.jos.demo.DemoProgram" );
    }
    catch( IOException e ) {
    }
  }
  public void exec( String v ) {
    Socket s = new Socket( "localhost", 8023 );
    PrintStream output = new PrintStream( s.getOutputStream() );
    output.println( v );
    DataInputStream input = new DataInputStream( s.getInputStream() );
    for (;;) {
      String line = input.readLine();
      if ( line == null ) {
        break;
      }
      System.out.println( line );
    }
    input.close();
    output.close();
    s.close();
  }

This behavior should be encapsulated in a program-service: scheme,
something like this:

program-service://localhost:8080/run:program:org.jos.demo.DemoProgram





From gchii@mindspring.com Mon, 25 Sep 2000 16:28:34 -0400
Date: Mon, 25 Sep 2000 16:28:34 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] Universal Browser

The purpose of the Universal Browser is to interactively demonstrate the
Smart API. Because it won't work without the Smart API, the Universal
Browser is part of the Smart API 2a distribution. It is AWT-based for
maximum compatibility. For more information, see also the following article
on JOS Wiki:

http://www.metamech.com/wiki/view/Main/UniversalBrowser





From gchii@mindspring.com Fri, 29 Sep 2000 21:38:21 -0400
Date: Fri, 29 Sep 2000 21:38:21 -0400
From: Gilbert Carl Herschberger II gchii@mindspring.com
Subject: [JOS-Apps] [pure reflection] In Java

Pure Reflection is available for Java and C++. Both decode .class files.
Pure Reflection for Java has been updated to catch up to Pure Reflection
for C++.

All get..CP() methods return a constant pool (CP) index. All get..Spec()
methods return a slash delimited name, like java/lang/Object. All
get..Name() methods return a dot delimited name, like java.lang.Object.

The importance of pure reflection cannot be overemphasized. Pure reflection
is where most designers start when building their own virtual machine. When
many classes are involved, pure reflection is safer and faster than
practical reflection. It is safer because no methods of the reflected class
are invoked. It is faster because classes are only decoded, not defined; no
class loader is involved.

Pure reflection is cross-Java-platform, too. A Java 0 virtual machine, for
example, can reflect classes from Java 2.

I have written too many Java servlets to remember them all. Just the other
day, I needed to know the name of every servlet I had written. It was the
perfect opportunity to use Pure Reflection for Java.

With that assignment nearly completed, I have also created a generic
utility for searching for classes based on inheritence. I have called it
the "Instance Of" utility. It will be available in a new release of Smart
API 2a.

run:program:org.jos.gchii.instanceof1a.InstanceOf

The Instance Of utility works like this. Type the name of a directory (used
like CODEBASE) where your .class files are stored. Optionally, type the
name of a package where you want the search to start. Type the name of the
interface or class to match. Click on the Run button to start the search.
The name of every matching class is displayed.

The following example will search for all classes which directly or
indirectly implment the java.lang.Runnable interface.

Directory: J:\
Package: org.jos
Interface: java.lang.Runnable

This utility looks recursively through each superclass and each interface,
until it finds a matching class name or "java.lang.Object".

This utility is implemented in AWT for maximum compatibility. Any method
can invoke the InstanceOfProgram with directory, package and interface
parameters.





