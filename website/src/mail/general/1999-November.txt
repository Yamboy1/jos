From RegierAveryJ@JDCORP.deere.com Thu, 4 Nov 1999 07:58:06 -0600
Date: Thu, 4 Nov 1999 07:58:06 -0600
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [JOS] kjc - GPL'd Java compiler

All,

I just ran accross something that I believe we can use.  It is kjc - the
only Java Compiler written in Java with a GPL license (or also completely
free of Sun source code or licensing restrictions) I know of.  At some point
we *must* have a compiler that we can distribute with JOS and this looks to
be just the ticket.  It has also just recently become the compiler for
Kaffe.

You can find it at:  http://www.dms.at/kopi/

It would be worthwhile goal of the JJOS & decaf project to integrate this
and get it running soon.

Regards,
Avery J. Regier





From rui.gil@inesc.pt Tue, 9 Nov 1999 12:48:31 -0000
Date: Tue, 9 Nov 1999 12:48:31 -0000
From: Rui Gil rui.gil@inesc.pt
Subject: [JOS] Javalobby


Hi everybody !

I don't know if JOS has a PR person,
but an article pop-up in JavaLobby (www.javalobby.org)
asking about the current status os JOS.

Perhaps someone better informed could respond.

thank's

Rui Gil




From iainshigeoka@yahoo.com Thu, 11 Nov 1999 12:05:06 -0600
Date: Thu, 11 Nov 1999 12:05:06 -0600
From: Iain Shigeoka iainshigeoka@yahoo.com
Subject: [JOS] Javalobby

On 9 Nov 99, at 12:48, Rui Gil wrote:

> I don't know if JOS has a PR person,
> but an article pop-up in JavaLobby (www.javalobby.org)
> asking about the current status os JOS.
> 
> Perhaps someone better informed could respond.

Thanks for the heads up.  Although I'm not a PR person, I've tried 
to post a reasonable followup.

-iain

****************
JOS Silently Flourishing... 510000000000600
Posted by Iain Shigeoka, 11 Nov


 Hello,

  First, I'd like to insert a quick disclaimer that I'm speaking for 
myself, and not as a JOS "official".

From my viewpoint, the JOS Project is silently flourishing. The 
current JOS status can be summarized as follows:

1) A native kernel and JVM is in the late phases of initial 
implementation. It's booting, painting the screen, grabbing
keyboard input, running tests, etc. There are still some very rough 
spots that need to be ironed out and some minor holes in the 
implementation that remain. But its getting very close.

2) The core group is now turning its eye towards porting classpath 
(www.classpath.org) as the new, highest priority task for the 
project. This will create a full Java Platform (as per Sun's definition) 
sans GUI on JOS. Finishing the remaining tasks in 1) and 
completing 2) will provide a full OS and java libraries. Most pure 
java apps should then run on JOS without modification.

As for explaining the lack of news concerning the project, the JOS 
project is IMHO experiencing two simultaneous phenomenon. First, 
we are in the implementation phase of writing a kernel. Second, our 
website has gone through a couple of meltdowns recently and we 
have moved our mailing lists from one server to another.

It would seem natural to me for a project of this type to go through 
at least one large swing in visible activity during kernel 
implementation. In the beggining, JOS was an idea and so heavy 
discussion and brainstorming was the order of the day. A lot of 
documentation was created. This creates a lot of visible activity. 
The core contributors were spending their time developing these 
documents.

Now that we've moved into initial implementation, we're not 
brainstorming as much. The core developers are writing code and 
not producing web documents. So the visible activity has gone way 
down. In addition, other projects (such as the user interface group) 
is basically in a holding pattern waiting for an initial kernel release.

The particulars of kernel code development means that, for quite a 
large portion of code development, there's no real distributable beta 
code that people can try out. So visible progress appears to be 
"stalled". IMHO, I think this illusion of the project being stalled out, 
will continue until we get the kernel and a base java library 
(classpath) working. Once we can release a beta os and libraries, I 
think you will see a sudden flurry of JOS related activity. We very 
tentatively are targeting a spring beta release.

I should also add that development is going slower than many other 
open source projects because (as far as I'm aware) all the core 
developers are employed or in school full-time. So we don't have a 
group of "super developers" that can contribute 40+ hours a week 
to the project. JOS develompent ramains slow and steady.

The website problems that JOS has suffered recently are due to 
many factors. The end result has been that our collaborative 
document web (the Wiki) has been moved to a temporary server 
(with some links breaking during the move), while the main web 
page, and CVS server remains at the original web server 
(www.jos.org). In addition, early this year, we relocated our mailing 
lists to our main web server which has possibly "stranded" some 
older subscribers. Amid this chaos, its been hard to keep the 
website running, let alone add content.

In fact, as the JOS webmaster, I've been spending all my JOS time 
working on the next generation of the JOS website instead of 
cleaning up the site and adding content. I hope that this effort will 
pay off in increased usability and functionality of the site in the near 
future. Both of which will probably needed when the next rush of 
activity occurs at JOS (hopefully during a spring beta release!). For 
the short term though, its meant reduced information and a hobbled
site.

The JOS project is always looking for volunteers! I highly suggest 
browsing the Wiki, and joining the mailing lists if you're interested. 
There's a decent amount of traffic on the mailing lists, and the wiki 
holds a wealth of information. If you want to help out on the 
website, register for a WikiName, put on a hard hat and help us to 
clean up our Wiki!

Other questions about the JOS project should be sent to the 
general mailing list (general@jos.org). Alternatively, you can send 
me a note and I'll try and answer it or pass it on to the appropriate 
person(s).

-iain shigeoka (JOS Webmaster webmaster@jos.org)



From gilead@linart.pl Sat, 13 Nov 1999 00:16:20 +0100
Date: Sat, 13 Nov 1999 00:16:20 +0100
From: Max Gilead gilead@linart.pl
Subject: [JOS] JDK incompatibility solutions

Hi, all!

I have read JOS mailing lists archives. On UI group there were a thread
some time ago about this. Although I think that making different JDK
releases fully compatible (even if only backward compatible) would be a
very useful thing but I doubt this will happen soon. The bad thing is
that JDK is so monolithic piece of software. It would be much better
IMHO if instead of one JDK we would have separate libraries - eg.
Utility library, AWT library etc. It's just an example and I'm not sure
but security issues of JDK1.2 rather don't affect AWT ;-), am I right?
So why release it in one piece? If it won't happen the whole system
would be more flexible. But these are just my wishes :-(. Even libraries
for languages that are on market for much longer than Java, for example
C++ are undergoing changes, sometimes breaking any compatibility
(libc<->glibc change in GNU libraries, recent change in C++ specs which
causes many problems with compilers).

These are my thoughts about possible solutions to problem with
incompatible JDK releases:

1. Static linking.
Let's take a look at C++ applications (I'm talking about such basic
things to make me clear). They can be dynamically or statically linked.
Dynamically means that they use some external libraries, in fact a
specific version of these libraries. They are smaller than statically
linked versions but suffer from possible incompatibility problems.
Statically linked applications does not use external libraries - they
have all of them compiled into executable file.
In Java, all applications are 'dynamically linked'. Possible solution is
to package classes it uses with program. But this is not possible for
native classes and doesn't solve VM incompatibility problems.

2. JDK for JOS (much better solution)
Some people think that JOS should mimic JDK. I think it should not (at
least not its core). I think that JOS core should provide VM to run
bytecode and its own hardwired system classes (jos.org.* and below?) -
that's all. This way it would be possible to run applications compiled
for different JDKs (even ancient ones) without any problems. Which JDK
to run under could be choosen from some property panel or detected at
runtime(?).

Incompatibility problem can be breaked into two smaller problems:
- VM incompatibility.
As VM functionality is provided by system, system should have
possibility to run applications in different VM versions. It would not
be a problem since VM changes should be very rare (I hope :-)
- Core classes incompatibility.
As JDKs are mostly backward compatible, providing older class library
would require substituting incompatible classes only. Say, application
was compiled for JDK 1.1 and current standard JOS classpath is 1.2. So
an imaginary classpath would look like:
./application.jar:/classpath/ver1.1.jar:/classpath/ver1.2.jar
As JOS is a _Java_ OS I think that native classes problem would go away,
too, as they could be implemented as JOS system calls in Java.
Easy enough, I think. And very flexible. If user doesn't want to run any
older applications, he does not install compatibility libraries. But he
may do so at any time.

These are just my thoughts, so let people criticise (or express awe ;-)

Bye,
Max


-------
-- Max Gilead (gilead@linart.pl) ----------
| http://3d.linart.krakow.pl/OfficinaArtificialis |
---------------------------------------------------
{EOF}















From RegierAveryJ@JDCORP.deere.com Wed, 17 Nov 1999 15:55:27 -0600
Date: Wed, 17 Nov 1999 15:55:27 -0600
From: Regier Avery J RegierAveryJ@JDCORP.deere.com
Subject: [JOS] JDK incompatibility solutions

Max,

In the JOSCore project work I've been doing, I've done some thinking in this
area.

As part of the installation process, each 'Program' would get a series of
entries in the JOS Registry.  Among these entries would be packages and
versions of those packages that the program relies on.  If none were there,
JOS would assume to use the latest versions.  Do to the multiple-primitive
ClassLoaders and other ideas we will one day implement in decaf, each
process can have a different version of class libraries, even if two or more
processes are using different versions of the same class.  

In order to make this all work, a lot of things need to be very well
integrated.  The ClassLoading process will rely on the Registry, and since
Security will rely on the ClassLoading process, the Registry will need to be
quite secure.  (The Registry willl likely be the weakest security link in
JOS.)  All of this also means that there is a need for some kind of a
ClassRepository, which keeps track of package versions.  That begs the
question:  can we allow classes to be placed anywhere they want on the
filesystem?  Or do they need to be a central place?  How we answer that
question is going to have a huge effect on the installation process.

It is a lot of code to write, and all I have so far is really a skeleton of
some of the core interfaces.  I'm starting to get back to work on it,
though.  Anyone want to volunteer to write a ClassRepository?  :)

Regards,
Avery J. Regier


> -----Original Message-----
> From:	Max Gilead [SMTP:gilead@linart.pl]
> Sent:	Friday, November 12, 1999 6:16 PM
> To:	JOS General group
> Subject:	[JOS] JDK incompatibility solutions
> 
> Hi, all!
> 
> I have read JOS mailing lists archives. On UI group there were a thread
> some time ago about this. Although I think that making different JDK
> releases fully compatible (even if only backward compatible) would be a
> very useful thing but I doubt this will happen soon. The bad thing is
> that JDK is so monolithic piece of software. It would be much better
> IMHO if instead of one JDK we would have separate libraries - eg.
> Utility library, AWT library etc. It's just an example and I'm not sure
> but security issues of JDK1.2 rather don't affect AWT ;-), am I right?
> So why release it in one piece? If it won't happen the whole system
> would be more flexible. But these are just my wishes :-(. Even libraries
> for languages that are on market for much longer than Java, for example
> C++ are undergoing changes, sometimes breaking any compatibility
> (libc<->glibc change in GNU libraries, recent change in C++ specs which
> causes many problems with compilers).
> 
> These are my thoughts about possible solutions to problem with
> incompatible JDK releases:
> 
> 1. Static linking.
> Let's take a look at C++ applications (I'm talking about such basic
> things to make me clear). They can be dynamically or statically linked.
> Dynamically means that they use some external libraries, in fact a
> specific version of these libraries. They are smaller than statically
> linked versions but suffer from possible incompatibility problems.
> Statically linked applications does not use external libraries - they
> have all of them compiled into executable file.
> In Java, all applications are 'dynamically linked'. Possible solution is
> to package classes it uses with program. But this is not possible for
> native classes and doesn't solve VM incompatibility problems.
> 
> 2. JDK for JOS (much better solution)
> Some people think that JOS should mimic JDK. I think it should not (at
> least not its core). I think that JOS core should provide VM to run
> bytecode and its own hardwired system classes (jos.org.* and below?) -
> that's all. This way it would be possible to run applications compiled
> for different JDKs (even ancient ones) without any problems. Which JDK
> to run under could be choosen from some property panel or detected at
> runtime(?).
> 
> Incompatibility problem can be breaked into two smaller problems:
> - VM incompatibility.
> As VM functionality is provided by system, system should have
> possibility to run applications in different VM versions. It would not
> be a problem since VM changes should be very rare (I hope :-)
> - Core classes incompatibility.
> As JDKs are mostly backward compatible, providing older class library
> would require substituting incompatible classes only. Say, application
> was compiled for JDK 1.1 and current standard JOS classpath is 1.2. So
> an imaginary classpath would look like:
> ./application.jar:/classpath/ver1.1.jar:/classpath/ver1.2.jar
> As JOS is a _Java_ OS I think that native classes problem would go away,
> too, as they could be implemented as JOS system calls in Java.
> Easy enough, I think. And very flexible. If user doesn't want to run any
> older applications, he does not install compatibility libraries. But he
> may do so at any time.
> 
> These are just my thoughts, so let people criticise (or express awe ;-)
> 
> Bye,
> Max
> 
> 
> -------
> -- Max Gilead (gilead@linart.pl) ----------
> | http://3d.linart.krakow.pl/OfficinaArtificialis |
> ---------------------------------------------------
> {EOF}
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> _______________________________________________
> General maillist  -  General@jos.org
> http://jos.org/mailman/listinfo/general



From digigod@earthling.net Thu, 18 Nov 1999 01:08:46 -0500 (EST)
Date: Thu, 18 Nov 1999 01:08:46 -0500 (EST)
From: digigod@earthling.net digigod@earthling.net
Subject: [JOS] What is JOS?

In the more recent threads here I have noticed some confusion about the seperation of the elements of JOS, so I am going to attempt to clarify these here.

JOS is not like its predecessors, it is not one large monolithic clump-o'-OS. First we have JOSCore, this is the minimal OS consisting of a JOSBox and a minimal JOSystem and no more. Then we have "JOSExtensions" the devices, drivers and services it takes to be able to use JOS for more then the RAM equivalent of a paperweight. Running on top of this is the "Application Level" most notably JADE and its PUI (allowing the computer to interact with the user). This is all suspended in the lime Jell-O that is the Java and JOS API's (I think we should discriminate between JOS API's that require JOS and those that don't, I propose that the ones that do not require JOS be reffered to as the JOS Extra API's -- someone give that a better name...).

An Install/Uninstall library is an excellent idea, although it is not part of JOSystem it is a JOS Extra API (I hate to seem like Im picking on it. I'm not, it's just the first instance I thought of...). Furthermore, JOSystem is -- basically -- just a pure java kernel (it takes on the classic role of the kernel in most senses and buffers between everyone and the real kernel in the other cases) and an appplication runner.

The JOSBox is the computer were writing this OS for, in a sense. It is the virtual hardware the JOSystem "kernel" is running on, if someone made this into real hardware a modified JOSystem would run JOS on it directly. It is the true kernel and the JVM. A JOSBox application could be made sans kernel, this is how you could run JOS on a non-JOS machine; the JOSystem would require extra features the JOSBox supplies to run so just running it on "any old VM" would be painful, a special JOSBox would be the way to go. The main benifit of this I see is not in having a showcase for JOS but in having a multi-process java environment running on ones computer, allowing (with minor modification) to let the OS "launch" Java apps into this environment/quasiOS cutting down on memory and start time (people would get to tour JOS then get to keep a powerful tool like that). I think we should get a kernel/VM JOSBox up then modify it to be an "emulator" JOSBox later on, just my opinion though.

JVM incompatabilities might be solved with the exokernel design. Exokernel is basically a blank slate of a kernel that allows libraries to be plugged into it to provide optimal hardware use (and, of course, having a default library for legacy apps). Whats this have to do with JVM's!? Good question, say we have most of the stuff that makes a JVM and then have little libraries filling the rest in, in a release compatiable manner. That is, we have XVM (exo-VM) with a JDK 1.0 library, a 1.1 lib and a 1.2 lib. I don't know how well that would work, but its worth a thought.

Cheers,
DigiGod
_________________________
Quote of the Moment:
        No, I'm Canadian. It's like an American, but without a 
        gun.
              -Dave Foley
_________________________
Prank of the Moment:
	Using the conferencing feature of your office phone, dial
	one Induhvidual, then while it's ringing dial another and
	conference them together. Put your own phone on mute
	and listen to see how long they'll make small talk before
	figuring out that neither one placed the call.
O-
----------------------------------------------------------------
Get your free email from AltaVista at http://altavista.iname.com



From brill.pappin@jmonkey.com Tue, 16 Nov 1999 10:18:47 -0500
Date: Tue, 16 Nov 1999 10:18:47 -0500
From: Brill Pappin brill.pappin@jmonkey.com
Subject: [JOS] JDK incompatibility solutions

----- Original Message -----
From: Max Gilead <gilead@linart.pl>
To: JOS General group <general@jos.org>
Sent: Friday, November 12, 1999 6:16 PM
Subject: [JOS] JDK incompatibility solutions
[...]
> 2. JDK for JOS (much better solution)
> Some people think that JOS should mimic JDK. I think it should not (at
> least not its core). I think that JOS core should provide VM to run
> bytecode and its own hardwired system classes (jos.org.* and below?) -
> that's all. This way it would be possible to run applications compiled
> for different JDKs (even ancient ones) without any problems. Which JDK
> to run under could be choosen from some property panel or detected at
> runtime(?).


I afrad I don't agree here... I think the JOS should be as close to the
standard implementation as possible...
It just means that *anything* would run on it, including 1.1 & 1.2 code.

This also makes it much simpler for the guys writing the kernel... in this
case, all they have to do is provide the basic windowing systems, and hook
the AWT components into their peers. With a model like this, we then have
the OS... and anyone can implement an environment that works for them...
needless to say, JOS would come with one or two default environments, but
would wouldn't need to use them.
This also means that the kernel guys can focus on making the native side as
fast and stable as posible, and not have to worry about the L&F of the rest
of the thing.

All it has to do, is boot to a basic graphical environment... once done, the
rest of the system can take any form it wishes.

> Incompatibility problem can be breaked into two smaller problems:
[...]
> Easy enough, I think. And very flexible. If user doesn't want to run any
> older applications, he does not install compatibility libraries. But he
> may do so at any time.

So why not allow the choice to the application. Let each application choose
a namespace (sandbox?), and allow the system to be configured, so that an
application can be set to run in a 1.1 VM, or a 1.2 VM... in that case, it
will require a little creativity on the part of the kernel people... but its
doable i think.
Obviously it would be best is the OS and its applications ran in the same
VM... that would make maximum usage of memory, and runtime performance...
however, I can see instance where running in separate VMs would be
beneficial... i.e. for stability (separation of process)...
Anyway, this is fancy stuff... that can be dreamed up later... you would
need a special VM Factory that could create the different VMs, but still
allow the applications to access one another (as in the instance of
Singleton classes, such as a file system, or security manager).

Personally, all I want right now, is a working kernel, with the JVM
implemented... once I get my hands on that, we can start on the rest of the
system.


- Brill Pappin
  www.jmonkey.com

  The sooner you fall behind,
  the more time you will have
  to catch up."





From clark.evans@manhattanproject.com Fri, 19 Nov 1999 15:02:00 -0500 (EST)
Date: Fri, 19 Nov 1999 15:02:00 -0500 (EST)
From: Clark C. Evans clark.evans@manhattanproject.com
Subject: [JOS] Posting

For those people sending e-mail to the JOS lists
without being a subscriber; the mail is held
in a queue for review (about 80% spam)  Currently, 
I'm the only one checking the queue 
and I do it about once a week.  

Clark




